//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NPWSL.NeplanService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExternalProject", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External")]
    [System.SerializableAttribute()]
    public partial class ExternalProject : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AngleXYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AreaIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CalcNameIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CoordinateUnitsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DiagramIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DirectionUpYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double FactorXYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GraphicLayerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ImportWithGraphicField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LayerMinXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LayerMinYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short LayerUnitXYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LibraryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LibrarySubnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LogNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumDiagramField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumGraphicField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReturnCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SridIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubAreaIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VariantIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double VersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WorldCoordMaxXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WorldCoordMaxYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WorldCoordMinXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WorldCoordMinYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ZoneIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double AngleXY {
            get {
                return this.AngleXYField;
            }
            set {
                if ((this.AngleXYField.Equals(value) != true)) {
                    this.AngleXYField = value;
                    this.RaisePropertyChanged("AngleXY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AreaID {
            get {
                return this.AreaIDField;
            }
            set {
                if ((object.ReferenceEquals(this.AreaIDField, value) != true)) {
                    this.AreaIDField = value;
                    this.RaisePropertyChanged("AreaID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CalcNameID {
            get {
                return this.CalcNameIDField;
            }
            set {
                if ((object.ReferenceEquals(this.CalcNameIDField, value) != true)) {
                    this.CalcNameIDField = value;
                    this.RaisePropertyChanged("CalcNameID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CoordinateUnits {
            get {
                return this.CoordinateUnitsField;
            }
            set {
                if ((this.CoordinateUnitsField.Equals(value) != true)) {
                    this.CoordinateUnitsField = value;
                    this.RaisePropertyChanged("CoordinateUnits");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DiagramID {
            get {
                return this.DiagramIDField;
            }
            set {
                if ((object.ReferenceEquals(this.DiagramIDField, value) != true)) {
                    this.DiagramIDField = value;
                    this.RaisePropertyChanged("DiagramID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DirectionUpY {
            get {
                return this.DirectionUpYField;
            }
            set {
                if ((this.DirectionUpYField.Equals(value) != true)) {
                    this.DirectionUpYField = value;
                    this.RaisePropertyChanged("DirectionUpY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double FactorXY {
            get {
                return this.FactorXYField;
            }
            set {
                if ((this.FactorXYField.Equals(value) != true)) {
                    this.FactorXYField = value;
                    this.RaisePropertyChanged("FactorXY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GraphicLayerID {
            get {
                return this.GraphicLayerIDField;
            }
            set {
                if ((object.ReferenceEquals(this.GraphicLayerIDField, value) != true)) {
                    this.GraphicLayerIDField = value;
                    this.RaisePropertyChanged("GraphicLayerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupID {
            get {
                return this.GroupIDField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupIDField, value) != true)) {
                    this.GroupIDField = value;
                    this.RaisePropertyChanged("GroupID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ImportWithGraphic {
            get {
                return this.ImportWithGraphicField;
            }
            set {
                if ((this.ImportWithGraphicField.Equals(value) != true)) {
                    this.ImportWithGraphicField = value;
                    this.RaisePropertyChanged("ImportWithGraphic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Info {
            get {
                return this.InfoField;
            }
            set {
                if ((object.ReferenceEquals(this.InfoField, value) != true)) {
                    this.InfoField = value;
                    this.RaisePropertyChanged("Info");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double LayerMinX {
            get {
                return this.LayerMinXField;
            }
            set {
                if ((this.LayerMinXField.Equals(value) != true)) {
                    this.LayerMinXField = value;
                    this.RaisePropertyChanged("LayerMinX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double LayerMinY {
            get {
                return this.LayerMinYField;
            }
            set {
                if ((this.LayerMinYField.Equals(value) != true)) {
                    this.LayerMinYField = value;
                    this.RaisePropertyChanged("LayerMinY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short LayerUnitXY {
            get {
                return this.LayerUnitXYField;
            }
            set {
                if ((this.LayerUnitXYField.Equals(value) != true)) {
                    this.LayerUnitXYField = value;
                    this.RaisePropertyChanged("LayerUnitXY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LibraryName {
            get {
                return this.LibraryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LibraryNameField, value) != true)) {
                    this.LibraryNameField = value;
                    this.RaisePropertyChanged("LibraryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LibrarySubname {
            get {
                return this.LibrarySubnameField;
            }
            set {
                if ((object.ReferenceEquals(this.LibrarySubnameField, value) != true)) {
                    this.LibrarySubnameField = value;
                    this.RaisePropertyChanged("LibrarySubname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LogName {
            get {
                return this.LogNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LogNameField, value) != true)) {
                    this.LogNameField = value;
                    this.RaisePropertyChanged("LogName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumDiagram {
            get {
                return this.NumDiagramField;
            }
            set {
                if ((this.NumDiagramField.Equals(value) != true)) {
                    this.NumDiagramField = value;
                    this.RaisePropertyChanged("NumDiagram");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumGraphic {
            get {
                return this.NumGraphicField;
            }
            set {
                if ((this.NumGraphicField.Equals(value) != true)) {
                    this.NumGraphicField = value;
                    this.RaisePropertyChanged("NumGraphic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectID {
            get {
                return this.ProjectIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectIDField, value) != true)) {
                    this.ProjectIDField = value;
                    this.RaisePropertyChanged("ProjectID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectName {
            get {
                return this.ProjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNameField, value) != true)) {
                    this.ProjectNameField = value;
                    this.RaisePropertyChanged("ProjectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReturnCode {
            get {
                return this.ReturnCodeField;
            }
            set {
                if ((this.ReturnCodeField.Equals(value) != true)) {
                    this.ReturnCodeField = value;
                    this.RaisePropertyChanged("ReturnCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SridID {
            get {
                return this.SridIDField;
            }
            set {
                if ((object.ReferenceEquals(this.SridIDField, value) != true)) {
                    this.SridIDField = value;
                    this.RaisePropertyChanged("SridID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubAreaID {
            get {
                return this.SubAreaIDField;
            }
            set {
                if ((object.ReferenceEquals(this.SubAreaIDField, value) != true)) {
                    this.SubAreaIDField = value;
                    this.RaisePropertyChanged("SubAreaID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VariantID {
            get {
                return this.VariantIDField;
            }
            set {
                if ((object.ReferenceEquals(this.VariantIDField, value) != true)) {
                    this.VariantIDField = value;
                    this.RaisePropertyChanged("VariantID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Version {
            get {
                return this.VersionField;
            }
            set {
                if ((this.VersionField.Equals(value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WorldCoordMaxX {
            get {
                return this.WorldCoordMaxXField;
            }
            set {
                if ((this.WorldCoordMaxXField.Equals(value) != true)) {
                    this.WorldCoordMaxXField = value;
                    this.RaisePropertyChanged("WorldCoordMaxX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WorldCoordMaxY {
            get {
                return this.WorldCoordMaxYField;
            }
            set {
                if ((this.WorldCoordMaxYField.Equals(value) != true)) {
                    this.WorldCoordMaxYField = value;
                    this.RaisePropertyChanged("WorldCoordMaxY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WorldCoordMinX {
            get {
                return this.WorldCoordMinXField;
            }
            set {
                if ((this.WorldCoordMinXField.Equals(value) != true)) {
                    this.WorldCoordMinXField = value;
                    this.RaisePropertyChanged("WorldCoordMinX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WorldCoordMinY {
            get {
                return this.WorldCoordMinYField;
            }
            set {
                if ((this.WorldCoordMinYField.Equals(value) != true)) {
                    this.WorldCoordMinYField = value;
                    this.RaisePropertyChanged("WorldCoordMinY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ZoneID {
            get {
                return this.ZoneIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ZoneIDField, value) != true)) {
                    this.ZoneIDField = value;
                    this.RaisePropertyChanged("ZoneID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LoadData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External")]
    [System.SerializableAttribute()]
    public partial class LoadData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short ConnectionTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short LfTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumCustomersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short PhaseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ScalingTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short UnitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Value1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Value2Field;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short ConnectionType {
            get {
                return this.ConnectionTypeField;
            }
            set {
                if ((this.ConnectionTypeField.Equals(value) != true)) {
                    this.ConnectionTypeField = value;
                    this.RaisePropertyChanged("ConnectionType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short LfType {
            get {
                return this.LfTypeField;
            }
            set {
                if ((this.LfTypeField.Equals(value) != true)) {
                    this.LfTypeField = value;
                    this.RaisePropertyChanged("LfType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumCustomers {
            get {
                return this.NumCustomersField;
            }
            set {
                if ((this.NumCustomersField.Equals(value) != true)) {
                    this.NumCustomersField = value;
                    this.RaisePropertyChanged("NumCustomers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Phase {
            get {
                return this.PhaseField;
            }
            set {
                if ((this.PhaseField.Equals(value) != true)) {
                    this.PhaseField = value;
                    this.RaisePropertyChanged("Phase");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ScalingType {
            get {
                return this.ScalingTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ScalingTypeField, value) != true)) {
                    this.ScalingTypeField = value;
                    this.RaisePropertyChanged("ScalingType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Unit {
            get {
                return this.UnitField;
            }
            set {
                if ((this.UnitField.Equals(value) != true)) {
                    this.UnitField = value;
                    this.RaisePropertyChanged("Unit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value1 {
            get {
                return this.Value1Field;
            }
            set {
                if ((this.Value1Field.Equals(value) != true)) {
                    this.Value1Field = value;
                    this.RaisePropertyChanged("Value1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value2 {
            get {
                return this.Value2Field;
            }
            set {
                if ((this.Value2Field.Equals(value) != true)) {
                    this.Value2Field = value;
                    this.RaisePropertyChanged("Value2");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImportElementItem", Namespace="")]
    [System.SerializableAttribute()]
    public partial class ImportElementItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AreaNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] BayesInStationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short CableOrOHLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[] CoordinatesLabel1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[] CoordinatesLabel2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[] CoordinatesLabel3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[] CoordinatesLabel4Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[] CoordinatesLink1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[] CoordinatesLink2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[] CoordinatesLink3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[] CoordinatesSymbolField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double DiameterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ElementInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ElevationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int InstallationYearField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsForwardNetworkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsInMaintenanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsProjectedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short LayoutField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NPWSL.NeplanService.LoadData LoadField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LogicalSwitchField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short MaterialField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NodeName1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NodeName2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NodeName3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NodeName4Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OnGraphicLayerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short OnPortNrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubAreaNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubstationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SymbolAngleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SymbolNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SymbolSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NPWSL.NeplanService.TechDataValue[] TechDataValuesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NPWSL.NeplanService.WaterLoadData WaterLoadDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ZOrderNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ZoneNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string aliasName1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string aliasName2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] binaryDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string descriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string elementTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double lengthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string libraryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string librarySubnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string libraryTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string librayTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NPWSL.NeplanService.LineSectionData[] listLineSectionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NPWSL.NeplanService.LoadData[] listSubLoadsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short numConnectionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short phaseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool removeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double unField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string xmlDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string xmlInvestField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string xmlItemListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<float> yLocationField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AreaName {
            get {
                return this.AreaNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AreaNameField, value) != true)) {
                    this.AreaNameField = value;
                    this.RaisePropertyChanged("AreaName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Bay {
            get {
                return this.BayField;
            }
            set {
                if ((object.ReferenceEquals(this.BayField, value) != true)) {
                    this.BayField = value;
                    this.RaisePropertyChanged("Bay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] BayesInStation {
            get {
                return this.BayesInStationField;
            }
            set {
                if ((object.ReferenceEquals(this.BayesInStationField, value) != true)) {
                    this.BayesInStationField = value;
                    this.RaisePropertyChanged("BayesInStation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short CableOrOHL {
            get {
                return this.CableOrOHLField;
            }
            set {
                if ((this.CableOrOHLField.Equals(value) != true)) {
                    this.CableOrOHLField = value;
                    this.RaisePropertyChanged("CableOrOHL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] CoordinatesLabel1 {
            get {
                return this.CoordinatesLabel1Field;
            }
            set {
                if ((object.ReferenceEquals(this.CoordinatesLabel1Field, value) != true)) {
                    this.CoordinatesLabel1Field = value;
                    this.RaisePropertyChanged("CoordinatesLabel1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] CoordinatesLabel2 {
            get {
                return this.CoordinatesLabel2Field;
            }
            set {
                if ((object.ReferenceEquals(this.CoordinatesLabel2Field, value) != true)) {
                    this.CoordinatesLabel2Field = value;
                    this.RaisePropertyChanged("CoordinatesLabel2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] CoordinatesLabel3 {
            get {
                return this.CoordinatesLabel3Field;
            }
            set {
                if ((object.ReferenceEquals(this.CoordinatesLabel3Field, value) != true)) {
                    this.CoordinatesLabel3Field = value;
                    this.RaisePropertyChanged("CoordinatesLabel3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] CoordinatesLabel4 {
            get {
                return this.CoordinatesLabel4Field;
            }
            set {
                if ((object.ReferenceEquals(this.CoordinatesLabel4Field, value) != true)) {
                    this.CoordinatesLabel4Field = value;
                    this.RaisePropertyChanged("CoordinatesLabel4");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] CoordinatesLink1 {
            get {
                return this.CoordinatesLink1Field;
            }
            set {
                if ((object.ReferenceEquals(this.CoordinatesLink1Field, value) != true)) {
                    this.CoordinatesLink1Field = value;
                    this.RaisePropertyChanged("CoordinatesLink1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] CoordinatesLink2 {
            get {
                return this.CoordinatesLink2Field;
            }
            set {
                if ((object.ReferenceEquals(this.CoordinatesLink2Field, value) != true)) {
                    this.CoordinatesLink2Field = value;
                    this.RaisePropertyChanged("CoordinatesLink2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] CoordinatesLink3 {
            get {
                return this.CoordinatesLink3Field;
            }
            set {
                if ((object.ReferenceEquals(this.CoordinatesLink3Field, value) != true)) {
                    this.CoordinatesLink3Field = value;
                    this.RaisePropertyChanged("CoordinatesLink3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] CoordinatesSymbol {
            get {
                return this.CoordinatesSymbolField;
            }
            set {
                if ((object.ReferenceEquals(this.CoordinatesSymbolField, value) != true)) {
                    this.CoordinatesSymbolField = value;
                    this.RaisePropertyChanged("CoordinatesSymbol");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Diameter {
            get {
                return this.DiameterField;
            }
            set {
                if ((this.DiameterField.Equals(value) != true)) {
                    this.DiameterField = value;
                    this.RaisePropertyChanged("Diameter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ElementInfo {
            get {
                return this.ElementInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.ElementInfoField, value) != true)) {
                    this.ElementInfoField = value;
                    this.RaisePropertyChanged("ElementInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Elevation {
            get {
                return this.ElevationField;
            }
            set {
                if ((this.ElevationField.Equals(value) != true)) {
                    this.ElevationField = value;
                    this.RaisePropertyChanged("Elevation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int InstallationYear {
            get {
                return this.InstallationYearField;
            }
            set {
                if ((this.InstallationYearField.Equals(value) != true)) {
                    this.InstallationYearField = value;
                    this.RaisePropertyChanged("InstallationYear");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsForwardNetwork {
            get {
                return this.IsForwardNetworkField;
            }
            set {
                if ((this.IsForwardNetworkField.Equals(value) != true)) {
                    this.IsForwardNetworkField = value;
                    this.RaisePropertyChanged("IsForwardNetwork");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsInMaintenance {
            get {
                return this.IsInMaintenanceField;
            }
            set {
                if ((this.IsInMaintenanceField.Equals(value) != true)) {
                    this.IsInMaintenanceField = value;
                    this.RaisePropertyChanged("IsInMaintenance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsProjected {
            get {
                return this.IsProjectedField;
            }
            set {
                if ((this.IsProjectedField.Equals(value) != true)) {
                    this.IsProjectedField = value;
                    this.RaisePropertyChanged("IsProjected");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Layout {
            get {
                return this.LayoutField;
            }
            set {
                if ((this.LayoutField.Equals(value) != true)) {
                    this.LayoutField = value;
                    this.RaisePropertyChanged("Layout");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NPWSL.NeplanService.LoadData Load {
            get {
                return this.LoadField;
            }
            set {
                if ((object.ReferenceEquals(this.LoadField, value) != true)) {
                    this.LoadField = value;
                    this.RaisePropertyChanged("Load");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LogicalSwitch {
            get {
                return this.LogicalSwitchField;
            }
            set {
                if ((this.LogicalSwitchField.Equals(value) != true)) {
                    this.LogicalSwitchField = value;
                    this.RaisePropertyChanged("LogicalSwitch");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Material {
            get {
                return this.MaterialField;
            }
            set {
                if ((this.MaterialField.Equals(value) != true)) {
                    this.MaterialField = value;
                    this.RaisePropertyChanged("Material");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeName1 {
            get {
                return this.NodeName1Field;
            }
            set {
                if ((object.ReferenceEquals(this.NodeName1Field, value) != true)) {
                    this.NodeName1Field = value;
                    this.RaisePropertyChanged("NodeName1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeName2 {
            get {
                return this.NodeName2Field;
            }
            set {
                if ((object.ReferenceEquals(this.NodeName2Field, value) != true)) {
                    this.NodeName2Field = value;
                    this.RaisePropertyChanged("NodeName2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeName3 {
            get {
                return this.NodeName3Field;
            }
            set {
                if ((object.ReferenceEquals(this.NodeName3Field, value) != true)) {
                    this.NodeName3Field = value;
                    this.RaisePropertyChanged("NodeName3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeName4 {
            get {
                return this.NodeName4Field;
            }
            set {
                if ((object.ReferenceEquals(this.NodeName4Field, value) != true)) {
                    this.NodeName4Field = value;
                    this.RaisePropertyChanged("NodeName4");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OnGraphicLayer {
            get {
                return this.OnGraphicLayerField;
            }
            set {
                if ((object.ReferenceEquals(this.OnGraphicLayerField, value) != true)) {
                    this.OnGraphicLayerField = value;
                    this.RaisePropertyChanged("OnGraphicLayer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short OnPortNr {
            get {
                return this.OnPortNrField;
            }
            set {
                if ((this.OnPortNrField.Equals(value) != true)) {
                    this.OnPortNrField = value;
                    this.RaisePropertyChanged("OnPortNr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubAreaName {
            get {
                return this.SubAreaNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SubAreaNameField, value) != true)) {
                    this.SubAreaNameField = value;
                    this.RaisePropertyChanged("SubAreaName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Substation {
            get {
                return this.SubstationField;
            }
            set {
                if ((object.ReferenceEquals(this.SubstationField, value) != true)) {
                    this.SubstationField = value;
                    this.RaisePropertyChanged("Substation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SymbolAngle {
            get {
                return this.SymbolAngleField;
            }
            set {
                if ((this.SymbolAngleField.Equals(value) != true)) {
                    this.SymbolAngleField = value;
                    this.RaisePropertyChanged("SymbolAngle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SymbolName {
            get {
                return this.SymbolNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SymbolNameField, value) != true)) {
                    this.SymbolNameField = value;
                    this.RaisePropertyChanged("SymbolName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SymbolSize {
            get {
                return this.SymbolSizeField;
            }
            set {
                if ((this.SymbolSizeField.Equals(value) != true)) {
                    this.SymbolSizeField = value;
                    this.RaisePropertyChanged("SymbolSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NPWSL.NeplanService.TechDataValue[] TechDataValues {
            get {
                return this.TechDataValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.TechDataValuesField, value) != true)) {
                    this.TechDataValuesField = value;
                    this.RaisePropertyChanged("TechDataValues");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NPWSL.NeplanService.WaterLoadData WaterLoadData {
            get {
                return this.WaterLoadDataField;
            }
            set {
                if ((object.ReferenceEquals(this.WaterLoadDataField, value) != true)) {
                    this.WaterLoadDataField = value;
                    this.RaisePropertyChanged("WaterLoadData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ZOrderNum {
            get {
                return this.ZOrderNumField;
            }
            set {
                if ((this.ZOrderNumField.Equals(value) != true)) {
                    this.ZOrderNumField = value;
                    this.RaisePropertyChanged("ZOrderNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ZoneName {
            get {
                return this.ZoneNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ZoneNameField, value) != true)) {
                    this.ZoneNameField = value;
                    this.RaisePropertyChanged("ZoneName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string aliasName1 {
            get {
                return this.aliasName1Field;
            }
            set {
                if ((object.ReferenceEquals(this.aliasName1Field, value) != true)) {
                    this.aliasName1Field = value;
                    this.RaisePropertyChanged("aliasName1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string aliasName2 {
            get {
                return this.aliasName2Field;
            }
            set {
                if ((object.ReferenceEquals(this.aliasName2Field, value) != true)) {
                    this.aliasName2Field = value;
                    this.RaisePropertyChanged("aliasName2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] binaryData {
            get {
                return this.binaryDataField;
            }
            set {
                if ((object.ReferenceEquals(this.binaryDataField, value) != true)) {
                    this.binaryDataField = value;
                    this.RaisePropertyChanged("binaryData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.descriptionField, value) != true)) {
                    this.descriptionField = value;
                    this.RaisePropertyChanged("description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string elementType {
            get {
                return this.elementTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.elementTypeField, value) != true)) {
                    this.elementTypeField = value;
                    this.RaisePropertyChanged("elementType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double length {
            get {
                return this.lengthField;
            }
            set {
                if ((this.lengthField.Equals(value) != true)) {
                    this.lengthField = value;
                    this.RaisePropertyChanged("length");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string libraryName {
            get {
                return this.libraryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.libraryNameField, value) != true)) {
                    this.libraryNameField = value;
                    this.RaisePropertyChanged("libraryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string librarySubname {
            get {
                return this.librarySubnameField;
            }
            set {
                if ((object.ReferenceEquals(this.librarySubnameField, value) != true)) {
                    this.librarySubnameField = value;
                    this.RaisePropertyChanged("librarySubname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string libraryType {
            get {
                return this.libraryTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.libraryTypeField, value) != true)) {
                    this.libraryTypeField = value;
                    this.RaisePropertyChanged("libraryType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string librayType {
            get {
                return this.librayTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.librayTypeField, value) != true)) {
                    this.librayTypeField = value;
                    this.RaisePropertyChanged("librayType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NPWSL.NeplanService.LineSectionData[] listLineSections {
            get {
                return this.listLineSectionsField;
            }
            set {
                if ((object.ReferenceEquals(this.listLineSectionsField, value) != true)) {
                    this.listLineSectionsField = value;
                    this.RaisePropertyChanged("listLineSections");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NPWSL.NeplanService.LoadData[] listSubLoads {
            get {
                return this.listSubLoadsField;
            }
            set {
                if ((object.ReferenceEquals(this.listSubLoadsField, value) != true)) {
                    this.listSubLoadsField = value;
                    this.RaisePropertyChanged("listSubLoads");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short numConnections {
            get {
                return this.numConnectionsField;
            }
            set {
                if ((this.numConnectionsField.Equals(value) != true)) {
                    this.numConnectionsField = value;
                    this.RaisePropertyChanged("numConnections");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short phase {
            get {
                return this.phaseField;
            }
            set {
                if ((this.phaseField.Equals(value) != true)) {
                    this.phaseField = value;
                    this.RaisePropertyChanged("phase");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool remove {
            get {
                return this.removeField;
            }
            set {
                if ((this.removeField.Equals(value) != true)) {
                    this.removeField = value;
                    this.RaisePropertyChanged("remove");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double un {
            get {
                return this.unField;
            }
            set {
                if ((this.unField.Equals(value) != true)) {
                    this.unField = value;
                    this.RaisePropertyChanged("un");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string xmlData {
            get {
                return this.xmlDataField;
            }
            set {
                if ((object.ReferenceEquals(this.xmlDataField, value) != true)) {
                    this.xmlDataField = value;
                    this.RaisePropertyChanged("xmlData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string xmlInvest {
            get {
                return this.xmlInvestField;
            }
            set {
                if ((object.ReferenceEquals(this.xmlInvestField, value) != true)) {
                    this.xmlInvestField = value;
                    this.RaisePropertyChanged("xmlInvest");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string xmlItemList {
            get {
                return this.xmlItemListField;
            }
            set {
                if ((object.ReferenceEquals(this.xmlItemListField, value) != true)) {
                    this.xmlItemListField = value;
                    this.RaisePropertyChanged("xmlItemList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<float> yLocation {
            get {
                return this.yLocationField;
            }
            set {
                if ((this.yLocationField.Equals(value) != true)) {
                    this.yLocationField = value;
                    this.RaisePropertyChanged("yLocation");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WaterLoadData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External")]
    [System.SerializableAttribute()]
    public partial class WaterLoadData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoadTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QDemandField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short QunitField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LoadType {
            get {
                return this.LoadTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.LoadTypeField, value) != true)) {
                    this.LoadTypeField = value;
                    this.RaisePropertyChanged("LoadType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double QDemand {
            get {
                return this.QDemandField;
            }
            set {
                if ((this.QDemandField.Equals(value) != true)) {
                    this.QDemandField = value;
                    this.RaisePropertyChanged("QDemand");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Qunit {
            get {
                return this.QunitField;
            }
            set {
                if ((this.QunitField.Equals(value) != true)) {
                    this.QunitField = value;
                    this.RaisePropertyChanged("Qunit");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TechDataValue", Namespace="")]
    [System.SerializableAttribute()]
    public partial class TechDataValue : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VariableNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VariableName {
            get {
                return this.VariableNameField;
            }
            set {
                if ((object.ReferenceEquals(this.VariableNameField, value) != true)) {
                    this.VariableNameField = value;
                    this.RaisePropertyChanged("VariableName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LineSectionData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External")]
    [System.SerializableAttribute()]
    public partial class LineSectionData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short CableOrOHLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double DiameterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int InstallationYearField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short LayoutField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LengthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LibraryTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short MaterialField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short CableOrOHL {
            get {
                return this.CableOrOHLField;
            }
            set {
                if ((this.CableOrOHLField.Equals(value) != true)) {
                    this.CableOrOHLField = value;
                    this.RaisePropertyChanged("CableOrOHL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Diameter {
            get {
                return this.DiameterField;
            }
            set {
                if ((this.DiameterField.Equals(value) != true)) {
                    this.DiameterField = value;
                    this.RaisePropertyChanged("Diameter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int InstallationYear {
            get {
                return this.InstallationYearField;
            }
            set {
                if ((this.InstallationYearField.Equals(value) != true)) {
                    this.InstallationYearField = value;
                    this.RaisePropertyChanged("InstallationYear");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Layout {
            get {
                return this.LayoutField;
            }
            set {
                if ((this.LayoutField.Equals(value) != true)) {
                    this.LayoutField = value;
                    this.RaisePropertyChanged("Layout");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Length {
            get {
                return this.LengthField;
            }
            set {
                if ((this.LengthField.Equals(value) != true)) {
                    this.LengthField = value;
                    this.RaisePropertyChanged("Length");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LibraryType {
            get {
                return this.LibraryTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.LibraryTypeField, value) != true)) {
                    this.LibraryTypeField = value;
                    this.RaisePropertyChanged("LibraryType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Material {
            get {
                return this.MaterialField;
            }
            set {
                if ((this.MaterialField.Equals(value) != true)) {
                    this.MaterialField = value;
                    this.RaisePropertyChanged("Material");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NeplanService.ElementResult", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.External")]
    [System.SerializableAttribute()]
    public partial class NeplanServiceElementResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ElementIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string XMLdataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short portNrField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ElementID {
            get {
                return this.ElementIDField;
            }
            set {
                if ((this.ElementIDField.Equals(value) != true)) {
                    this.ElementIDField = value;
                    this.RaisePropertyChanged("ElementID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string XMLdata {
            get {
                return this.XMLdataField;
            }
            set {
                if ((object.ReferenceEquals(this.XMLdataField, value) != true)) {
                    this.XMLdataField = value;
                    this.RaisePropertyChanged("XMLdata");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short portNr {
            get {
                return this.portNrField;
            }
            set {
                if ((this.portNrField.Equals(value) != true)) {
                    this.portNrField = value;
                    this.RaisePropertyChanged("portNr");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AnalysisParameterSettings", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External")]
    [System.SerializableAttribute()]
    public partial class AnalysisParameterSettings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> AnschlKnIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CalcOnlyLoadedDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConXMLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DoRecondResizingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> EleIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ExcludeElementsInMaintField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ExcludeElementsInstalledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ExcludeOutOfOperElementsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ExcludeProjectedElementsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExclutionDateForInstalledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExclutionDateForOutOfOperField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IncludeBoundaryElementsInCalculationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ItemTypeNameForRecondResizingFieldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ItemlibNameForRecondResizingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ItemlibSubNameForRecondResizingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LibItemTypeNameForRecondResizingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LibNameForRecondResizingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LibSubNameForRecondResizingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] ListOfRelayIDsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] ListOfSelectedFeederIDsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] ListOfSelectedPartNetwIDsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] ListOfShortCircuitLocationIDsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LogNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MediumTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NCalcField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> RelayIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] SelectedRecondResizElementsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> AnschlKnID {
            get {
                return this.AnschlKnIDField;
            }
            set {
                if ((this.AnschlKnIDField.Equals(value) != true)) {
                    this.AnschlKnIDField = value;
                    this.RaisePropertyChanged("AnschlKnID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CalcOnlyLoadedData {
            get {
                return this.CalcOnlyLoadedDataField;
            }
            set {
                if ((this.CalcOnlyLoadedDataField.Equals(value) != true)) {
                    this.CalcOnlyLoadedDataField = value;
                    this.RaisePropertyChanged("CalcOnlyLoadedData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConXML {
            get {
                return this.ConXMLField;
            }
            set {
                if ((object.ReferenceEquals(this.ConXMLField, value) != true)) {
                    this.ConXMLField = value;
                    this.RaisePropertyChanged("ConXML");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DoRecondResizing {
            get {
                return this.DoRecondResizingField;
            }
            set {
                if ((this.DoRecondResizingField.Equals(value) != true)) {
                    this.DoRecondResizingField = value;
                    this.RaisePropertyChanged("DoRecondResizing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> EleID {
            get {
                return this.EleIDField;
            }
            set {
                if ((this.EleIDField.Equals(value) != true)) {
                    this.EleIDField = value;
                    this.RaisePropertyChanged("EleID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ExcludeElementsInMaint {
            get {
                return this.ExcludeElementsInMaintField;
            }
            set {
                if ((this.ExcludeElementsInMaintField.Equals(value) != true)) {
                    this.ExcludeElementsInMaintField = value;
                    this.RaisePropertyChanged("ExcludeElementsInMaint");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ExcludeElementsInstalled {
            get {
                return this.ExcludeElementsInstalledField;
            }
            set {
                if ((this.ExcludeElementsInstalledField.Equals(value) != true)) {
                    this.ExcludeElementsInstalledField = value;
                    this.RaisePropertyChanged("ExcludeElementsInstalled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ExcludeOutOfOperElements {
            get {
                return this.ExcludeOutOfOperElementsField;
            }
            set {
                if ((this.ExcludeOutOfOperElementsField.Equals(value) != true)) {
                    this.ExcludeOutOfOperElementsField = value;
                    this.RaisePropertyChanged("ExcludeOutOfOperElements");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ExcludeProjectedElements {
            get {
                return this.ExcludeProjectedElementsField;
            }
            set {
                if ((this.ExcludeProjectedElementsField.Equals(value) != true)) {
                    this.ExcludeProjectedElementsField = value;
                    this.RaisePropertyChanged("ExcludeProjectedElements");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExclutionDateForInstalled {
            get {
                return this.ExclutionDateForInstalledField;
            }
            set {
                if ((object.ReferenceEquals(this.ExclutionDateForInstalledField, value) != true)) {
                    this.ExclutionDateForInstalledField = value;
                    this.RaisePropertyChanged("ExclutionDateForInstalled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExclutionDateForOutOfOper {
            get {
                return this.ExclutionDateForOutOfOperField;
            }
            set {
                if ((object.ReferenceEquals(this.ExclutionDateForOutOfOperField, value) != true)) {
                    this.ExclutionDateForOutOfOperField = value;
                    this.RaisePropertyChanged("ExclutionDateForOutOfOper");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IncludeBoundaryElementsInCalculation {
            get {
                return this.IncludeBoundaryElementsInCalculationField;
            }
            set {
                if ((this.IncludeBoundaryElementsInCalculationField.Equals(value) != true)) {
                    this.IncludeBoundaryElementsInCalculationField = value;
                    this.RaisePropertyChanged("IncludeBoundaryElementsInCalculation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ItemTypeNameForRecondResizingField {
            get {
                return this.ItemTypeNameForRecondResizingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemTypeNameForRecondResizingFieldField, value) != true)) {
                    this.ItemTypeNameForRecondResizingFieldField = value;
                    this.RaisePropertyChanged("ItemTypeNameForRecondResizingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ItemlibNameForRecondResizing {
            get {
                return this.ItemlibNameForRecondResizingField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemlibNameForRecondResizingField, value) != true)) {
                    this.ItemlibNameForRecondResizingField = value;
                    this.RaisePropertyChanged("ItemlibNameForRecondResizing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ItemlibSubNameForRecondResizing {
            get {
                return this.ItemlibSubNameForRecondResizingField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemlibSubNameForRecondResizingField, value) != true)) {
                    this.ItemlibSubNameForRecondResizingField = value;
                    this.RaisePropertyChanged("ItemlibSubNameForRecondResizing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LibItemTypeNameForRecondResizing {
            get {
                return this.LibItemTypeNameForRecondResizingField;
            }
            set {
                if ((object.ReferenceEquals(this.LibItemTypeNameForRecondResizingField, value) != true)) {
                    this.LibItemTypeNameForRecondResizingField = value;
                    this.RaisePropertyChanged("LibItemTypeNameForRecondResizing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LibNameForRecondResizing {
            get {
                return this.LibNameForRecondResizingField;
            }
            set {
                if ((object.ReferenceEquals(this.LibNameForRecondResizingField, value) != true)) {
                    this.LibNameForRecondResizingField = value;
                    this.RaisePropertyChanged("LibNameForRecondResizing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LibSubNameForRecondResizing {
            get {
                return this.LibSubNameForRecondResizingField;
            }
            set {
                if ((object.ReferenceEquals(this.LibSubNameForRecondResizingField, value) != true)) {
                    this.LibSubNameForRecondResizingField = value;
                    this.RaisePropertyChanged("LibSubNameForRecondResizing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] ListOfRelayIDs {
            get {
                return this.ListOfRelayIDsField;
            }
            set {
                if ((object.ReferenceEquals(this.ListOfRelayIDsField, value) != true)) {
                    this.ListOfRelayIDsField = value;
                    this.RaisePropertyChanged("ListOfRelayIDs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] ListOfSelectedFeederIDs {
            get {
                return this.ListOfSelectedFeederIDsField;
            }
            set {
                if ((object.ReferenceEquals(this.ListOfSelectedFeederIDsField, value) != true)) {
                    this.ListOfSelectedFeederIDsField = value;
                    this.RaisePropertyChanged("ListOfSelectedFeederIDs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] ListOfSelectedPartNetwIDs {
            get {
                return this.ListOfSelectedPartNetwIDsField;
            }
            set {
                if ((object.ReferenceEquals(this.ListOfSelectedPartNetwIDsField, value) != true)) {
                    this.ListOfSelectedPartNetwIDsField = value;
                    this.RaisePropertyChanged("ListOfSelectedPartNetwIDs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] ListOfShortCircuitLocationIDs {
            get {
                return this.ListOfShortCircuitLocationIDsField;
            }
            set {
                if ((object.ReferenceEquals(this.ListOfShortCircuitLocationIDsField, value) != true)) {
                    this.ListOfShortCircuitLocationIDsField = value;
                    this.RaisePropertyChanged("ListOfShortCircuitLocationIDs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LogName {
            get {
                return this.LogNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LogNameField, value) != true)) {
                    this.LogNameField = value;
                    this.RaisePropertyChanged("LogName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MediumType {
            get {
                return this.MediumTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.MediumTypeField, value) != true)) {
                    this.MediumTypeField = value;
                    this.RaisePropertyChanged("MediumType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NCalc {
            get {
                return this.NCalcField;
            }
            set {
                if ((this.NCalcField.Equals(value) != true)) {
                    this.NCalcField = value;
                    this.RaisePropertyChanged("NCalc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> RelayID {
            get {
                return this.RelayIDField;
            }
            set {
                if ((this.RelayIDField.Equals(value) != true)) {
                    this.RelayIDField = value;
                    this.RaisePropertyChanged("RelayID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] SelectedRecondResizElements {
            get {
                return this.SelectedRecondResizElementsField;
            }
            set {
                if ((object.ReferenceEquals(this.SelectedRecondResizElementsField, value) != true)) {
                    this.SelectedRecondResizElementsField = value;
                    this.RaisePropertyChanged("SelectedRecondResizElements");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AnalysisReturnInfo", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External")]
    [System.SerializableAttribute()]
    public partial class AnalysisReturnInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AdjustedLoadsFileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AnalysisIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AnalysisModuleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AutomaticSettingsResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NPWSL.NeplanService.AnalysisReturnInfo.CableSizingLineData[] CableSizingLineDataResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConXMLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DirectoryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool FaultClearedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasConvergedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoadSummaryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LogFilenameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NetworkReductionXMLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OperationalDataNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] RelayDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResultFile2ButtonNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResultFile2NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResultFilenameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReturnInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RunAnalysisWithoutSavingToDBField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NPWSL.NeplanService.AnalysisReturnInfo.RelayResultData[] SelectivityChartResultsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AdjustedLoadsFileName {
            get {
                return this.AdjustedLoadsFileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AdjustedLoadsFileNameField, value) != true)) {
                    this.AdjustedLoadsFileNameField = value;
                    this.RaisePropertyChanged("AdjustedLoadsFileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AnalysisID {
            get {
                return this.AnalysisIDField;
            }
            set {
                if ((object.ReferenceEquals(this.AnalysisIDField, value) != true)) {
                    this.AnalysisIDField = value;
                    this.RaisePropertyChanged("AnalysisID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AnalysisModule {
            get {
                return this.AnalysisModuleField;
            }
            set {
                if ((object.ReferenceEquals(this.AnalysisModuleField, value) != true)) {
                    this.AnalysisModuleField = value;
                    this.RaisePropertyChanged("AnalysisModule");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AutomaticSettingsResult {
            get {
                return this.AutomaticSettingsResultField;
            }
            set {
                if ((object.ReferenceEquals(this.AutomaticSettingsResultField, value) != true)) {
                    this.AutomaticSettingsResultField = value;
                    this.RaisePropertyChanged("AutomaticSettingsResult");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NPWSL.NeplanService.AnalysisReturnInfo.CableSizingLineData[] CableSizingLineDataResult {
            get {
                return this.CableSizingLineDataResultField;
            }
            set {
                if ((object.ReferenceEquals(this.CableSizingLineDataResultField, value) != true)) {
                    this.CableSizingLineDataResultField = value;
                    this.RaisePropertyChanged("CableSizingLineDataResult");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConXML {
            get {
                return this.ConXMLField;
            }
            set {
                if ((object.ReferenceEquals(this.ConXMLField, value) != true)) {
                    this.ConXMLField = value;
                    this.RaisePropertyChanged("ConXML");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DirectoryName {
            get {
                return this.DirectoryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DirectoryNameField, value) != true)) {
                    this.DirectoryNameField = value;
                    this.RaisePropertyChanged("DirectoryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool FaultCleared {
            get {
                return this.FaultClearedField;
            }
            set {
                if ((this.FaultClearedField.Equals(value) != true)) {
                    this.FaultClearedField = value;
                    this.RaisePropertyChanged("FaultCleared");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasConverged {
            get {
                return this.HasConvergedField;
            }
            set {
                if ((this.HasConvergedField.Equals(value) != true)) {
                    this.HasConvergedField = value;
                    this.RaisePropertyChanged("HasConverged");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LoadSummary {
            get {
                return this.LoadSummaryField;
            }
            set {
                if ((object.ReferenceEquals(this.LoadSummaryField, value) != true)) {
                    this.LoadSummaryField = value;
                    this.RaisePropertyChanged("LoadSummary");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LogFilename {
            get {
                return this.LogFilenameField;
            }
            set {
                if ((object.ReferenceEquals(this.LogFilenameField, value) != true)) {
                    this.LogFilenameField = value;
                    this.RaisePropertyChanged("LogFilename");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NetworkReductionXML {
            get {
                return this.NetworkReductionXMLField;
            }
            set {
                if ((object.ReferenceEquals(this.NetworkReductionXMLField, value) != true)) {
                    this.NetworkReductionXMLField = value;
                    this.RaisePropertyChanged("NetworkReductionXML");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OperationalDataName {
            get {
                return this.OperationalDataNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OperationalDataNameField, value) != true)) {
                    this.OperationalDataNameField = value;
                    this.RaisePropertyChanged("OperationalDataName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] RelayData {
            get {
                return this.RelayDataField;
            }
            set {
                if ((object.ReferenceEquals(this.RelayDataField, value) != true)) {
                    this.RelayDataField = value;
                    this.RaisePropertyChanged("RelayData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResultFile2ButtonName {
            get {
                return this.ResultFile2ButtonNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultFile2ButtonNameField, value) != true)) {
                    this.ResultFile2ButtonNameField = value;
                    this.RaisePropertyChanged("ResultFile2ButtonName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResultFile2Name {
            get {
                return this.ResultFile2NameField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultFile2NameField, value) != true)) {
                    this.ResultFile2NameField = value;
                    this.RaisePropertyChanged("ResultFile2Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResultFilename {
            get {
                return this.ResultFilenameField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultFilenameField, value) != true)) {
                    this.ResultFilenameField = value;
                    this.RaisePropertyChanged("ResultFilename");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReturnInfo {
            get {
                return this.ReturnInfoField;
            }
            set {
                if ((this.ReturnInfoField.Equals(value) != true)) {
                    this.ReturnInfoField = value;
                    this.RaisePropertyChanged("ReturnInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool RunAnalysisWithoutSavingToDB {
            get {
                return this.RunAnalysisWithoutSavingToDBField;
            }
            set {
                if ((this.RunAnalysisWithoutSavingToDBField.Equals(value) != true)) {
                    this.RunAnalysisWithoutSavingToDBField = value;
                    this.RaisePropertyChanged("RunAnalysisWithoutSavingToDB");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NPWSL.NeplanService.AnalysisReturnInfo.RelayResultData[] SelectivityChartResults {
            get {
                return this.SelectivityChartResultsField;
            }
            set {
                if ((object.ReferenceEquals(this.SelectivityChartResultsField, value) != true)) {
                    this.SelectivityChartResultsField = value;
                    this.RaisePropertyChanged("SelectivityChartResults");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="AnalysisReturnInfo.CableSizingLineData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External")]
        [System.SerializableAttribute()]
        public partial class CableSizingLineData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
            
            [System.NonSerializedAttribute()]
            private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private byte[] BinaryDataField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private string LibTypeField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private System.Guid LineIDField;
            
            public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
                get {
                    return this.extensionDataField;
                }
                set {
                    this.extensionDataField = value;
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public byte[] BinaryData {
                get {
                    return this.BinaryDataField;
                }
                set {
                    if ((object.ReferenceEquals(this.BinaryDataField, value) != true)) {
                        this.BinaryDataField = value;
                        this.RaisePropertyChanged("BinaryData");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public string LibType {
                get {
                    return this.LibTypeField;
                }
                set {
                    if ((object.ReferenceEquals(this.LibTypeField, value) != true)) {
                        this.LibTypeField = value;
                        this.RaisePropertyChanged("LibType");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public System.Guid LineID {
                get {
                    return this.LineIDField;
                }
                set {
                    if ((this.LineIDField.Equals(value) != true)) {
                        this.LineIDField = value;
                        this.RaisePropertyChanged("LineID");
                    }
                }
            }
            
            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
            
            protected void RaisePropertyChanged(string propertyName) {
                System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
                if ((propertyChanged != null)) {
                    propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="AnalysisReturnInfo.RelayResultData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External")]
        [System.SerializableAttribute()]
        public partial class RelayResultData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
            
            [System.NonSerializedAttribute()]
            private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private System.Guid ElementIdField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private double FactorField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private System.Guid FaultedNodeIdField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private double IField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private double IangField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private double RField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private System.Guid RelayIdField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private double TripTimeField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private string TypeSCField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private double UField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private double UnField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private double XField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private double ZField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private double ZangField;
            
            public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
                get {
                    return this.extensionDataField;
                }
                set {
                    this.extensionDataField = value;
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public System.Guid ElementId {
                get {
                    return this.ElementIdField;
                }
                set {
                    if ((this.ElementIdField.Equals(value) != true)) {
                        this.ElementIdField = value;
                        this.RaisePropertyChanged("ElementId");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public double Factor {
                get {
                    return this.FactorField;
                }
                set {
                    if ((this.FactorField.Equals(value) != true)) {
                        this.FactorField = value;
                        this.RaisePropertyChanged("Factor");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public System.Guid FaultedNodeId {
                get {
                    return this.FaultedNodeIdField;
                }
                set {
                    if ((this.FaultedNodeIdField.Equals(value) != true)) {
                        this.FaultedNodeIdField = value;
                        this.RaisePropertyChanged("FaultedNodeId");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public double I {
                get {
                    return this.IField;
                }
                set {
                    if ((this.IField.Equals(value) != true)) {
                        this.IField = value;
                        this.RaisePropertyChanged("I");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public double Iang {
                get {
                    return this.IangField;
                }
                set {
                    if ((this.IangField.Equals(value) != true)) {
                        this.IangField = value;
                        this.RaisePropertyChanged("Iang");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public double R {
                get {
                    return this.RField;
                }
                set {
                    if ((this.RField.Equals(value) != true)) {
                        this.RField = value;
                        this.RaisePropertyChanged("R");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public System.Guid RelayId {
                get {
                    return this.RelayIdField;
                }
                set {
                    if ((this.RelayIdField.Equals(value) != true)) {
                        this.RelayIdField = value;
                        this.RaisePropertyChanged("RelayId");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public double TripTime {
                get {
                    return this.TripTimeField;
                }
                set {
                    if ((this.TripTimeField.Equals(value) != true)) {
                        this.TripTimeField = value;
                        this.RaisePropertyChanged("TripTime");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public string TypeSC {
                get {
                    return this.TypeSCField;
                }
                set {
                    if ((object.ReferenceEquals(this.TypeSCField, value) != true)) {
                        this.TypeSCField = value;
                        this.RaisePropertyChanged("TypeSC");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public double U {
                get {
                    return this.UField;
                }
                set {
                    if ((this.UField.Equals(value) != true)) {
                        this.UField = value;
                        this.RaisePropertyChanged("U");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public double Un {
                get {
                    return this.UnField;
                }
                set {
                    if ((this.UnField.Equals(value) != true)) {
                        this.UnField = value;
                        this.RaisePropertyChanged("Un");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public double X {
                get {
                    return this.XField;
                }
                set {
                    if ((this.XField.Equals(value) != true)) {
                        this.XField = value;
                        this.RaisePropertyChanged("X");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public double Z {
                get {
                    return this.ZField;
                }
                set {
                    if ((this.ZField.Equals(value) != true)) {
                        this.ZField = value;
                        this.RaisePropertyChanged("Z");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public double Zang {
                get {
                    return this.ZangField;
                }
                set {
                    if ((this.ZangField.Equals(value) != true)) {
                        this.ZangField = value;
                        this.RaisePropertyChanged("Zang");
                    }
                }
            }
            
            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
            
            protected void RaisePropertyChanged(string propertyName) {
                System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
                if ((propertyChanged != null)) {
                    propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImportFeederItem", Namespace="")]
    [System.SerializableAttribute()]
    public partial class ImportFeederItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PloadFactorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QloadFactorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string atElementNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string atNodeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string colorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PloadFactor {
            get {
                return this.PloadFactorField;
            }
            set {
                if ((this.PloadFactorField.Equals(value) != true)) {
                    this.PloadFactorField = value;
                    this.RaisePropertyChanged("PloadFactor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double QloadFactor {
            get {
                return this.QloadFactorField;
            }
            set {
                if ((this.QloadFactorField.Equals(value) != true)) {
                    this.QloadFactorField = value;
                    this.RaisePropertyChanged("QloadFactor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string atElementName {
            get {
                return this.atElementNameField;
            }
            set {
                if ((object.ReferenceEquals(this.atElementNameField, value) != true)) {
                    this.atElementNameField = value;
                    this.RaisePropertyChanged("atElementName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string atNodeName {
            get {
                return this.atNodeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.atNodeNameField, value) != true)) {
                    this.atNodeNameField = value;
                    this.RaisePropertyChanged("atNodeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string color {
            get {
                return this.colorField;
            }
            set {
                if ((object.ReferenceEquals(this.colorField, value) != true)) {
                    this.colorField = value;
                    this.RaisePropertyChanged("color");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NeplanService.Connection_info", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.External")]
    [System.SerializableAttribute()]
    public partial class NeplanServiceConnection_info : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConnectionStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CoordinateXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CoordinateYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Elem_Connection_IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Elem_IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Elem_NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ElementTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MPRNField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhasesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConnectionStatus {
            get {
                return this.ConnectionStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.ConnectionStatusField, value) != true)) {
                    this.ConnectionStatusField = value;
                    this.RaisePropertyChanged("ConnectionStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CoordinateX {
            get {
                return this.CoordinateXField;
            }
            set {
                if ((object.ReferenceEquals(this.CoordinateXField, value) != true)) {
                    this.CoordinateXField = value;
                    this.RaisePropertyChanged("CoordinateX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CoordinateY {
            get {
                return this.CoordinateYField;
            }
            set {
                if ((object.ReferenceEquals(this.CoordinateYField, value) != true)) {
                    this.CoordinateYField = value;
                    this.RaisePropertyChanged("CoordinateY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Elem_Connection_ID {
            get {
                return this.Elem_Connection_IDField;
            }
            set {
                if ((object.ReferenceEquals(this.Elem_Connection_IDField, value) != true)) {
                    this.Elem_Connection_IDField = value;
                    this.RaisePropertyChanged("Elem_Connection_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Elem_ID {
            get {
                return this.Elem_IDField;
            }
            set {
                if ((object.ReferenceEquals(this.Elem_IDField, value) != true)) {
                    this.Elem_IDField = value;
                    this.RaisePropertyChanged("Elem_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Elem_Name {
            get {
                return this.Elem_NameField;
            }
            set {
                if ((object.ReferenceEquals(this.Elem_NameField, value) != true)) {
                    this.Elem_NameField = value;
                    this.RaisePropertyChanged("Elem_Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ElementType {
            get {
                return this.ElementTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ElementTypeField, value) != true)) {
                    this.ElementTypeField = value;
                    this.RaisePropertyChanged("ElementType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MPRN {
            get {
                return this.MPRNField;
            }
            set {
                if ((object.ReferenceEquals(this.MPRNField, value) != true)) {
                    this.MPRNField = value;
                    this.RaisePropertyChanged("MPRN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phases {
            get {
                return this.PhasesField;
            }
            set {
                if ((object.ReferenceEquals(this.PhasesField, value) != true)) {
                    this.PhasesField = value;
                    this.RaisePropertyChanged("Phases");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NeplanService.LoadGeneration_info", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.External")]
    [System.SerializableAttribute()]
    public partial class NeplanServiceLoadGeneration_info : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short UnitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string elementnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string elementtypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid elemidField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double P {
            get {
                return this.PField;
            }
            set {
                if ((this.PField.Equals(value) != true)) {
                    this.PField = value;
                    this.RaisePropertyChanged("P");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Q {
            get {
                return this.QField;
            }
            set {
                if ((this.QField.Equals(value) != true)) {
                    this.QField = value;
                    this.RaisePropertyChanged("Q");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Unit {
            get {
                return this.UnitField;
            }
            set {
                if ((this.UnitField.Equals(value) != true)) {
                    this.UnitField = value;
                    this.RaisePropertyChanged("Unit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string elementname {
            get {
                return this.elementnameField;
            }
            set {
                if ((object.ReferenceEquals(this.elementnameField, value) != true)) {
                    this.elementnameField = value;
                    this.RaisePropertyChanged("elementname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string elementtype {
            get {
                return this.elementtypeField;
            }
            set {
                if ((object.ReferenceEquals(this.elementtypeField, value) != true)) {
                    this.elementtypeField = value;
                    this.RaisePropertyChanged("elementtype");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid elemid {
            get {
                return this.elemidField;
            }
            set {
                if ((this.elemidField.Equals(value) != true)) {
                    this.elemidField = value;
                    this.RaisePropertyChanged("elemid");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NeplanDomainService.ImportReturnInfo", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services")]
    [System.SerializableAttribute()]
    public partial class NeplanDomainServiceImportReturnInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] LogInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReturnValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string actualCreatedProjectIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string variantIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] LogInfo {
            get {
                return this.LogInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.LogInfoField, value) != true)) {
                    this.LogInfoField = value;
                    this.RaisePropertyChanged("LogInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReturnValue {
            get {
                return this.ReturnValueField;
            }
            set {
                if ((this.ReturnValueField.Equals(value) != true)) {
                    this.ReturnValueField = value;
                    this.RaisePropertyChanged("ReturnValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string actualCreatedProjectID {
            get {
                return this.actualCreatedProjectIDField;
            }
            set {
                if ((object.ReferenceEquals(this.actualCreatedProjectIDField, value) != true)) {
                    this.actualCreatedProjectIDField = value;
                    this.RaisePropertyChanged("actualCreatedProjectID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string variantID {
            get {
                return this.variantIDField;
            }
            set {
                if ((object.ReferenceEquals(this.variantIDField, value) != true)) {
                    this.variantIDField = value;
                    this.RaisePropertyChanged("variantID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.neplan.ch/Web/External", ConfigurationName="NeplanService.NeplanService")]
    public interface NeplanService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/CreateProject", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/CreateProjectResponse")]
        NPWSL.NeplanService.ExternalProject CreateProject(string projectName, string variantName, string diagram, string layerName, string mediumType, int srid, string copySettingsFromProjectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/CreateProject", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/CreateProjectResponse")]
        System.Threading.Tasks.Task<NPWSL.NeplanService.ExternalProject> CreateProjectAsync(string projectName, string variantName, string diagram, string layerName, string mediumType, int srid, string copySettingsFromProjectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetProject", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetProjectResponse")]
        NPWSL.NeplanService.ExternalProject GetProject(string projectName, string variantName, string diagramName, string layerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetProject", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetProjectResponse")]
        System.Threading.Tasks.Task<NPWSL.NeplanService.ExternalProject> GetProjectAsync(string projectName, string variantName, string diagramName, string layerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetLogOnUrlWithProject", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetLogOnUrlWithProjectResponse")]
        string GetLogOnUrlWithProject(NPWSL.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetLogOnUrlWithProject", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetLogOnUrlWithProjectResponse")]
        System.Threading.Tasks.Task<string> GetLogOnUrlWithProjectAsync(NPWSL.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetLogOnUrl", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetLogOnUrlResponse")]
        string GetLogOnUrl();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetLogOnUrl", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetLogOnUrlResponse")]
        System.Threading.Tasks.Task<string> GetLogOnUrlAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetLogOnSessionID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetLogOnSessionIDResponse")]
        string GetLogOnSessionID(NPWSL.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetLogOnSessionID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetLogOnSessionIDResponse")]
        System.Threading.Tasks.Task<string> GetLogOnSessionIDAsync(NPWSL.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertNode", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertNodeResponse")]
        NPWSL.NeplanService.InsertNodeResponse InsertNode(NPWSL.NeplanService.InsertNodeRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertNode", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertNodeResponse")]
        System.Threading.Tasks.Task<NPWSL.NeplanService.InsertNodeResponse> InsertNodeAsync(NPWSL.NeplanService.InsertNodeRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertNodeWithoutGraphic", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertNodeWithoutGraphicResponse")]
        NPWSL.NeplanService.InsertNodeWithoutGraphicResponse InsertNodeWithoutGraphic(NPWSL.NeplanService.InsertNodeWithoutGraphicRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertNodeWithoutGraphic", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertNodeWithoutGraphicResponse")]
        System.Threading.Tasks.Task<NPWSL.NeplanService.InsertNodeWithoutGraphicResponse> InsertNodeWithoutGraphicAsync(NPWSL.NeplanService.InsertNodeWithoutGraphicRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertBusbar", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertBusbarResponse")]
        NPWSL.NeplanService.InsertBusbarResponse InsertBusbar(NPWSL.NeplanService.InsertBusbarRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertBusbar", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertBusbarResponse")]
        System.Threading.Tasks.Task<NPWSL.NeplanService.InsertBusbarResponse> InsertBusbarAsync(NPWSL.NeplanService.InsertBusbarRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertLine", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertLineResponse")]
        string InsertLine(NPWSL.NeplanService.ExternalProject project, string name, string fromNode, string toNode, double length, string libraryType, string xmlData, double[] coordinates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertLine", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertLineResponse")]
        System.Threading.Tasks.Task<string> InsertLineAsync(NPWSL.NeplanService.ExternalProject project, string name, string fromNode, string toNode, double length, string libraryType, string xmlData, double[] coordinates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertLineByNodeID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertLineByNodeIDResponse")]
        string InsertLineByNodeID(NPWSL.NeplanService.ExternalProject project, string name, string fromNodeID, string toNodeID, double length, string libraryType, string xmlData, double[] coordinates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertLineByNodeID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertLineByNodeIDResponse")]
        System.Threading.Tasks.Task<string> InsertLineByNodeIDAsync(NPWSL.NeplanService.ExternalProject project, string name, string fromNodeID, string toNodeID, double length, string libraryType, string xmlData, double[] coordinates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertLineAsym", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertLineAsymResponse")]
        string InsertLineAsym(NPWSL.NeplanService.ExternalProject project, string name, string fromNode, string toNode, double length, short phase, string libraryType, string xmlData, double[] coordinates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertLineAsym", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertLineAsymResponse")]
        System.Threading.Tasks.Task<string> InsertLineAsymAsync(NPWSL.NeplanService.ExternalProject project, string name, string fromNode, string toNode, double length, short phase, string libraryType, string xmlData, double[] coordinates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/Insert2PortElement", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/Insert2PortElementResponse")]
        string Insert2PortElement(NPWSL.NeplanService.ExternalProject project, string name, string fromNode, string toNode, string elementTypeName, string libraryType, string xmlData, int phase, double[] coordinatesLink1, double[] coordinatesLink2, string symbolName, double symbolAngle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/Insert2PortElement", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/Insert2PortElementResponse")]
        System.Threading.Tasks.Task<string> Insert2PortElementAsync(NPWSL.NeplanService.ExternalProject project, string name, string fromNode, string toNode, string elementTypeName, string libraryType, string xmlData, int phase, double[] coordinatesLink1, double[] coordinatesLink2, string symbolName, double symbolAngle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/Insert1PortElement", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/Insert1PortElementResponse")]
        NPWSL.NeplanService.Insert1PortElementResponse Insert1PortElement(NPWSL.NeplanService.Insert1PortElementRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/Insert1PortElement", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/Insert1PortElementResponse")]
        System.Threading.Tasks.Task<NPWSL.NeplanService.Insert1PortElementResponse> Insert1PortElementAsync(NPWSL.NeplanService.Insert1PortElementRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertProtectionElement", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertProtectionElementResponse")]
        string InsertProtectionElement(NPWSL.NeplanService.ExternalProject project, string name, string onElementID, short atPort, string elementTypeName, string libraryType, string xmlData, int phase, string symbolName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertProtectionElement", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertProtectionElementResponse")]
        System.Threading.Tasks.Task<string> InsertProtectionElementAsync(NPWSL.NeplanService.ExternalProject project, string name, string onElementID, short atPort, string elementTypeName, string libraryType, string xmlData, int phase, string symbolName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertFeeder", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertFeederResponse")]
        string InsertFeeder(NPWSL.NeplanService.ExternalProject project, string feederName, string nodeName, string elementName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertFeeder", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertFeederResponse")]
        System.Threading.Tasks.Task<string> InsertFeederAsync(NPWSL.NeplanService.ExternalProject project, string feederName, string nodeName, string elementName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertArea", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertAreaResponse")]
        string InsertArea(NPWSL.NeplanService.ExternalProject project, string areaName, string firstSubArea, string colorStringArea, string colorStringSubArea);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertArea", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertAreaResponse")]
        System.Threading.Tasks.Task<string> InsertAreaAsync(NPWSL.NeplanService.ExternalProject project, string areaName, string firstSubArea, string colorStringArea, string colorStringSubArea);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertZone", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertZoneResponse")]
        string InsertZone(NPWSL.NeplanService.ExternalProject project, string name, string colorString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertZone", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertZoneResponse")]
        System.Threading.Tasks.Task<string> InsertZoneAsync(NPWSL.NeplanService.ExternalProject project, string name, string colorString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertMeasurement", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertMeasurementResponse")]
        string InsertMeasurement(NPWSL.NeplanService.ExternalProject project, string measurementDefinitionName, string elementName, short portNr, System.DateTime dateTime, int inputDataDefinition, double[] measuremens, short nameAliasName1AliasName2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertMeasurement", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertMeasurementResponse")]
        System.Threading.Tasks.Task<string> InsertMeasurementAsync(NPWSL.NeplanService.ExternalProject project, string measurementDefinitionName, string elementName, short portNr, System.DateTime dateTime, int inputDataDefinition, double[] measuremens, short nameAliasName1AliasName2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertMeasurementByElementID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertMeasurementByElementIDRespo" +
            "nse")]
        string InsertMeasurementByElementID(string elementID, string measurementDefinitionName, short portNr, System.DateTime dateTime, int inputDataDefinition, double[] measurements);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertMeasurementByElementID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertMeasurementByElementIDRespo" +
            "nse")]
        System.Threading.Tasks.Task<string> InsertMeasurementByElementIDAsync(string elementID, string measurementDefinitionName, short portNr, System.DateTime dateTime, int inputDataDefinition, double[] measurements);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertDiagram", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertDiagramResponse")]
        string InsertDiagram(NPWSL.NeplanService.ExternalProject project, string diagramName, string firstGraphicLayerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertDiagram", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertDiagramResponse")]
        System.Threading.Tasks.Task<string> InsertDiagramAsync(NPWSL.NeplanService.ExternalProject project, string diagramName, string firstGraphicLayerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertGraphicLayer", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertGraphicLayerResponse")]
        NPWSL.NeplanService.InsertGraphicLayerResponse InsertGraphicLayer(NPWSL.NeplanService.InsertGraphicLayerRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertGraphicLayer", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertGraphicLayerResponse")]
        System.Threading.Tasks.Task<NPWSL.NeplanService.InsertGraphicLayerResponse> InsertGraphicLayerAsync(NPWSL.NeplanService.InsertGraphicLayerRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddSubLoad", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddSubLoadResponse")]
        bool AddSubLoad(NPWSL.NeplanService.ExternalProject project, string loadID, NPWSL.NeplanService.LoadData loadData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddSubLoad", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddSubLoadResponse")]
        System.Threading.Tasks.Task<bool> AddSubLoadAsync(NPWSL.NeplanService.ExternalProject project, string loadID, NPWSL.NeplanService.LoadData loadData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AssignPowerTo1Port", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AssignPowerTo1PortResponse")]
        bool AssignPowerTo1Port(NPWSL.NeplanService.ExternalProject project, string name, string elementTypeName, short powerType, double value1, double value2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AssignPowerTo1Port", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AssignPowerTo1PortResponse")]
        System.Threading.Tasks.Task<bool> AssignPowerTo1PortAsync(NPWSL.NeplanService.ExternalProject project, string name, string elementTypeName, short powerType, double value1, double value2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AssignPowerTo1PortByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AssignPowerTo1PortByIDResponse")]
        bool AssignPowerTo1PortByID(NPWSL.NeplanService.ExternalProject project, string elementID, short powerType, double value1, double value2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AssignPowerTo1PortByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AssignPowerTo1PortByIDResponse")]
        System.Threading.Tasks.Task<bool> AssignPowerTo1PortByIDAsync(NPWSL.NeplanService.ExternalProject project, string elementID, short powerType, double value1, double value2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SwitchElementAtPortByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SwitchElementAtPortByIDResponse")]
        void SwitchElementAtPortByID(string elementID, short portNr, bool isConnected);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SwitchElementAtPortByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SwitchElementAtPortByIDResponse")]
        System.Threading.Tasks.Task SwitchElementAtPortByIDAsync(string elementID, short portNr, bool isConnected);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SwitchElementAtPort", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SwitchElementAtPortResponse")]
        void SwitchElementAtPort(NPWSL.NeplanService.ExternalProject project, string elementName, string elementTypeName, short portNr, bool isConnected);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SwitchElementAtPort", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SwitchElementAtPortResponse")]
        System.Threading.Tasks.Task SwitchElementAtPortAsync(NPWSL.NeplanService.ExternalProject project, string elementName, string elementTypeName, short portNr, bool isConnected);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetElementData", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetElementDataResponse")]
        void SetElementData(NPWSL.NeplanService.ExternalProject project, string elementName, string elementTypeName, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool IsProjected, string zoneGuid, string subAreaGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetElementData", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetElementDataResponse")]
        System.Threading.Tasks.Task SetElementDataAsync(NPWSL.NeplanService.ExternalProject project, string elementName, string elementTypeName, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool IsProjected, string zoneGuid, string subAreaGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetElementDataByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetElementDataByIDResponse")]
        void SetElementDataByID(string elementID, string elementTypeName, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool IsProjected, string zoneGuid, string subAreaGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetElementDataByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetElementDataByIDResponse")]
        System.Threading.Tasks.Task SetElementDataByIDAsync(string elementID, string elementTypeName, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool IsProjected, string zoneGuid, string subAreaGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetElementDataByNameandType", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetElementDataByNameandTypeRespon" +
            "se")]
        NPWSL.NeplanService.GetElementDataByNameandTypeResponse GetElementDataByNameandType(NPWSL.NeplanService.GetElementDataByNameandTypeRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetElementDataByNameandType", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetElementDataByNameandTypeRespon" +
            "se")]
        System.Threading.Tasks.Task<NPWSL.NeplanService.GetElementDataByNameandTypeResponse> GetElementDataByNameandTypeAsync(NPWSL.NeplanService.GetElementDataByNameandTypeRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetElementDataByIDandType", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetElementDataByIDandTypeResponse" +
            "")]
        NPWSL.NeplanService.GetElementDataByIDandTypeResponse GetElementDataByIDandType(NPWSL.NeplanService.GetElementDataByIDandTypeRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetElementDataByIDandType", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetElementDataByIDandTypeResponse" +
            "")]
        System.Threading.Tasks.Task<NPWSL.NeplanService.GetElementDataByIDandTypeResponse> GetElementDataByIDandTypeAsync(NPWSL.NeplanService.GetElementDataByIDandTypeRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetElementAttribute", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetElementAttributeResponse")]
        bool SetElementAttribute(NPWSL.NeplanService.ExternalProject project, string elementName, string elementType, string attributeName, string attributeValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetElementAttribute", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetElementAttributeResponse")]
        System.Threading.Tasks.Task<bool> SetElementAttributeAsync(NPWSL.NeplanService.ExternalProject project, string elementName, string elementType, string attributeName, string attributeValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetElementAttributeByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetElementAttributeByIDResponse")]
        bool SetElementAttributeByID(NPWSL.NeplanService.ExternalProject project, string elementID, string attributeName, string attributeValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetElementAttributeByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetElementAttributeByIDResponse")]
        System.Threading.Tasks.Task<bool> SetElementAttributeByIDAsync(NPWSL.NeplanService.ExternalProject project, string elementID, string attributeName, string attributeValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetElementAttributeByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetElementAttributeByIDResponse")]
        NPWSL.NeplanService.GetElementAttributeByIDResponse GetElementAttributeByID(NPWSL.NeplanService.GetElementAttributeByIDRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetElementAttributeByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetElementAttributeByIDResponse")]
        System.Threading.Tasks.Task<NPWSL.NeplanService.GetElementAttributeByIDResponse> GetElementAttributeByIDAsync(NPWSL.NeplanService.GetElementAttributeByIDRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetElementAttributeByName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetElementAttributeByNameResponse" +
            "")]
        NPWSL.NeplanService.GetElementAttributeByNameResponse GetElementAttributeByName(NPWSL.NeplanService.GetElementAttributeByNameRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetElementAttributeByName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetElementAttributeByNameResponse" +
            "")]
        System.Threading.Tasks.Task<NPWSL.NeplanService.GetElementAttributeByNameResponse> GetElementAttributeByNameAsync(NPWSL.NeplanService.GetElementAttributeByNameRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddReadAllRoleToProject", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddReadAllRoleToProjectResponse")]
        bool AddReadAllRoleToProject(NPWSL.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddReadAllRoleToProject", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddReadAllRoleToProjectResponse")]
        System.Threading.Tasks.Task<bool> AddReadAllRoleToProjectAsync(NPWSL.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddVoltageLevel", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddVoltageLevelResponse")]
        string AddVoltageLevel(NPWSL.NeplanService.ExternalProject project, double un, int colorR, int colorG, int colorB);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddVoltageLevel", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddVoltageLevelResponse")]
        System.Threading.Tasks.Task<string> AddVoltageLevelAsync(NPWSL.NeplanService.ExternalProject project, double un, int colorR, int colorG, int colorB);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetDiagramMinValues", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetDiagramMinValuesResponse")]
        void SetDiagramMinValues(NPWSL.NeplanService.ExternalProject project, double xMin, double yMin, short units, double factorXY, double angle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetDiagramMinValues", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetDiagramMinValuesResponse")]
        System.Threading.Tasks.Task SetDiagramMinValuesAsync(NPWSL.NeplanService.ExternalProject project, double xMin, double yMin, short units, double factorXY, double angle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetLineStyle", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetLineStyleResponse")]
        bool SetLineStyle(NPWSL.NeplanService.ExternalProject project, string lineType, short lineStyle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetLineStyle", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetLineStyleResponse")]
        System.Threading.Tasks.Task<bool> SetLineStyleAsync(NPWSL.NeplanService.ExternalProject project, string lineType, short lineStyle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetDefaultValues", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetDefaultValuesResponse")]
        NPWSL.NeplanService.SetDefaultValuesResponse SetDefaultValues(NPWSL.NeplanService.SetDefaultValuesRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetDefaultValues", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetDefaultValuesResponse")]
        System.Threading.Tasks.Task<NPWSL.NeplanService.SetDefaultValuesResponse> SetDefaultValuesAsync(NPWSL.NeplanService.SetDefaultValuesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetDiagramParameterAttribute", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetDiagramParameterAttributeRespo" +
            "nse")]
        bool SetDiagramParameterAttribute(NPWSL.NeplanService.ExternalProject project, string parameterType, string attributeName, string attributeValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetDiagramParameterAttribute", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetDiagramParameterAttributeRespo" +
            "nse")]
        System.Threading.Tasks.Task<bool> SetDiagramParameterAttributeAsync(NPWSL.NeplanService.ExternalProject project, string parameterType, string attributeName, string attributeValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetCalcParameterAttribute", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetCalcParameterAttributeResponse" +
            "")]
        bool SetCalcParameterAttribute(NPWSL.NeplanService.ExternalProject project, string parameterType, string attributeName, string attributeValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetCalcParameterAttribute", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetCalcParameterAttributeResponse" +
            "")]
        System.Threading.Tasks.Task<bool> SetCalcParameterAttributeAsync(NPWSL.NeplanService.ExternalProject project, string parameterType, string attributeName, string attributeValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetGraphicLayerWorldCoordinates", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetGraphicLayerWorldCoordinatesRe" +
            "sponse")]
        bool SetGraphicLayerWorldCoordinates(NPWSL.NeplanService.ExternalProject project, bool isDirectionUpY, double factor, double angle, double offsetZeroPoint);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetGraphicLayerWorldCoordinates", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetGraphicLayerWorldCoordinatesRe" +
            "sponse")]
        System.Threading.Tasks.Task<bool> SetGraphicLayerWorldCoordinatesAsync(NPWSL.NeplanService.ExternalProject project, bool isDirectionUpY, double factor, double angle, double offsetZeroPoint);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddNodesFromList", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddNodesFromListResponse")]
        NPWSL.NeplanService.AddNodesFromListResponse AddNodesFromList(NPWSL.NeplanService.AddNodesFromListRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddNodesFromList", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddNodesFromListResponse")]
        System.Threading.Tasks.Task<NPWSL.NeplanService.AddNodesFromListResponse> AddNodesFromListAsync(NPWSL.NeplanService.AddNodesFromListRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddElementsFromList", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddElementsFromListResponse")]
        NPWSL.NeplanService.AddElementsFromListResponse AddElementsFromList(NPWSL.NeplanService.AddElementsFromListRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddElementsFromList", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddElementsFromListResponse")]
        System.Threading.Tasks.Task<NPWSL.NeplanService.AddElementsFromListResponse> AddElementsFromListAsync(NPWSL.NeplanService.AddElementsFromListRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddSubLoadsFromList", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddSubLoadsFromListResponse")]
        NPWSL.NeplanService.AddSubLoadsFromListResponse AddSubLoadsFromList(NPWSL.NeplanService.AddSubLoadsFromListRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddSubLoadsFromList", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddSubLoadsFromListResponse")]
        System.Threading.Tasks.Task<NPWSL.NeplanService.AddSubLoadsFromListResponse> AddSubLoadsFromListAsync(NPWSL.NeplanService.AddSubLoadsFromListRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetDateTimeLastSave", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetDateTimeLastSaveResponse")]
        void SetDateTimeLastSave(NPWSL.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetDateTimeLastSave", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetDateTimeLastSaveResponse")]
        System.Threading.Tasks.Task SetDateTimeLastSaveAsync(NPWSL.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetResultSummary", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetResultSummaryResponse")]
        string GetResultSummary(NPWSL.NeplanService.ExternalProject project, string analysisType, System.DateTime simulationDateTime, int networkTypeGroup, string networkTypeGroupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetResultSummary", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetResultSummaryResponse")]
        System.Threading.Tasks.Task<string> GetResultSummaryAsync(NPWSL.NeplanService.ExternalProject project, string analysisType, System.DateTime simulationDateTime, int networkTypeGroup, string networkTypeGroupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetListResultSummary", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetListResultSummaryResponse")]
        string[] GetListResultSummary(NPWSL.NeplanService.ExternalProject project, string analysisType, System.DateTime simulationDateTime, int networkTypeGroup, string networkTypeGroupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetListResultSummary", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetListResultSummaryResponse")]
        System.Threading.Tasks.Task<string[]> GetListResultSummaryAsync(NPWSL.NeplanService.ExternalProject project, string analysisType, System.DateTime simulationDateTime, int networkTypeGroup, string networkTypeGroupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAllElementResults", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAllElementResultsResponse")]
        NPWSL.NeplanService.NeplanServiceElementResult[] GetAllElementResults(NPWSL.NeplanService.ExternalProject project, string analysisType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAllElementResults", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAllElementResultsResponse")]
        System.Threading.Tasks.Task<NPWSL.NeplanService.NeplanServiceElementResult[]> GetAllElementResultsAsync(NPWSL.NeplanService.ExternalProject project, string analysisType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetCalculationSettings", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetCalculationSettingsResponse")]
        string GetCalculationSettings(NPWSL.NeplanService.ExternalProject project, string analysisType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetCalculationSettings", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetCalculationSettingsResponse")]
        System.Threading.Tasks.Task<string> GetCalculationSettingsAsync(NPWSL.NeplanService.ExternalProject project, string analysisType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetResultElementByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetResultElementByIDResponse")]
        string GetResultElementByID(NPWSL.NeplanService.ExternalProject project, string elementID, int portNr, string analysisType, System.DateTime simulationDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetResultElementByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetResultElementByIDResponse")]
        System.Threading.Tasks.Task<string> GetResultElementByIDAsync(NPWSL.NeplanService.ExternalProject project, string elementID, int portNr, string analysisType, System.DateTime simulationDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetResultsElementsByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetResultsElementsByIDResponse")]
        NPWSL.NeplanService.NeplanServiceElementResult[] GetResultsElementsByID(NPWSL.NeplanService.ExternalProject project, string[] elementID, int portNr, string analysisType, System.DateTime simulationDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetResultsElementsByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetResultsElementsByIDResponse")]
        System.Threading.Tasks.Task<NPWSL.NeplanService.NeplanServiceElementResult[]> GetResultsElementsByIDAsync(NPWSL.NeplanService.ExternalProject project, string[] elementID, int portNr, string analysisType, System.DateTime simulationDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetResultElementByName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetResultElementByNameResponse")]
        string GetResultElementByName(NPWSL.NeplanService.ExternalProject project, string elementName, string elementTypeName, int portNr, string analysisType, System.DateTime simulationDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetResultElementByName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetResultElementByNameResponse")]
        System.Threading.Tasks.Task<string> GetResultElementByNameAsync(NPWSL.NeplanService.ExternalProject project, string elementName, string elementTypeName, int portNr, string analysisType, System.DateTime simulationDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AnalyseVariantWithAnalysisSetting" +
            "s", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AnalyseVariantWithAnalysisSetting" +
            "sResponse")]
        NPWSL.NeplanService.AnalysisReturnInfo AnalyseVariantWithAnalysisSettings(NPWSL.NeplanService.ExternalProject project, string analysisRefenceID, string analysisModule, string calcNameID, string analysisMethode, string conditions, string analysisLoadOptionXML, NPWSL.NeplanService.AnalysisParameterSettings settings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AnalyseVariantWithAnalysisSetting" +
            "s", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AnalyseVariantWithAnalysisSetting" +
            "sResponse")]
        System.Threading.Tasks.Task<NPWSL.NeplanService.AnalysisReturnInfo> AnalyseVariantWithAnalysisSettingsAsync(NPWSL.NeplanService.ExternalProject project, string analysisRefenceID, string analysisModule, string calcNameID, string analysisMethode, string conditions, string analysisLoadOptionXML, NPWSL.NeplanService.AnalysisParameterSettings settings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AnalyseVariant", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AnalyseVariantResponse")]
        NPWSL.NeplanService.AnalysisReturnInfo AnalyseVariant(NPWSL.NeplanService.ExternalProject project, string analysisRefenceID, string analysisModule, string calcNameID, string analysisMethode, string conditions, string analysisLoadOptionXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AnalyseVariant", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AnalyseVariantResponse")]
        System.Threading.Tasks.Task<NPWSL.NeplanService.AnalysisReturnInfo> AnalyseVariantAsync(NPWSL.NeplanService.ExternalProject project, string analysisRefenceID, string analysisModule, string calcNameID, string analysisMethode, string conditions, string analysisLoadOptionXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/IsAnalysisDone", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/IsAnalysisDoneResponse")]
        bool IsAnalysisDone(string analysisRefenceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/IsAnalysisDone", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/IsAnalysisDoneResponse")]
        System.Threading.Tasks.Task<bool> IsAnalysisDoneAsync(string analysisRefenceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AnalyseWithListFileWithoutSaving", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AnalyseWithListFileWithoutSavingR" +
            "esponse")]
        NPWSL.NeplanService.AnalysisReturnInfo AnalyseWithListFileWithoutSaving(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AnalyseWithListFileWithoutSaving", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AnalyseWithListFileWithoutSavingR" +
            "esponse")]
        System.Threading.Tasks.Task<NPWSL.NeplanService.AnalysisReturnInfo> AnalyseWithListFileWithoutSavingAsync(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AnalyseWithProjectFileWithoutSavi" +
            "ng", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AnalyseWithProjectFileWithoutSavi" +
            "ngResponse")]
        NPWSL.NeplanService.AnalysisReturnInfo AnalyseWithProjectFileWithoutSaving(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AnalyseWithProjectFileWithoutSavi" +
            "ng", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AnalyseWithProjectFileWithoutSavi" +
            "ngResponse")]
        System.Threading.Tasks.Task<NPWSL.NeplanService.AnalysisReturnInfo> AnalyseWithProjectFileWithoutSavingAsync(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AnalyseWithCDEFileWithoutSaving", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AnalyseWithCDEFileWithoutSavingRe" +
            "sponse")]
        NPWSL.NeplanService.AnalysisReturnInfo AnalyseWithCDEFileWithoutSaving(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AnalyseWithCDEFileWithoutSaving", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AnalyseWithCDEFileWithoutSavingRe" +
            "sponse")]
        System.Threading.Tasks.Task<NPWSL.NeplanService.AnalysisReturnInfo> AnalyseWithCDEFileWithoutSavingAsync(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DoAnalysisFromFiles", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DoAnalysisFromFilesResponse")]
        NPWSL.NeplanService.AnalysisReturnInfo DoAnalysisFromFiles(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DoAnalysisFromFiles", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DoAnalysisFromFilesResponse")]
        System.Threading.Tasks.Task<NPWSL.NeplanService.AnalysisReturnInfo> DoAnalysisFromFilesAsync(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/EnergyCalculationFromFiles", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/EnergyCalculationFromFilesRespons" +
            "e")]
        NPWSL.NeplanService.AnalysisReturnInfo EnergyCalculationFromFiles(string uploadName, string fromTime, string toTime, int timeIncrement, string copySettingsFromProjectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/EnergyCalculationFromFiles", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/EnergyCalculationFromFilesRespons" +
            "e")]
        System.Threading.Tasks.Task<NPWSL.NeplanService.AnalysisReturnInfo> EnergyCalculationFromFilesAsync(string uploadName, string fromTime, string toTime, int timeIncrement, string copySettingsFromProjectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/LoadAllocationFromDB", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/LoadAllocationFromDBResponse")]
        NPWSL.NeplanService.AnalysisReturnInfo LoadAllocationFromDB(string projectName, string measurementDefinitionName, string fromTime, string toTime, int timeIncrement, NPWSL.NeplanService.AnalysisParameterSettings settings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/LoadAllocationFromDB", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/LoadAllocationFromDBResponse")]
        System.Threading.Tasks.Task<NPWSL.NeplanService.AnalysisReturnInfo> LoadAllocationFromDBAsync(string projectName, string measurementDefinitionName, string fromTime, string toTime, int timeIncrement, NPWSL.NeplanService.AnalysisParameterSettings settings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/LoadAllocationFromMeasurmentFileA" +
            "ndProjectName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/LoadAllocationFromMeasurmentFileA" +
            "ndProjectNameResponse")]
        NPWSL.NeplanService.AnalysisReturnInfo LoadAllocationFromMeasurmentFileAndProjectName(string uploadedMeasurementFileName, string projectName, string fromTime, string toTime, int timeIncrement, NPWSL.NeplanService.AnalysisParameterSettings settings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/LoadAllocationFromMeasurmentFileA" +
            "ndProjectName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/LoadAllocationFromMeasurmentFileA" +
            "ndProjectNameResponse")]
        System.Threading.Tasks.Task<NPWSL.NeplanService.AnalysisReturnInfo> LoadAllocationFromMeasurmentFileAndProjectNameAsync(string uploadedMeasurementFileName, string projectName, string fromTime, string toTime, int timeIncrement, NPWSL.NeplanService.AnalysisParameterSettings settings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/LoadAllocationFromMeasurmentFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/LoadAllocationFromMeasurmentFileR" +
            "esponse")]
        NPWSL.NeplanService.AnalysisReturnInfo LoadAllocationFromMeasurmentFile(NPWSL.NeplanService.ExternalProject project, string uploadedMeasurementFileName, string fromTime, string toTime, int timeIncrement, NPWSL.NeplanService.AnalysisParameterSettings settings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/LoadAllocationFromMeasurmentFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/LoadAllocationFromMeasurmentFileR" +
            "esponse")]
        System.Threading.Tasks.Task<NPWSL.NeplanService.AnalysisReturnInfo> LoadAllocationFromMeasurmentFileAsync(NPWSL.NeplanService.ExternalProject project, string uploadedMeasurementFileName, string fromTime, string toTime, int timeIncrement, NPWSL.NeplanService.AnalysisParameterSettings settings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromListFileAndDoLoadAlloca" +
            "tion", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromListFileAndDoLoadAlloca" +
            "tionResponse")]
        NPWSL.NeplanService.ImportFromListFileAndDoLoadAllocationResponse ImportFromListFileAndDoLoadAllocation(NPWSL.NeplanService.ImportFromListFileAndDoLoadAllocationRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromListFileAndDoLoadAlloca" +
            "tion", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromListFileAndDoLoadAlloca" +
            "tionResponse")]
        System.Threading.Tasks.Task<NPWSL.NeplanService.ImportFromListFileAndDoLoadAllocationResponse> ImportFromListFileAndDoLoadAllocationAsync(NPWSL.NeplanService.ImportFromListFileAndDoLoadAllocationRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteAnaylsisLogFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteAnaylsisLogFileResponse")]
        bool DeleteAnaylsisLogFile(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteAnaylsisLogFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteAnaylsisLogFileResponse")]
        System.Threading.Tasks.Task<bool> DeleteAnaylsisLogFileAsync(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteAnalysisResultFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteAnalysisResultFileResponse")]
        bool DeleteAnalysisResultFile(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteAnalysisResultFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteAnalysisResultFileResponse")]
        System.Threading.Tasks.Task<bool> DeleteAnalysisResultFileAsync(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteProject", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteProjectResponse")]
        bool DeleteProject(NPWSL.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteProject", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteProjectResponse")]
        System.Threading.Tasks.Task<bool> DeleteProjectAsync(NPWSL.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/MarkedProjectAsDeleted", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/MarkedProjectAsDeletedResponse")]
        bool MarkedProjectAsDeleted(NPWSL.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/MarkedProjectAsDeleted", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/MarkedProjectAsDeletedResponse")]
        System.Threading.Tasks.Task<bool> MarkedProjectAsDeletedAsync(NPWSL.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromFileResponse")]
        int ImportFromFile(string uploadName, string projectName, bool withGraphic, string copySettingsFromProjectName, bool merge, bool mergeOnNewDiagram);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromFileResponse")]
        System.Threading.Tasks.Task<int> ImportFromFileAsync(string uploadName, string projectName, bool withGraphic, string copySettingsFromProjectName, bool merge, bool mergeOnNewDiagram);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddFeederFromList", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddFeederFromListResponse")]
        bool AddFeederFromList(NPWSL.NeplanService.ExternalProject project, NPWSL.NeplanService.ImportFeederItem[] feederList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddFeederFromList", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddFeederFromListResponse")]
        System.Threading.Tasks.Task<bool> AddFeederFromListAsync(NPWSL.NeplanService.ExternalProject project, NPWSL.NeplanService.ImportFeederItem[] feederList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromList", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromListResponse")]
        NPWSL.NeplanService.ExternalProject ImportFromList(NPWSL.NeplanService.ImportElementItem[] listElements, string projectName, string copySettingsFromProjectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromList", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromListResponse")]
        System.Threading.Tasks.Task<NPWSL.NeplanService.ExternalProject> ImportFromListAsync(NPWSL.NeplanService.ImportElementItem[] listElements, string projectName, string copySettingsFromProjectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromListFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromListFileResponse")]
        NPWSL.NeplanService.ExternalProject ImportFromListFile(string uploadName, string projectName, string copySettingsFromProjectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromListFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromListFileResponse")]
        System.Threading.Tasks.Task<NPWSL.NeplanService.ExternalProject> ImportFromListFileAsync(string uploadName, string projectName, string copySettingsFromProjectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/MergeProjectFromListFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/MergeProjectFromListFileResponse")]
        NPWSL.NeplanService.ExternalProject MergeProjectFromListFile(string uploadName, string projectToMerge, bool mergeOnNewDiagram);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/MergeProjectFromListFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/MergeProjectFromListFileResponse")]
        System.Threading.Tasks.Task<NPWSL.NeplanService.ExternalProject> MergeProjectFromListFileAsync(string uploadName, string projectToMerge, bool mergeOnNewDiagram);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromCDE", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromCDEResponse")]
        NPWSL.NeplanService.ExternalProject ImportFromCDE(string path1, string path2, string path3, string copySettingsFromProjectName, bool withGraphic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromCDE", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromCDEResponse")]
        System.Threading.Tasks.Task<NPWSL.NeplanService.ExternalProject> ImportFromCDEAsync(string path1, string path2, string path3, string copySettingsFromProjectName, bool withGraphic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromCDEFiles", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromCDEFilesResponse")]
        NPWSL.NeplanService.ExternalProject ImportFromCDEFiles(string cdeFilename, string ndbFilename, string xmlFilename, string copySettingsFromProjectName, bool withGraphic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromCDEFiles", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromCDEFilesResponse")]
        System.Threading.Tasks.Task<NPWSL.NeplanService.ExternalProject> ImportFromCDEFilesAsync(string cdeFilename, string ndbFilename, string xmlFilename, string copySettingsFromProjectName, bool withGraphic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromCDEZipFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromCDEZipFileResponse")]
        NPWSL.NeplanService.ExternalProject ImportFromCDEZipFile(string zipFile, string copySettingsFromProjectName, bool withGraphic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromCDEZipFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromCDEZipFileResponse")]
        System.Threading.Tasks.Task<NPWSL.NeplanService.ExternalProject> ImportFromCDEZipFileAsync(string zipFile, string copySettingsFromProjectName, bool withGraphic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromPSSEFiles", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromPSSEFilesResponse")]
        NPWSL.NeplanService.ExternalProject ImportFromPSSEFiles(string rawFilename, string seqFilename, string dyrFilename, string drwFilename, int psseVersion, bool ukr, bool withStations, bool withBreakers, int charNumStations, int nameRule, int lineQuant, string copySettingsFromProjectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromPSSEFiles", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromPSSEFilesResponse")]
        System.Threading.Tasks.Task<NPWSL.NeplanService.ExternalProject> ImportFromPSSEFilesAsync(string rawFilename, string seqFilename, string dyrFilename, string drwFilename, int psseVersion, bool ukr, bool withStations, bool withBreakers, int charNumStations, int nameRule, int lineQuant, string copySettingsFromProjectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromPSSEZipFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromPSSEZipFileResponse")]
        NPWSL.NeplanService.ExternalProject ImportFromPSSEZipFile(string zipFile, int psseVersion, bool ukr, bool withStations, bool withBreakers, int charNumStations, int nameRule, int lineQuant, string copySettingsFromProjectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromPSSEZipFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromPSSEZipFileResponse")]
        System.Threading.Tasks.Task<NPWSL.NeplanService.ExternalProject> ImportFromPSSEZipFileAsync(string zipFile, int psseVersion, bool ukr, bool withStations, bool withBreakers, int charNumStations, int nameRule, int lineQuant, string copySettingsFromProjectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromShapeFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromShapeFileResponse")]
        int ImportFromShapeFile(string path, string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromShapeFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromShapeFileResponse")]
        System.Threading.Tasks.Task<int> ImportFromShapeFileAsync(string path, string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromNDB", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromNDBResponse")]
        bool ImportFromNDB(NPWSL.NeplanService.ExternalProject project, string uploadName, string origFileName, string mediumType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromNDB", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromNDBResponse")]
        System.Threading.Tasks.Task<bool> ImportFromNDBAsync(NPWSL.NeplanService.ExternalProject project, string uploadName, string origFileName, string mediumType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportMeasuredDataFromXMlFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportMeasuredDataFromXMlFileResp" +
            "onse")]
        bool ImportMeasuredDataFromXMlFile(NPWSL.NeplanService.ExternalProject project, string uploadName, string definitionName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportMeasuredDataFromXMlFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportMeasuredDataFromXMlFileResp" +
            "onse")]
        System.Threading.Tasks.Task<bool> ImportMeasuredDataFromXMlFileAsync(NPWSL.NeplanService.ExternalProject project, string uploadName, string definitionName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ExportProjectToNEP360", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ExportProjectToNEP360Response")]
        System.IO.Stream ExportProjectToNEP360(string projectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ExportProjectToNEP360", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ExportProjectToNEP360Response")]
        System.Threading.Tasks.Task<System.IO.Stream> ExportProjectToNEP360Async(string projectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/WriteMessageToLogFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/WriteMessageToLogFileResponse")]
        void WriteMessageToLogFile(NPWSL.NeplanService.ExternalProject project, string text, string logLvl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/WriteMessageToLogFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/WriteMessageToLogFileResponse")]
        System.Threading.Tasks.Task WriteMessageToLogFileAsync(NPWSL.NeplanService.ExternalProject project, string text, string logLvl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteUserLogFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteUserLogFileResponse")]
        bool DeleteUserLogFile();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteUserLogFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteUserLogFileResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserLogFileAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetLogFileAsString", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetLogFileAsStringResponse")]
        string GetLogFileAsString();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetLogFileAsString", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetLogFileAsStringResponse")]
        System.Threading.Tasks.Task<string> GetLogFileAsStringAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetLogFileAsList", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetLogFileAsListResponse")]
        string[] GetLogFileAsList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetLogFileAsList", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetLogFileAsListResponse")]
        System.Threading.Tasks.Task<string[]> GetLogFileAsListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/XMLUpload", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/XMLUploadResponse")]
        string XMLUpload(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/XMLUpload", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/XMLUploadResponse")]
        System.Threading.Tasks.Task<string> XMLUploadAsync(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/CDEUpload", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/CDEUploadResponse")]
        string CDEUpload(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/CDEUpload", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/CDEUploadResponse")]
        System.Threading.Tasks.Task<string> CDEUploadAsync(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/NDBUpload", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/NDBUploadResponse")]
        string NDBUpload(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/NDBUpload", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/NDBUploadResponse")]
        System.Threading.Tasks.Task<string> NDBUploadAsync(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/Nep360Upload", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/Nep360UploadResponse")]
        string Nep360Upload(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/Nep360Upload", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/Nep360UploadResponse")]
        System.Threading.Tasks.Task<string> Nep360UploadAsync(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ZipUpload", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ZipUploadResponse")]
        string ZipUpload(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ZipUpload", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ZipUploadResponse")]
        System.Threading.Tasks.Task<string> ZipUploadAsync(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/NepMeasUpload", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/NepMeasUploadResponse")]
        string NepMeasUpload(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/NepMeasUpload", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/NepMeasUploadResponse")]
        System.Threading.Tasks.Task<string> NepMeasUploadAsync(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetUserLogFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetUserLogFileResponse")]
        System.IO.Stream GetUserLogFile();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetUserLogFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetUserLogFileResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetUserLogFileAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAnaylsisLogFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAnaylsisLogFileResponse")]
        System.IO.Stream GetAnaylsisLogFile(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAnaylsisLogFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAnaylsisLogFileResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetAnaylsisLogFileAsync(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAnalysisResultFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAnalysisResultFileResponse")]
        System.IO.Stream GetAnalysisResultFile(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAnalysisResultFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAnalysisResultFileResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetAnalysisResultFileAsync(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/createDailyBackup", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/createDailyBackupResponse")]
        string createDailyBackup(bool isAzure, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/createDailyBackup", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/createDailyBackupResponse")]
        System.Threading.Tasks.Task<string> createDailyBackupAsync(bool isAzure, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/removeAllExpiredProjects", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/removeAllExpiredProjectsResponse")]
        string removeAllExpiredProjects(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/removeAllExpiredProjects", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/removeAllExpiredProjectsResponse")]
        System.Threading.Tasks.Task<string> removeAllExpiredProjectsAsync(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetNamesOfElementsByType", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetNamesOfElementsByTypeResponse")]
        System.Collections.Generic.KeyValuePair<string, string>[] GetNamesOfElementsByType(string projectName, string elementType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetNamesOfElementsByType", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetNamesOfElementsByTypeResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.KeyValuePair<string, string>[]> GetNamesOfElementsByTypeAsync(string projectName, string elementType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/FindSwitchStatusOfElements", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/FindSwitchStatusOfElementsRespons" +
            "e")]
        System.Collections.Generic.KeyValuePair<string, NPWSL.NeplanService.NeplanServiceConnection_info>[] FindSwitchStatusOfElements(string projectName, string[] GenLoadNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/FindSwitchStatusOfElements", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/FindSwitchStatusOfElementsRespons" +
            "e")]
        System.Threading.Tasks.Task<System.Collections.Generic.KeyValuePair<string, NPWSL.NeplanService.NeplanServiceConnection_info>[]> FindSwitchStatusOfElementsAsync(string projectName, string[] GenLoadNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/Find_Voltage_Level_of_One_Port_El" +
            "ement", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/Find_Voltage_Level_of_One_Port_El" +
            "ementResponse")]
        NPWSL.NeplanService.Find_Voltage_Level_of_One_Port_ElementResponse Find_Voltage_Level_of_One_Port_Element(NPWSL.NeplanService.Find_Voltage_Level_of_One_Port_ElementRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/Find_Voltage_Level_of_One_Port_El" +
            "ement", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/Find_Voltage_Level_of_One_Port_El" +
            "ementResponse")]
        System.Threading.Tasks.Task<NPWSL.NeplanService.Find_Voltage_Level_of_One_Port_ElementResponse> Find_Voltage_Level_of_One_Port_ElementAsync(NPWSL.NeplanService.Find_Voltage_Level_of_One_Port_ElementRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ChangeSwitchStatusOfElements", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ChangeSwitchStatusOfElementsRespo" +
            "nse")]
        bool ChangeSwitchStatusOfElements(string projectName, string GenLoadName, bool connectionstatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ChangeSwitchStatusOfElements", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ChangeSwitchStatusOfElementsRespo" +
            "nse")]
        System.Threading.Tasks.Task<bool> ChangeSwitchStatusOfElementsAsync(string projectName, string GenLoadName, bool connectionstatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetPQValuesLdSmAsm", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetPQValuesLdSmAsmResponse")]
        NPWSL.NeplanService.NeplanServiceLoadGeneration_info[] GetPQValuesLdSmAsm(string projectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetPQValuesLdSmAsm", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetPQValuesLdSmAsmResponse")]
        System.Threading.Tasks.Task<NPWSL.NeplanService.NeplanServiceLoadGeneration_info[]> GetPQValuesLdSmAsmAsync(string projectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetPowerofLoadsGenerators", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetPowerofLoadsGeneratorsResponse" +
            "")]
        bool SetPowerofLoadsGenerators(string projectname, NPWSL.NeplanService.NeplanServiceLoadGeneration_info[] loadgens);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetPowerofLoadsGenerators", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetPowerofLoadsGeneratorsResponse" +
            "")]
        System.Threading.Tasks.Task<bool> SetPowerofLoadsGeneratorsAsync(string projectname, NPWSL.NeplanService.NeplanServiceLoadGeneration_info[] loadgens);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ChangeSwitchStatusOfElementList", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ChangeSwitchStatusOfElementListRe" +
            "sponse")]
        bool ChangeSwitchStatusOfElementList(string projectName, System.Guid[] elemids, bool connectionstatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ChangeSwitchStatusOfElementList", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ChangeSwitchStatusOfElementListRe" +
            "sponse")]
        System.Threading.Tasks.Task<bool> ChangeSwitchStatusOfElementListAsync(string projectName, System.Guid[] elemids, bool connectionstatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportIEC_62325_451_2FilesAndDoCI" +
            "MExport", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportIEC_62325_451_2FilesAndDoCI" +
            "MExportResponse")]
        NPWSL.NeplanService.NeplanDomainServiceImportReturnInfo ImportIEC_62325_451_2FilesAndDoCIMExport(string folderpath, System.Guid variantID, string username, bool onlyOneEQ, string mAS);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportIEC_62325_451_2FilesAndDoCI" +
            "MExport", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportIEC_62325_451_2FilesAndDoCI" +
            "MExportResponse")]
        System.Threading.Tasks.Task<NPWSL.NeplanService.NeplanDomainServiceImportReturnInfo> ImportIEC_62325_451_2FilesAndDoCIMExportAsync(string folderpath, System.Guid variantID, string username, bool onlyOneEQ, string mAS);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetFeederIDByName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetFeederIDByNameResponse")]
        System.Guid[] GetFeederIDByName(string ProjectName, string VariantName, string[] FeederNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetFeederIDByName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetFeederIDByNameResponse")]
        System.Threading.Tasks.Task<System.Guid[]> GetFeederIDByNameAsync(string ProjectName, string VariantName, string[] FeederNames);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertNode", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class InsertNodeRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public NPWSL.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string name;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public double un;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=3)]
        public double fn;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=4)]
        public string libraryType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=5)]
        public string xmlData;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=6)]
        public double x;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=7)]
        public double y;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=8)]
        public string symbolName;
        
        public InsertNodeRequest() {
        }
        
        public InsertNodeRequest(NPWSL.NeplanService.ExternalProject project, string name, double un, double fn, string libraryType, string xmlData, double x, double y, string symbolName) {
            this.project = project;
            this.name = name;
            this.un = un;
            this.fn = fn;
            this.libraryType = libraryType;
            this.xmlData = xmlData;
            this.x = x;
            this.y = y;
            this.symbolName = symbolName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertNodeResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class InsertNodeResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public string InsertNodeResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public NPWSL.NeplanService.ExternalProject project;
        
        public InsertNodeResponse() {
        }
        
        public InsertNodeResponse(string InsertNodeResult, NPWSL.NeplanService.ExternalProject project) {
            this.InsertNodeResult = InsertNodeResult;
            this.project = project;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertNodeWithoutGraphic", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class InsertNodeWithoutGraphicRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public NPWSL.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string name;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public double un;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=3)]
        public double fn;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=4)]
        public string libraryType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=5)]
        public string xmlData;
        
        public InsertNodeWithoutGraphicRequest() {
        }
        
        public InsertNodeWithoutGraphicRequest(NPWSL.NeplanService.ExternalProject project, string name, double un, double fn, string libraryType, string xmlData) {
            this.project = project;
            this.name = name;
            this.un = un;
            this.fn = fn;
            this.libraryType = libraryType;
            this.xmlData = xmlData;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertNodeWithoutGraphicResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class InsertNodeWithoutGraphicResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public string InsertNodeWithoutGraphicResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public NPWSL.NeplanService.ExternalProject project;
        
        public InsertNodeWithoutGraphicResponse() {
        }
        
        public InsertNodeWithoutGraphicResponse(string InsertNodeWithoutGraphicResult, NPWSL.NeplanService.ExternalProject project) {
            this.InsertNodeWithoutGraphicResult = InsertNodeWithoutGraphicResult;
            this.project = project;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertBusbar", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class InsertBusbarRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public NPWSL.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string name;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public double un;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=3)]
        public double fn;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=4)]
        public string libraryType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=5)]
        public string xmlData;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=6)]
        public double[] coordinates;
        
        public InsertBusbarRequest() {
        }
        
        public InsertBusbarRequest(NPWSL.NeplanService.ExternalProject project, string name, double un, double fn, string libraryType, string xmlData, double[] coordinates) {
            this.project = project;
            this.name = name;
            this.un = un;
            this.fn = fn;
            this.libraryType = libraryType;
            this.xmlData = xmlData;
            this.coordinates = coordinates;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertBusbarResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class InsertBusbarResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public string InsertBusbarResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public NPWSL.NeplanService.ExternalProject project;
        
        public InsertBusbarResponse() {
        }
        
        public InsertBusbarResponse(string InsertBusbarResult, NPWSL.NeplanService.ExternalProject project) {
            this.InsertBusbarResult = InsertBusbarResult;
            this.project = project;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Insert1PortElement", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class Insert1PortElementRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public NPWSL.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string name;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public string fromNode;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=3)]
        public string elementTypeName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=4)]
        public string libraryType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=5)]
        public string xmlData;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=6)]
        public int phase;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=7)]
        public double[] coordinatesLink;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=8)]
        public string symbolName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=9)]
        public double symbolAngle;
        
        public Insert1PortElementRequest() {
        }
        
        public Insert1PortElementRequest(NPWSL.NeplanService.ExternalProject project, string name, string fromNode, string elementTypeName, string libraryType, string xmlData, int phase, double[] coordinatesLink, string symbolName, double symbolAngle) {
            this.project = project;
            this.name = name;
            this.fromNode = fromNode;
            this.elementTypeName = elementTypeName;
            this.libraryType = libraryType;
            this.xmlData = xmlData;
            this.phase = phase;
            this.coordinatesLink = coordinatesLink;
            this.symbolName = symbolName;
            this.symbolAngle = symbolAngle;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Insert1PortElementResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class Insert1PortElementResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public string Insert1PortElementResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public NPWSL.NeplanService.ExternalProject project;
        
        public Insert1PortElementResponse() {
        }
        
        public Insert1PortElementResponse(string Insert1PortElementResult, NPWSL.NeplanService.ExternalProject project) {
            this.Insert1PortElementResult = Insert1PortElementResult;
            this.project = project;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertGraphicLayer", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class InsertGraphicLayerRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public NPWSL.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string diagramID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public string graphicLayerName;
        
        public InsertGraphicLayerRequest() {
        }
        
        public InsertGraphicLayerRequest(NPWSL.NeplanService.ExternalProject project, string diagramID, string graphicLayerName) {
            this.project = project;
            this.diagramID = diagramID;
            this.graphicLayerName = graphicLayerName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertGraphicLayerResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class InsertGraphicLayerResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public string InsertGraphicLayerResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public NPWSL.NeplanService.ExternalProject project;
        
        public InsertGraphicLayerResponse() {
        }
        
        public InsertGraphicLayerResponse(string InsertGraphicLayerResult, NPWSL.NeplanService.ExternalProject project) {
            this.InsertGraphicLayerResult = InsertGraphicLayerResult;
            this.project = project;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetElementDataByNameandType", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetElementDataByNameandTypeRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public NPWSL.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string elementName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public string elementTypeName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=3)]
        public System.Guid elementID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=4)]
        public string aliasName1;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=5)]
        public string aliasName2;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=6)]
        public string description;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=7)]
        public bool isInMaintenance;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=8)]
        public bool IsProjected;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=9)]
        public string zoneGuid;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=10)]
        public string subAreaGuid;
        
        public GetElementDataByNameandTypeRequest() {
        }
        
        public GetElementDataByNameandTypeRequest(NPWSL.NeplanService.ExternalProject project, string elementName, string elementTypeName, System.Guid elementID, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool IsProjected, string zoneGuid, string subAreaGuid) {
            this.project = project;
            this.elementName = elementName;
            this.elementTypeName = elementTypeName;
            this.elementID = elementID;
            this.aliasName1 = aliasName1;
            this.aliasName2 = aliasName2;
            this.description = description;
            this.isInMaintenance = isInMaintenance;
            this.IsProjected = IsProjected;
            this.zoneGuid = zoneGuid;
            this.subAreaGuid = subAreaGuid;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetElementDataByNameandTypeResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetElementDataByNameandTypeResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public System.Guid elementID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string aliasName1;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public string aliasName2;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=3)]
        public string description;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=4)]
        public bool isInMaintenance;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=5)]
        public bool IsProjected;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=6)]
        public string zoneGuid;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=7)]
        public string subAreaGuid;
        
        public GetElementDataByNameandTypeResponse() {
        }
        
        public GetElementDataByNameandTypeResponse(System.Guid elementID, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool IsProjected, string zoneGuid, string subAreaGuid) {
            this.elementID = elementID;
            this.aliasName1 = aliasName1;
            this.aliasName2 = aliasName2;
            this.description = description;
            this.isInMaintenance = isInMaintenance;
            this.IsProjected = IsProjected;
            this.zoneGuid = zoneGuid;
            this.subAreaGuid = subAreaGuid;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetElementDataByIDandType", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetElementDataByIDandTypeRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public NPWSL.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public System.Guid elementID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public string elementTypeName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=3)]
        public string elementName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=4)]
        public string aliasName1;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=5)]
        public string aliasName2;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=6)]
        public string description;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=7)]
        public bool isInMaintenance;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=8)]
        public bool IsProjected;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=9)]
        public string zoneGuid;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=10)]
        public string subAreaGuid;
        
        public GetElementDataByIDandTypeRequest() {
        }
        
        public GetElementDataByIDandTypeRequest(NPWSL.NeplanService.ExternalProject project, System.Guid elementID, string elementTypeName, string elementName, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool IsProjected, string zoneGuid, string subAreaGuid) {
            this.project = project;
            this.elementID = elementID;
            this.elementTypeName = elementTypeName;
            this.elementName = elementName;
            this.aliasName1 = aliasName1;
            this.aliasName2 = aliasName2;
            this.description = description;
            this.isInMaintenance = isInMaintenance;
            this.IsProjected = IsProjected;
            this.zoneGuid = zoneGuid;
            this.subAreaGuid = subAreaGuid;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetElementDataByIDandTypeResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetElementDataByIDandTypeResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public string elementName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string aliasName1;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public string aliasName2;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=3)]
        public string description;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=4)]
        public bool isInMaintenance;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=5)]
        public bool IsProjected;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=6)]
        public string zoneGuid;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=7)]
        public string subAreaGuid;
        
        public GetElementDataByIDandTypeResponse() {
        }
        
        public GetElementDataByIDandTypeResponse(string elementName, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool IsProjected, string zoneGuid, string subAreaGuid) {
            this.elementName = elementName;
            this.aliasName1 = aliasName1;
            this.aliasName2 = aliasName2;
            this.description = description;
            this.isInMaintenance = isInMaintenance;
            this.IsProjected = IsProjected;
            this.zoneGuid = zoneGuid;
            this.subAreaGuid = subAreaGuid;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetElementAttributeByID", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetElementAttributeByIDRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public string projectName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string elementID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public string attributeName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=3)]
        public string attributeValue;
        
        public GetElementAttributeByIDRequest() {
        }
        
        public GetElementAttributeByIDRequest(string projectName, string elementID, string attributeName, string attributeValue) {
            this.projectName = projectName;
            this.elementID = elementID;
            this.attributeName = attributeName;
            this.attributeValue = attributeValue;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetElementAttributeByIDResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetElementAttributeByIDResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public bool GetElementAttributeByIDResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string attributeValue;
        
        public GetElementAttributeByIDResponse() {
        }
        
        public GetElementAttributeByIDResponse(bool GetElementAttributeByIDResult, string attributeValue) {
            this.GetElementAttributeByIDResult = GetElementAttributeByIDResult;
            this.attributeValue = attributeValue;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetElementAttributeByName", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetElementAttributeByNameRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public string projectName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string elementName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public string elementType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=3)]
        public string attributeName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=4)]
        public string attributeValue;
        
        public GetElementAttributeByNameRequest() {
        }
        
        public GetElementAttributeByNameRequest(string projectName, string elementName, string elementType, string attributeName, string attributeValue) {
            this.projectName = projectName;
            this.elementName = elementName;
            this.elementType = elementType;
            this.attributeName = attributeName;
            this.attributeValue = attributeValue;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetElementAttributeByNameResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetElementAttributeByNameResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public bool GetElementAttributeByNameResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string attributeValue;
        
        public GetElementAttributeByNameResponse() {
        }
        
        public GetElementAttributeByNameResponse(bool GetElementAttributeByNameResult, string attributeValue) {
            this.GetElementAttributeByNameResult = GetElementAttributeByNameResult;
            this.attributeValue = attributeValue;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetDefaultValues", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class SetDefaultValuesRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public NPWSL.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public short defaultType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public short phaseDomination;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=3)]
        public bool isAnsi;
        
        public SetDefaultValuesRequest() {
        }
        
        public SetDefaultValuesRequest(NPWSL.NeplanService.ExternalProject project, short defaultType, short phaseDomination, bool isAnsi) {
            this.project = project;
            this.defaultType = defaultType;
            this.phaseDomination = phaseDomination;
            this.isAnsi = isAnsi;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetDefaultValuesResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class SetDefaultValuesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public bool SetDefaultValuesResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public NPWSL.NeplanService.ExternalProject project;
        
        public SetDefaultValuesResponse() {
        }
        
        public SetDefaultValuesResponse(bool SetDefaultValuesResult, NPWSL.NeplanService.ExternalProject project) {
            this.SetDefaultValuesResult = SetDefaultValuesResult;
            this.project = project;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddNodesFromList", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class AddNodesFromListRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public NPWSL.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public NPWSL.NeplanService.ImportElementItem[] listElements;
        
        public AddNodesFromListRequest() {
        }
        
        public AddNodesFromListRequest(NPWSL.NeplanService.ExternalProject project, NPWSL.NeplanService.ImportElementItem[] listElements) {
            this.project = project;
            this.listElements = listElements;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddNodesFromListResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class AddNodesFromListResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public bool AddNodesFromListResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public NPWSL.NeplanService.ExternalProject project;
        
        public AddNodesFromListResponse() {
        }
        
        public AddNodesFromListResponse(bool AddNodesFromListResult, NPWSL.NeplanService.ExternalProject project) {
            this.AddNodesFromListResult = AddNodesFromListResult;
            this.project = project;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddElementsFromList", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class AddElementsFromListRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public NPWSL.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public NPWSL.NeplanService.ImportElementItem[] listElements;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public string elementTypeName;
        
        public AddElementsFromListRequest() {
        }
        
        public AddElementsFromListRequest(NPWSL.NeplanService.ExternalProject project, NPWSL.NeplanService.ImportElementItem[] listElements, string elementTypeName) {
            this.project = project;
            this.listElements = listElements;
            this.elementTypeName = elementTypeName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddElementsFromListResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class AddElementsFromListResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public bool AddElementsFromListResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public NPWSL.NeplanService.ExternalProject project;
        
        public AddElementsFromListResponse() {
        }
        
        public AddElementsFromListResponse(bool AddElementsFromListResult, NPWSL.NeplanService.ExternalProject project) {
            this.AddElementsFromListResult = AddElementsFromListResult;
            this.project = project;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddSubLoadsFromList", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class AddSubLoadsFromListRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public NPWSL.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public NPWSL.NeplanService.LoadData[] listLoadData;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public string loadID;
        
        public AddSubLoadsFromListRequest() {
        }
        
        public AddSubLoadsFromListRequest(NPWSL.NeplanService.ExternalProject project, NPWSL.NeplanService.LoadData[] listLoadData, string loadID) {
            this.project = project;
            this.listLoadData = listLoadData;
            this.loadID = loadID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddSubLoadsFromListResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class AddSubLoadsFromListResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public bool AddSubLoadsFromListResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public NPWSL.NeplanService.ExternalProject project;
        
        public AddSubLoadsFromListResponse() {
        }
        
        public AddSubLoadsFromListResponse(bool AddSubLoadsFromListResult, NPWSL.NeplanService.ExternalProject project) {
            this.AddSubLoadsFromListResult = AddSubLoadsFromListResult;
            this.project = project;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ImportFromListFileAndDoLoadAllocation", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class ImportFromListFileAndDoLoadAllocationRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public string uploadName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string projectName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public NPWSL.NeplanService.AnalysisParameterSettings settings;
        
        public ImportFromListFileAndDoLoadAllocationRequest() {
        }
        
        public ImportFromListFileAndDoLoadAllocationRequest(string uploadName, string projectName, NPWSL.NeplanService.AnalysisParameterSettings settings) {
            this.uploadName = uploadName;
            this.projectName = projectName;
            this.settings = settings;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ImportFromListFileAndDoLoadAllocationResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class ImportFromListFileAndDoLoadAllocationResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public NPWSL.NeplanService.ExternalProject ImportFromListFileAndDoLoadAllocationResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public NPWSL.NeplanService.AnalysisReturnInfo analysisReturnInfo;
        
        public ImportFromListFileAndDoLoadAllocationResponse() {
        }
        
        public ImportFromListFileAndDoLoadAllocationResponse(NPWSL.NeplanService.ExternalProject ImportFromListFileAndDoLoadAllocationResult, NPWSL.NeplanService.AnalysisReturnInfo analysisReturnInfo) {
            this.ImportFromListFileAndDoLoadAllocationResult = ImportFromListFileAndDoLoadAllocationResult;
            this.analysisReturnInfo = analysisReturnInfo;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Find_Voltage_Level_of_One_Port_Element", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class Find_Voltage_Level_of_One_Port_ElementRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public string projectName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string elementName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public double Voltage;
        
        public Find_Voltage_Level_of_One_Port_ElementRequest() {
        }
        
        public Find_Voltage_Level_of_One_Port_ElementRequest(string projectName, string elementName, double Voltage) {
            this.projectName = projectName;
            this.elementName = elementName;
            this.Voltage = Voltage;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Find_Voltage_Level_of_One_Port_ElementResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class Find_Voltage_Level_of_One_Port_ElementResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public bool Find_Voltage_Level_of_One_Port_ElementResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public double Voltage;
        
        public Find_Voltage_Level_of_One_Port_ElementResponse() {
        }
        
        public Find_Voltage_Level_of_One_Port_ElementResponse(bool Find_Voltage_Level_of_One_Port_ElementResult, double Voltage) {
            this.Find_Voltage_Level_of_One_Port_ElementResult = Find_Voltage_Level_of_One_Port_ElementResult;
            this.Voltage = Voltage;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface NeplanServiceChannel : NPWSL.NeplanService.NeplanService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NeplanServiceClient : System.ServiceModel.ClientBase<NPWSL.NeplanService.NeplanService>, NPWSL.NeplanService.NeplanService {
        
        public NeplanServiceClient() {
        }
        
        public NeplanServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NeplanServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NeplanServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NeplanServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public NPWSL.NeplanService.ExternalProject CreateProject(string projectName, string variantName, string diagram, string layerName, string mediumType, int srid, string copySettingsFromProjectName) {
            return base.Channel.CreateProject(projectName, variantName, diagram, layerName, mediumType, srid, copySettingsFromProjectName);
        }
        
        public System.Threading.Tasks.Task<NPWSL.NeplanService.ExternalProject> CreateProjectAsync(string projectName, string variantName, string diagram, string layerName, string mediumType, int srid, string copySettingsFromProjectName) {
            return base.Channel.CreateProjectAsync(projectName, variantName, diagram, layerName, mediumType, srid, copySettingsFromProjectName);
        }
        
        public NPWSL.NeplanService.ExternalProject GetProject(string projectName, string variantName, string diagramName, string layerName) {
            return base.Channel.GetProject(projectName, variantName, diagramName, layerName);
        }
        
        public System.Threading.Tasks.Task<NPWSL.NeplanService.ExternalProject> GetProjectAsync(string projectName, string variantName, string diagramName, string layerName) {
            return base.Channel.GetProjectAsync(projectName, variantName, diagramName, layerName);
        }
        
        public string GetLogOnUrlWithProject(NPWSL.NeplanService.ExternalProject project) {
            return base.Channel.GetLogOnUrlWithProject(project);
        }
        
        public System.Threading.Tasks.Task<string> GetLogOnUrlWithProjectAsync(NPWSL.NeplanService.ExternalProject project) {
            return base.Channel.GetLogOnUrlWithProjectAsync(project);
        }
        
        public string GetLogOnUrl() {
            return base.Channel.GetLogOnUrl();
        }
        
        public System.Threading.Tasks.Task<string> GetLogOnUrlAsync() {
            return base.Channel.GetLogOnUrlAsync();
        }
        
        public string GetLogOnSessionID(NPWSL.NeplanService.ExternalProject project) {
            return base.Channel.GetLogOnSessionID(project);
        }
        
        public System.Threading.Tasks.Task<string> GetLogOnSessionIDAsync(NPWSL.NeplanService.ExternalProject project) {
            return base.Channel.GetLogOnSessionIDAsync(project);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        NPWSL.NeplanService.InsertNodeResponse NPWSL.NeplanService.NeplanService.InsertNode(NPWSL.NeplanService.InsertNodeRequest request) {
            return base.Channel.InsertNode(request);
        }
        
        public string InsertNode(ref NPWSL.NeplanService.ExternalProject project, string name, double un, double fn, string libraryType, string xmlData, double x, double y, string symbolName) {
            NPWSL.NeplanService.InsertNodeRequest inValue = new NPWSL.NeplanService.InsertNodeRequest();
            inValue.project = project;
            inValue.name = name;
            inValue.un = un;
            inValue.fn = fn;
            inValue.libraryType = libraryType;
            inValue.xmlData = xmlData;
            inValue.x = x;
            inValue.y = y;
            inValue.symbolName = symbolName;
            NPWSL.NeplanService.InsertNodeResponse retVal = ((NPWSL.NeplanService.NeplanService)(this)).InsertNode(inValue);
            project = retVal.project;
            return retVal.InsertNodeResult;
        }
        
        public System.Threading.Tasks.Task<NPWSL.NeplanService.InsertNodeResponse> InsertNodeAsync(NPWSL.NeplanService.InsertNodeRequest request) {
            return base.Channel.InsertNodeAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        NPWSL.NeplanService.InsertNodeWithoutGraphicResponse NPWSL.NeplanService.NeplanService.InsertNodeWithoutGraphic(NPWSL.NeplanService.InsertNodeWithoutGraphicRequest request) {
            return base.Channel.InsertNodeWithoutGraphic(request);
        }
        
        public string InsertNodeWithoutGraphic(ref NPWSL.NeplanService.ExternalProject project, string name, double un, double fn, string libraryType, string xmlData) {
            NPWSL.NeplanService.InsertNodeWithoutGraphicRequest inValue = new NPWSL.NeplanService.InsertNodeWithoutGraphicRequest();
            inValue.project = project;
            inValue.name = name;
            inValue.un = un;
            inValue.fn = fn;
            inValue.libraryType = libraryType;
            inValue.xmlData = xmlData;
            NPWSL.NeplanService.InsertNodeWithoutGraphicResponse retVal = ((NPWSL.NeplanService.NeplanService)(this)).InsertNodeWithoutGraphic(inValue);
            project = retVal.project;
            return retVal.InsertNodeWithoutGraphicResult;
        }
        
        public System.Threading.Tasks.Task<NPWSL.NeplanService.InsertNodeWithoutGraphicResponse> InsertNodeWithoutGraphicAsync(NPWSL.NeplanService.InsertNodeWithoutGraphicRequest request) {
            return base.Channel.InsertNodeWithoutGraphicAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        NPWSL.NeplanService.InsertBusbarResponse NPWSL.NeplanService.NeplanService.InsertBusbar(NPWSL.NeplanService.InsertBusbarRequest request) {
            return base.Channel.InsertBusbar(request);
        }
        
        public string InsertBusbar(ref NPWSL.NeplanService.ExternalProject project, string name, double un, double fn, string libraryType, string xmlData, double[] coordinates) {
            NPWSL.NeplanService.InsertBusbarRequest inValue = new NPWSL.NeplanService.InsertBusbarRequest();
            inValue.project = project;
            inValue.name = name;
            inValue.un = un;
            inValue.fn = fn;
            inValue.libraryType = libraryType;
            inValue.xmlData = xmlData;
            inValue.coordinates = coordinates;
            NPWSL.NeplanService.InsertBusbarResponse retVal = ((NPWSL.NeplanService.NeplanService)(this)).InsertBusbar(inValue);
            project = retVal.project;
            return retVal.InsertBusbarResult;
        }
        
        public System.Threading.Tasks.Task<NPWSL.NeplanService.InsertBusbarResponse> InsertBusbarAsync(NPWSL.NeplanService.InsertBusbarRequest request) {
            return base.Channel.InsertBusbarAsync(request);
        }
        
        public string InsertLine(NPWSL.NeplanService.ExternalProject project, string name, string fromNode, string toNode, double length, string libraryType, string xmlData, double[] coordinates) {
            return base.Channel.InsertLine(project, name, fromNode, toNode, length, libraryType, xmlData, coordinates);
        }
        
        public System.Threading.Tasks.Task<string> InsertLineAsync(NPWSL.NeplanService.ExternalProject project, string name, string fromNode, string toNode, double length, string libraryType, string xmlData, double[] coordinates) {
            return base.Channel.InsertLineAsync(project, name, fromNode, toNode, length, libraryType, xmlData, coordinates);
        }
        
        public string InsertLineByNodeID(NPWSL.NeplanService.ExternalProject project, string name, string fromNodeID, string toNodeID, double length, string libraryType, string xmlData, double[] coordinates) {
            return base.Channel.InsertLineByNodeID(project, name, fromNodeID, toNodeID, length, libraryType, xmlData, coordinates);
        }
        
        public System.Threading.Tasks.Task<string> InsertLineByNodeIDAsync(NPWSL.NeplanService.ExternalProject project, string name, string fromNodeID, string toNodeID, double length, string libraryType, string xmlData, double[] coordinates) {
            return base.Channel.InsertLineByNodeIDAsync(project, name, fromNodeID, toNodeID, length, libraryType, xmlData, coordinates);
        }
        
        public string InsertLineAsym(NPWSL.NeplanService.ExternalProject project, string name, string fromNode, string toNode, double length, short phase, string libraryType, string xmlData, double[] coordinates) {
            return base.Channel.InsertLineAsym(project, name, fromNode, toNode, length, phase, libraryType, xmlData, coordinates);
        }
        
        public System.Threading.Tasks.Task<string> InsertLineAsymAsync(NPWSL.NeplanService.ExternalProject project, string name, string fromNode, string toNode, double length, short phase, string libraryType, string xmlData, double[] coordinates) {
            return base.Channel.InsertLineAsymAsync(project, name, fromNode, toNode, length, phase, libraryType, xmlData, coordinates);
        }
        
        public string Insert2PortElement(NPWSL.NeplanService.ExternalProject project, string name, string fromNode, string toNode, string elementTypeName, string libraryType, string xmlData, int phase, double[] coordinatesLink1, double[] coordinatesLink2, string symbolName, double symbolAngle) {
            return base.Channel.Insert2PortElement(project, name, fromNode, toNode, elementTypeName, libraryType, xmlData, phase, coordinatesLink1, coordinatesLink2, symbolName, symbolAngle);
        }
        
        public System.Threading.Tasks.Task<string> Insert2PortElementAsync(NPWSL.NeplanService.ExternalProject project, string name, string fromNode, string toNode, string elementTypeName, string libraryType, string xmlData, int phase, double[] coordinatesLink1, double[] coordinatesLink2, string symbolName, double symbolAngle) {
            return base.Channel.Insert2PortElementAsync(project, name, fromNode, toNode, elementTypeName, libraryType, xmlData, phase, coordinatesLink1, coordinatesLink2, symbolName, symbolAngle);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        NPWSL.NeplanService.Insert1PortElementResponse NPWSL.NeplanService.NeplanService.Insert1PortElement(NPWSL.NeplanService.Insert1PortElementRequest request) {
            return base.Channel.Insert1PortElement(request);
        }
        
        public string Insert1PortElement(ref NPWSL.NeplanService.ExternalProject project, string name, string fromNode, string elementTypeName, string libraryType, string xmlData, int phase, double[] coordinatesLink, string symbolName, double symbolAngle) {
            NPWSL.NeplanService.Insert1PortElementRequest inValue = new NPWSL.NeplanService.Insert1PortElementRequest();
            inValue.project = project;
            inValue.name = name;
            inValue.fromNode = fromNode;
            inValue.elementTypeName = elementTypeName;
            inValue.libraryType = libraryType;
            inValue.xmlData = xmlData;
            inValue.phase = phase;
            inValue.coordinatesLink = coordinatesLink;
            inValue.symbolName = symbolName;
            inValue.symbolAngle = symbolAngle;
            NPWSL.NeplanService.Insert1PortElementResponse retVal = ((NPWSL.NeplanService.NeplanService)(this)).Insert1PortElement(inValue);
            project = retVal.project;
            return retVal.Insert1PortElementResult;
        }
        
        public System.Threading.Tasks.Task<NPWSL.NeplanService.Insert1PortElementResponse> Insert1PortElementAsync(NPWSL.NeplanService.Insert1PortElementRequest request) {
            return base.Channel.Insert1PortElementAsync(request);
        }
        
        public string InsertProtectionElement(NPWSL.NeplanService.ExternalProject project, string name, string onElementID, short atPort, string elementTypeName, string libraryType, string xmlData, int phase, string symbolName) {
            return base.Channel.InsertProtectionElement(project, name, onElementID, atPort, elementTypeName, libraryType, xmlData, phase, symbolName);
        }
        
        public System.Threading.Tasks.Task<string> InsertProtectionElementAsync(NPWSL.NeplanService.ExternalProject project, string name, string onElementID, short atPort, string elementTypeName, string libraryType, string xmlData, int phase, string symbolName) {
            return base.Channel.InsertProtectionElementAsync(project, name, onElementID, atPort, elementTypeName, libraryType, xmlData, phase, symbolName);
        }
        
        public string InsertFeeder(NPWSL.NeplanService.ExternalProject project, string feederName, string nodeName, string elementName) {
            return base.Channel.InsertFeeder(project, feederName, nodeName, elementName);
        }
        
        public System.Threading.Tasks.Task<string> InsertFeederAsync(NPWSL.NeplanService.ExternalProject project, string feederName, string nodeName, string elementName) {
            return base.Channel.InsertFeederAsync(project, feederName, nodeName, elementName);
        }
        
        public string InsertArea(NPWSL.NeplanService.ExternalProject project, string areaName, string firstSubArea, string colorStringArea, string colorStringSubArea) {
            return base.Channel.InsertArea(project, areaName, firstSubArea, colorStringArea, colorStringSubArea);
        }
        
        public System.Threading.Tasks.Task<string> InsertAreaAsync(NPWSL.NeplanService.ExternalProject project, string areaName, string firstSubArea, string colorStringArea, string colorStringSubArea) {
            return base.Channel.InsertAreaAsync(project, areaName, firstSubArea, colorStringArea, colorStringSubArea);
        }
        
        public string InsertZone(NPWSL.NeplanService.ExternalProject project, string name, string colorString) {
            return base.Channel.InsertZone(project, name, colorString);
        }
        
        public System.Threading.Tasks.Task<string> InsertZoneAsync(NPWSL.NeplanService.ExternalProject project, string name, string colorString) {
            return base.Channel.InsertZoneAsync(project, name, colorString);
        }
        
        public string InsertMeasurement(NPWSL.NeplanService.ExternalProject project, string measurementDefinitionName, string elementName, short portNr, System.DateTime dateTime, int inputDataDefinition, double[] measuremens, short nameAliasName1AliasName2) {
            return base.Channel.InsertMeasurement(project, measurementDefinitionName, elementName, portNr, dateTime, inputDataDefinition, measuremens, nameAliasName1AliasName2);
        }
        
        public System.Threading.Tasks.Task<string> InsertMeasurementAsync(NPWSL.NeplanService.ExternalProject project, string measurementDefinitionName, string elementName, short portNr, System.DateTime dateTime, int inputDataDefinition, double[] measuremens, short nameAliasName1AliasName2) {
            return base.Channel.InsertMeasurementAsync(project, measurementDefinitionName, elementName, portNr, dateTime, inputDataDefinition, measuremens, nameAliasName1AliasName2);
        }
        
        public string InsertMeasurementByElementID(string elementID, string measurementDefinitionName, short portNr, System.DateTime dateTime, int inputDataDefinition, double[] measurements) {
            return base.Channel.InsertMeasurementByElementID(elementID, measurementDefinitionName, portNr, dateTime, inputDataDefinition, measurements);
        }
        
        public System.Threading.Tasks.Task<string> InsertMeasurementByElementIDAsync(string elementID, string measurementDefinitionName, short portNr, System.DateTime dateTime, int inputDataDefinition, double[] measurements) {
            return base.Channel.InsertMeasurementByElementIDAsync(elementID, measurementDefinitionName, portNr, dateTime, inputDataDefinition, measurements);
        }
        
        public string InsertDiagram(NPWSL.NeplanService.ExternalProject project, string diagramName, string firstGraphicLayerName) {
            return base.Channel.InsertDiagram(project, diagramName, firstGraphicLayerName);
        }
        
        public System.Threading.Tasks.Task<string> InsertDiagramAsync(NPWSL.NeplanService.ExternalProject project, string diagramName, string firstGraphicLayerName) {
            return base.Channel.InsertDiagramAsync(project, diagramName, firstGraphicLayerName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        NPWSL.NeplanService.InsertGraphicLayerResponse NPWSL.NeplanService.NeplanService.InsertGraphicLayer(NPWSL.NeplanService.InsertGraphicLayerRequest request) {
            return base.Channel.InsertGraphicLayer(request);
        }
        
        public string InsertGraphicLayer(ref NPWSL.NeplanService.ExternalProject project, string diagramID, string graphicLayerName) {
            NPWSL.NeplanService.InsertGraphicLayerRequest inValue = new NPWSL.NeplanService.InsertGraphicLayerRequest();
            inValue.project = project;
            inValue.diagramID = diagramID;
            inValue.graphicLayerName = graphicLayerName;
            NPWSL.NeplanService.InsertGraphicLayerResponse retVal = ((NPWSL.NeplanService.NeplanService)(this)).InsertGraphicLayer(inValue);
            project = retVal.project;
            return retVal.InsertGraphicLayerResult;
        }
        
        public System.Threading.Tasks.Task<NPWSL.NeplanService.InsertGraphicLayerResponse> InsertGraphicLayerAsync(NPWSL.NeplanService.InsertGraphicLayerRequest request) {
            return base.Channel.InsertGraphicLayerAsync(request);
        }
        
        public bool AddSubLoad(NPWSL.NeplanService.ExternalProject project, string loadID, NPWSL.NeplanService.LoadData loadData) {
            return base.Channel.AddSubLoad(project, loadID, loadData);
        }
        
        public System.Threading.Tasks.Task<bool> AddSubLoadAsync(NPWSL.NeplanService.ExternalProject project, string loadID, NPWSL.NeplanService.LoadData loadData) {
            return base.Channel.AddSubLoadAsync(project, loadID, loadData);
        }
        
        public bool AssignPowerTo1Port(NPWSL.NeplanService.ExternalProject project, string name, string elementTypeName, short powerType, double value1, double value2) {
            return base.Channel.AssignPowerTo1Port(project, name, elementTypeName, powerType, value1, value2);
        }
        
        public System.Threading.Tasks.Task<bool> AssignPowerTo1PortAsync(NPWSL.NeplanService.ExternalProject project, string name, string elementTypeName, short powerType, double value1, double value2) {
            return base.Channel.AssignPowerTo1PortAsync(project, name, elementTypeName, powerType, value1, value2);
        }
        
        public bool AssignPowerTo1PortByID(NPWSL.NeplanService.ExternalProject project, string elementID, short powerType, double value1, double value2) {
            return base.Channel.AssignPowerTo1PortByID(project, elementID, powerType, value1, value2);
        }
        
        public System.Threading.Tasks.Task<bool> AssignPowerTo1PortByIDAsync(NPWSL.NeplanService.ExternalProject project, string elementID, short powerType, double value1, double value2) {
            return base.Channel.AssignPowerTo1PortByIDAsync(project, elementID, powerType, value1, value2);
        }
        
        public void SwitchElementAtPortByID(string elementID, short portNr, bool isConnected) {
            base.Channel.SwitchElementAtPortByID(elementID, portNr, isConnected);
        }
        
        public System.Threading.Tasks.Task SwitchElementAtPortByIDAsync(string elementID, short portNr, bool isConnected) {
            return base.Channel.SwitchElementAtPortByIDAsync(elementID, portNr, isConnected);
        }
        
        public void SwitchElementAtPort(NPWSL.NeplanService.ExternalProject project, string elementName, string elementTypeName, short portNr, bool isConnected) {
            base.Channel.SwitchElementAtPort(project, elementName, elementTypeName, portNr, isConnected);
        }
        
        public System.Threading.Tasks.Task SwitchElementAtPortAsync(NPWSL.NeplanService.ExternalProject project, string elementName, string elementTypeName, short portNr, bool isConnected) {
            return base.Channel.SwitchElementAtPortAsync(project, elementName, elementTypeName, portNr, isConnected);
        }
        
        public void SetElementData(NPWSL.NeplanService.ExternalProject project, string elementName, string elementTypeName, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool IsProjected, string zoneGuid, string subAreaGuid) {
            base.Channel.SetElementData(project, elementName, elementTypeName, aliasName1, aliasName2, description, isInMaintenance, IsProjected, zoneGuid, subAreaGuid);
        }
        
        public System.Threading.Tasks.Task SetElementDataAsync(NPWSL.NeplanService.ExternalProject project, string elementName, string elementTypeName, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool IsProjected, string zoneGuid, string subAreaGuid) {
            return base.Channel.SetElementDataAsync(project, elementName, elementTypeName, aliasName1, aliasName2, description, isInMaintenance, IsProjected, zoneGuid, subAreaGuid);
        }
        
        public void SetElementDataByID(string elementID, string elementTypeName, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool IsProjected, string zoneGuid, string subAreaGuid) {
            base.Channel.SetElementDataByID(elementID, elementTypeName, aliasName1, aliasName2, description, isInMaintenance, IsProjected, zoneGuid, subAreaGuid);
        }
        
        public System.Threading.Tasks.Task SetElementDataByIDAsync(string elementID, string elementTypeName, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool IsProjected, string zoneGuid, string subAreaGuid) {
            return base.Channel.SetElementDataByIDAsync(elementID, elementTypeName, aliasName1, aliasName2, description, isInMaintenance, IsProjected, zoneGuid, subAreaGuid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        NPWSL.NeplanService.GetElementDataByNameandTypeResponse NPWSL.NeplanService.NeplanService.GetElementDataByNameandType(NPWSL.NeplanService.GetElementDataByNameandTypeRequest request) {
            return base.Channel.GetElementDataByNameandType(request);
        }
        
        public void GetElementDataByNameandType(NPWSL.NeplanService.ExternalProject project, string elementName, string elementTypeName, ref System.Guid elementID, ref string aliasName1, ref string aliasName2, ref string description, ref bool isInMaintenance, ref bool IsProjected, ref string zoneGuid, ref string subAreaGuid) {
            NPWSL.NeplanService.GetElementDataByNameandTypeRequest inValue = new NPWSL.NeplanService.GetElementDataByNameandTypeRequest();
            inValue.project = project;
            inValue.elementName = elementName;
            inValue.elementTypeName = elementTypeName;
            inValue.elementID = elementID;
            inValue.aliasName1 = aliasName1;
            inValue.aliasName2 = aliasName2;
            inValue.description = description;
            inValue.isInMaintenance = isInMaintenance;
            inValue.IsProjected = IsProjected;
            inValue.zoneGuid = zoneGuid;
            inValue.subAreaGuid = subAreaGuid;
            NPWSL.NeplanService.GetElementDataByNameandTypeResponse retVal = ((NPWSL.NeplanService.NeplanService)(this)).GetElementDataByNameandType(inValue);
            elementID = retVal.elementID;
            aliasName1 = retVal.aliasName1;
            aliasName2 = retVal.aliasName2;
            description = retVal.description;
            isInMaintenance = retVal.isInMaintenance;
            IsProjected = retVal.IsProjected;
            zoneGuid = retVal.zoneGuid;
            subAreaGuid = retVal.subAreaGuid;
        }
        
        public System.Threading.Tasks.Task<NPWSL.NeplanService.GetElementDataByNameandTypeResponse> GetElementDataByNameandTypeAsync(NPWSL.NeplanService.GetElementDataByNameandTypeRequest request) {
            return base.Channel.GetElementDataByNameandTypeAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        NPWSL.NeplanService.GetElementDataByIDandTypeResponse NPWSL.NeplanService.NeplanService.GetElementDataByIDandType(NPWSL.NeplanService.GetElementDataByIDandTypeRequest request) {
            return base.Channel.GetElementDataByIDandType(request);
        }
        
        public void GetElementDataByIDandType(NPWSL.NeplanService.ExternalProject project, System.Guid elementID, string elementTypeName, ref string elementName, ref string aliasName1, ref string aliasName2, ref string description, ref bool isInMaintenance, ref bool IsProjected, ref string zoneGuid, ref string subAreaGuid) {
            NPWSL.NeplanService.GetElementDataByIDandTypeRequest inValue = new NPWSL.NeplanService.GetElementDataByIDandTypeRequest();
            inValue.project = project;
            inValue.elementID = elementID;
            inValue.elementTypeName = elementTypeName;
            inValue.elementName = elementName;
            inValue.aliasName1 = aliasName1;
            inValue.aliasName2 = aliasName2;
            inValue.description = description;
            inValue.isInMaintenance = isInMaintenance;
            inValue.IsProjected = IsProjected;
            inValue.zoneGuid = zoneGuid;
            inValue.subAreaGuid = subAreaGuid;
            NPWSL.NeplanService.GetElementDataByIDandTypeResponse retVal = ((NPWSL.NeplanService.NeplanService)(this)).GetElementDataByIDandType(inValue);
            elementName = retVal.elementName;
            aliasName1 = retVal.aliasName1;
            aliasName2 = retVal.aliasName2;
            description = retVal.description;
            isInMaintenance = retVal.isInMaintenance;
            IsProjected = retVal.IsProjected;
            zoneGuid = retVal.zoneGuid;
            subAreaGuid = retVal.subAreaGuid;
        }
        
        public System.Threading.Tasks.Task<NPWSL.NeplanService.GetElementDataByIDandTypeResponse> GetElementDataByIDandTypeAsync(NPWSL.NeplanService.GetElementDataByIDandTypeRequest request) {
            return base.Channel.GetElementDataByIDandTypeAsync(request);
        }
        
        public bool SetElementAttribute(NPWSL.NeplanService.ExternalProject project, string elementName, string elementType, string attributeName, string attributeValue) {
            return base.Channel.SetElementAttribute(project, elementName, elementType, attributeName, attributeValue);
        }
        
        public System.Threading.Tasks.Task<bool> SetElementAttributeAsync(NPWSL.NeplanService.ExternalProject project, string elementName, string elementType, string attributeName, string attributeValue) {
            return base.Channel.SetElementAttributeAsync(project, elementName, elementType, attributeName, attributeValue);
        }
        
        public bool SetElementAttributeByID(NPWSL.NeplanService.ExternalProject project, string elementID, string attributeName, string attributeValue) {
            return base.Channel.SetElementAttributeByID(project, elementID, attributeName, attributeValue);
        }
        
        public System.Threading.Tasks.Task<bool> SetElementAttributeByIDAsync(NPWSL.NeplanService.ExternalProject project, string elementID, string attributeName, string attributeValue) {
            return base.Channel.SetElementAttributeByIDAsync(project, elementID, attributeName, attributeValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        NPWSL.NeplanService.GetElementAttributeByIDResponse NPWSL.NeplanService.NeplanService.GetElementAttributeByID(NPWSL.NeplanService.GetElementAttributeByIDRequest request) {
            return base.Channel.GetElementAttributeByID(request);
        }
        
        public bool GetElementAttributeByID(string projectName, string elementID, string attributeName, ref string attributeValue) {
            NPWSL.NeplanService.GetElementAttributeByIDRequest inValue = new NPWSL.NeplanService.GetElementAttributeByIDRequest();
            inValue.projectName = projectName;
            inValue.elementID = elementID;
            inValue.attributeName = attributeName;
            inValue.attributeValue = attributeValue;
            NPWSL.NeplanService.GetElementAttributeByIDResponse retVal = ((NPWSL.NeplanService.NeplanService)(this)).GetElementAttributeByID(inValue);
            attributeValue = retVal.attributeValue;
            return retVal.GetElementAttributeByIDResult;
        }
        
        public System.Threading.Tasks.Task<NPWSL.NeplanService.GetElementAttributeByIDResponse> GetElementAttributeByIDAsync(NPWSL.NeplanService.GetElementAttributeByIDRequest request) {
            return base.Channel.GetElementAttributeByIDAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        NPWSL.NeplanService.GetElementAttributeByNameResponse NPWSL.NeplanService.NeplanService.GetElementAttributeByName(NPWSL.NeplanService.GetElementAttributeByNameRequest request) {
            return base.Channel.GetElementAttributeByName(request);
        }
        
        public bool GetElementAttributeByName(string projectName, string elementName, string elementType, string attributeName, ref string attributeValue) {
            NPWSL.NeplanService.GetElementAttributeByNameRequest inValue = new NPWSL.NeplanService.GetElementAttributeByNameRequest();
            inValue.projectName = projectName;
            inValue.elementName = elementName;
            inValue.elementType = elementType;
            inValue.attributeName = attributeName;
            inValue.attributeValue = attributeValue;
            NPWSL.NeplanService.GetElementAttributeByNameResponse retVal = ((NPWSL.NeplanService.NeplanService)(this)).GetElementAttributeByName(inValue);
            attributeValue = retVal.attributeValue;
            return retVal.GetElementAttributeByNameResult;
        }
        
        public System.Threading.Tasks.Task<NPWSL.NeplanService.GetElementAttributeByNameResponse> GetElementAttributeByNameAsync(NPWSL.NeplanService.GetElementAttributeByNameRequest request) {
            return base.Channel.GetElementAttributeByNameAsync(request);
        }
        
        public bool AddReadAllRoleToProject(NPWSL.NeplanService.ExternalProject project) {
            return base.Channel.AddReadAllRoleToProject(project);
        }
        
        public System.Threading.Tasks.Task<bool> AddReadAllRoleToProjectAsync(NPWSL.NeplanService.ExternalProject project) {
            return base.Channel.AddReadAllRoleToProjectAsync(project);
        }
        
        public string AddVoltageLevel(NPWSL.NeplanService.ExternalProject project, double un, int colorR, int colorG, int colorB) {
            return base.Channel.AddVoltageLevel(project, un, colorR, colorG, colorB);
        }
        
        public System.Threading.Tasks.Task<string> AddVoltageLevelAsync(NPWSL.NeplanService.ExternalProject project, double un, int colorR, int colorG, int colorB) {
            return base.Channel.AddVoltageLevelAsync(project, un, colorR, colorG, colorB);
        }
        
        public void SetDiagramMinValues(NPWSL.NeplanService.ExternalProject project, double xMin, double yMin, short units, double factorXY, double angle) {
            base.Channel.SetDiagramMinValues(project, xMin, yMin, units, factorXY, angle);
        }
        
        public System.Threading.Tasks.Task SetDiagramMinValuesAsync(NPWSL.NeplanService.ExternalProject project, double xMin, double yMin, short units, double factorXY, double angle) {
            return base.Channel.SetDiagramMinValuesAsync(project, xMin, yMin, units, factorXY, angle);
        }
        
        public bool SetLineStyle(NPWSL.NeplanService.ExternalProject project, string lineType, short lineStyle) {
            return base.Channel.SetLineStyle(project, lineType, lineStyle);
        }
        
        public System.Threading.Tasks.Task<bool> SetLineStyleAsync(NPWSL.NeplanService.ExternalProject project, string lineType, short lineStyle) {
            return base.Channel.SetLineStyleAsync(project, lineType, lineStyle);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        NPWSL.NeplanService.SetDefaultValuesResponse NPWSL.NeplanService.NeplanService.SetDefaultValues(NPWSL.NeplanService.SetDefaultValuesRequest request) {
            return base.Channel.SetDefaultValues(request);
        }
        
        public bool SetDefaultValues(ref NPWSL.NeplanService.ExternalProject project, short defaultType, short phaseDomination, bool isAnsi) {
            NPWSL.NeplanService.SetDefaultValuesRequest inValue = new NPWSL.NeplanService.SetDefaultValuesRequest();
            inValue.project = project;
            inValue.defaultType = defaultType;
            inValue.phaseDomination = phaseDomination;
            inValue.isAnsi = isAnsi;
            NPWSL.NeplanService.SetDefaultValuesResponse retVal = ((NPWSL.NeplanService.NeplanService)(this)).SetDefaultValues(inValue);
            project = retVal.project;
            return retVal.SetDefaultValuesResult;
        }
        
        public System.Threading.Tasks.Task<NPWSL.NeplanService.SetDefaultValuesResponse> SetDefaultValuesAsync(NPWSL.NeplanService.SetDefaultValuesRequest request) {
            return base.Channel.SetDefaultValuesAsync(request);
        }
        
        public bool SetDiagramParameterAttribute(NPWSL.NeplanService.ExternalProject project, string parameterType, string attributeName, string attributeValue) {
            return base.Channel.SetDiagramParameterAttribute(project, parameterType, attributeName, attributeValue);
        }
        
        public System.Threading.Tasks.Task<bool> SetDiagramParameterAttributeAsync(NPWSL.NeplanService.ExternalProject project, string parameterType, string attributeName, string attributeValue) {
            return base.Channel.SetDiagramParameterAttributeAsync(project, parameterType, attributeName, attributeValue);
        }
        
        public bool SetCalcParameterAttribute(NPWSL.NeplanService.ExternalProject project, string parameterType, string attributeName, string attributeValue) {
            return base.Channel.SetCalcParameterAttribute(project, parameterType, attributeName, attributeValue);
        }
        
        public System.Threading.Tasks.Task<bool> SetCalcParameterAttributeAsync(NPWSL.NeplanService.ExternalProject project, string parameterType, string attributeName, string attributeValue) {
            return base.Channel.SetCalcParameterAttributeAsync(project, parameterType, attributeName, attributeValue);
        }
        
        public bool SetGraphicLayerWorldCoordinates(NPWSL.NeplanService.ExternalProject project, bool isDirectionUpY, double factor, double angle, double offsetZeroPoint) {
            return base.Channel.SetGraphicLayerWorldCoordinates(project, isDirectionUpY, factor, angle, offsetZeroPoint);
        }
        
        public System.Threading.Tasks.Task<bool> SetGraphicLayerWorldCoordinatesAsync(NPWSL.NeplanService.ExternalProject project, bool isDirectionUpY, double factor, double angle, double offsetZeroPoint) {
            return base.Channel.SetGraphicLayerWorldCoordinatesAsync(project, isDirectionUpY, factor, angle, offsetZeroPoint);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        NPWSL.NeplanService.AddNodesFromListResponse NPWSL.NeplanService.NeplanService.AddNodesFromList(NPWSL.NeplanService.AddNodesFromListRequest request) {
            return base.Channel.AddNodesFromList(request);
        }
        
        public bool AddNodesFromList(ref NPWSL.NeplanService.ExternalProject project, NPWSL.NeplanService.ImportElementItem[] listElements) {
            NPWSL.NeplanService.AddNodesFromListRequest inValue = new NPWSL.NeplanService.AddNodesFromListRequest();
            inValue.project = project;
            inValue.listElements = listElements;
            NPWSL.NeplanService.AddNodesFromListResponse retVal = ((NPWSL.NeplanService.NeplanService)(this)).AddNodesFromList(inValue);
            project = retVal.project;
            return retVal.AddNodesFromListResult;
        }
        
        public System.Threading.Tasks.Task<NPWSL.NeplanService.AddNodesFromListResponse> AddNodesFromListAsync(NPWSL.NeplanService.AddNodesFromListRequest request) {
            return base.Channel.AddNodesFromListAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        NPWSL.NeplanService.AddElementsFromListResponse NPWSL.NeplanService.NeplanService.AddElementsFromList(NPWSL.NeplanService.AddElementsFromListRequest request) {
            return base.Channel.AddElementsFromList(request);
        }
        
        public bool AddElementsFromList(ref NPWSL.NeplanService.ExternalProject project, NPWSL.NeplanService.ImportElementItem[] listElements, string elementTypeName) {
            NPWSL.NeplanService.AddElementsFromListRequest inValue = new NPWSL.NeplanService.AddElementsFromListRequest();
            inValue.project = project;
            inValue.listElements = listElements;
            inValue.elementTypeName = elementTypeName;
            NPWSL.NeplanService.AddElementsFromListResponse retVal = ((NPWSL.NeplanService.NeplanService)(this)).AddElementsFromList(inValue);
            project = retVal.project;
            return retVal.AddElementsFromListResult;
        }
        
        public System.Threading.Tasks.Task<NPWSL.NeplanService.AddElementsFromListResponse> AddElementsFromListAsync(NPWSL.NeplanService.AddElementsFromListRequest request) {
            return base.Channel.AddElementsFromListAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        NPWSL.NeplanService.AddSubLoadsFromListResponse NPWSL.NeplanService.NeplanService.AddSubLoadsFromList(NPWSL.NeplanService.AddSubLoadsFromListRequest request) {
            return base.Channel.AddSubLoadsFromList(request);
        }
        
        public bool AddSubLoadsFromList(ref NPWSL.NeplanService.ExternalProject project, NPWSL.NeplanService.LoadData[] listLoadData, string loadID) {
            NPWSL.NeplanService.AddSubLoadsFromListRequest inValue = new NPWSL.NeplanService.AddSubLoadsFromListRequest();
            inValue.project = project;
            inValue.listLoadData = listLoadData;
            inValue.loadID = loadID;
            NPWSL.NeplanService.AddSubLoadsFromListResponse retVal = ((NPWSL.NeplanService.NeplanService)(this)).AddSubLoadsFromList(inValue);
            project = retVal.project;
            return retVal.AddSubLoadsFromListResult;
        }
        
        public System.Threading.Tasks.Task<NPWSL.NeplanService.AddSubLoadsFromListResponse> AddSubLoadsFromListAsync(NPWSL.NeplanService.AddSubLoadsFromListRequest request) {
            return base.Channel.AddSubLoadsFromListAsync(request);
        }
        
        public void SetDateTimeLastSave(NPWSL.NeplanService.ExternalProject project) {
            base.Channel.SetDateTimeLastSave(project);
        }
        
        public System.Threading.Tasks.Task SetDateTimeLastSaveAsync(NPWSL.NeplanService.ExternalProject project) {
            return base.Channel.SetDateTimeLastSaveAsync(project);
        }
        
        public string GetResultSummary(NPWSL.NeplanService.ExternalProject project, string analysisType, System.DateTime simulationDateTime, int networkTypeGroup, string networkTypeGroupID) {
            return base.Channel.GetResultSummary(project, analysisType, simulationDateTime, networkTypeGroup, networkTypeGroupID);
        }
        
        public System.Threading.Tasks.Task<string> GetResultSummaryAsync(NPWSL.NeplanService.ExternalProject project, string analysisType, System.DateTime simulationDateTime, int networkTypeGroup, string networkTypeGroupID) {
            return base.Channel.GetResultSummaryAsync(project, analysisType, simulationDateTime, networkTypeGroup, networkTypeGroupID);
        }
        
        public string[] GetListResultSummary(NPWSL.NeplanService.ExternalProject project, string analysisType, System.DateTime simulationDateTime, int networkTypeGroup, string networkTypeGroupID) {
            return base.Channel.GetListResultSummary(project, analysisType, simulationDateTime, networkTypeGroup, networkTypeGroupID);
        }
        
        public System.Threading.Tasks.Task<string[]> GetListResultSummaryAsync(NPWSL.NeplanService.ExternalProject project, string analysisType, System.DateTime simulationDateTime, int networkTypeGroup, string networkTypeGroupID) {
            return base.Channel.GetListResultSummaryAsync(project, analysisType, simulationDateTime, networkTypeGroup, networkTypeGroupID);
        }
        
        public NPWSL.NeplanService.NeplanServiceElementResult[] GetAllElementResults(NPWSL.NeplanService.ExternalProject project, string analysisType) {
            return base.Channel.GetAllElementResults(project, analysisType);
        }
        
        public System.Threading.Tasks.Task<NPWSL.NeplanService.NeplanServiceElementResult[]> GetAllElementResultsAsync(NPWSL.NeplanService.ExternalProject project, string analysisType) {
            return base.Channel.GetAllElementResultsAsync(project, analysisType);
        }
        
        public string GetCalculationSettings(NPWSL.NeplanService.ExternalProject project, string analysisType) {
            return base.Channel.GetCalculationSettings(project, analysisType);
        }
        
        public System.Threading.Tasks.Task<string> GetCalculationSettingsAsync(NPWSL.NeplanService.ExternalProject project, string analysisType) {
            return base.Channel.GetCalculationSettingsAsync(project, analysisType);
        }
        
        public string GetResultElementByID(NPWSL.NeplanService.ExternalProject project, string elementID, int portNr, string analysisType, System.DateTime simulationDateTime) {
            return base.Channel.GetResultElementByID(project, elementID, portNr, analysisType, simulationDateTime);
        }
        
        public System.Threading.Tasks.Task<string> GetResultElementByIDAsync(NPWSL.NeplanService.ExternalProject project, string elementID, int portNr, string analysisType, System.DateTime simulationDateTime) {
            return base.Channel.GetResultElementByIDAsync(project, elementID, portNr, analysisType, simulationDateTime);
        }
        
        public NPWSL.NeplanService.NeplanServiceElementResult[] GetResultsElementsByID(NPWSL.NeplanService.ExternalProject project, string[] elementID, int portNr, string analysisType, System.DateTime simulationDateTime) {
            return base.Channel.GetResultsElementsByID(project, elementID, portNr, analysisType, simulationDateTime);
        }
        
        public System.Threading.Tasks.Task<NPWSL.NeplanService.NeplanServiceElementResult[]> GetResultsElementsByIDAsync(NPWSL.NeplanService.ExternalProject project, string[] elementID, int portNr, string analysisType, System.DateTime simulationDateTime) {
            return base.Channel.GetResultsElementsByIDAsync(project, elementID, portNr, analysisType, simulationDateTime);
        }
        
        public string GetResultElementByName(NPWSL.NeplanService.ExternalProject project, string elementName, string elementTypeName, int portNr, string analysisType, System.DateTime simulationDateTime) {
            return base.Channel.GetResultElementByName(project, elementName, elementTypeName, portNr, analysisType, simulationDateTime);
        }
        
        public System.Threading.Tasks.Task<string> GetResultElementByNameAsync(NPWSL.NeplanService.ExternalProject project, string elementName, string elementTypeName, int portNr, string analysisType, System.DateTime simulationDateTime) {
            return base.Channel.GetResultElementByNameAsync(project, elementName, elementTypeName, portNr, analysisType, simulationDateTime);
        }
        
        public NPWSL.NeplanService.AnalysisReturnInfo AnalyseVariantWithAnalysisSettings(NPWSL.NeplanService.ExternalProject project, string analysisRefenceID, string analysisModule, string calcNameID, string analysisMethode, string conditions, string analysisLoadOptionXML, NPWSL.NeplanService.AnalysisParameterSettings settings) {
            return base.Channel.AnalyseVariantWithAnalysisSettings(project, analysisRefenceID, analysisModule, calcNameID, analysisMethode, conditions, analysisLoadOptionXML, settings);
        }
        
        public System.Threading.Tasks.Task<NPWSL.NeplanService.AnalysisReturnInfo> AnalyseVariantWithAnalysisSettingsAsync(NPWSL.NeplanService.ExternalProject project, string analysisRefenceID, string analysisModule, string calcNameID, string analysisMethode, string conditions, string analysisLoadOptionXML, NPWSL.NeplanService.AnalysisParameterSettings settings) {
            return base.Channel.AnalyseVariantWithAnalysisSettingsAsync(project, analysisRefenceID, analysisModule, calcNameID, analysisMethode, conditions, analysisLoadOptionXML, settings);
        }
        
        public NPWSL.NeplanService.AnalysisReturnInfo AnalyseVariant(NPWSL.NeplanService.ExternalProject project, string analysisRefenceID, string analysisModule, string calcNameID, string analysisMethode, string conditions, string analysisLoadOptionXML) {
            return base.Channel.AnalyseVariant(project, analysisRefenceID, analysisModule, calcNameID, analysisMethode, conditions, analysisLoadOptionXML);
        }
        
        public System.Threading.Tasks.Task<NPWSL.NeplanService.AnalysisReturnInfo> AnalyseVariantAsync(NPWSL.NeplanService.ExternalProject project, string analysisRefenceID, string analysisModule, string calcNameID, string analysisMethode, string conditions, string analysisLoadOptionXML) {
            return base.Channel.AnalyseVariantAsync(project, analysisRefenceID, analysisModule, calcNameID, analysisMethode, conditions, analysisLoadOptionXML);
        }
        
        public bool IsAnalysisDone(string analysisRefenceID) {
            return base.Channel.IsAnalysisDone(analysisRefenceID);
        }
        
        public System.Threading.Tasks.Task<bool> IsAnalysisDoneAsync(string analysisRefenceID) {
            return base.Channel.IsAnalysisDoneAsync(analysisRefenceID);
        }
        
        public NPWSL.NeplanService.AnalysisReturnInfo AnalyseWithListFileWithoutSaving(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement) {
            return base.Channel.AnalyseWithListFileWithoutSaving(uploadName, analysisModule, copySettingsFromProjectName, fromTime, toTime, timeIncrement);
        }
        
        public System.Threading.Tasks.Task<NPWSL.NeplanService.AnalysisReturnInfo> AnalyseWithListFileWithoutSavingAsync(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement) {
            return base.Channel.AnalyseWithListFileWithoutSavingAsync(uploadName, analysisModule, copySettingsFromProjectName, fromTime, toTime, timeIncrement);
        }
        
        public NPWSL.NeplanService.AnalysisReturnInfo AnalyseWithProjectFileWithoutSaving(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement) {
            return base.Channel.AnalyseWithProjectFileWithoutSaving(uploadName, analysisModule, copySettingsFromProjectName, fromTime, toTime, timeIncrement);
        }
        
        public System.Threading.Tasks.Task<NPWSL.NeplanService.AnalysisReturnInfo> AnalyseWithProjectFileWithoutSavingAsync(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement) {
            return base.Channel.AnalyseWithProjectFileWithoutSavingAsync(uploadName, analysisModule, copySettingsFromProjectName, fromTime, toTime, timeIncrement);
        }
        
        public NPWSL.NeplanService.AnalysisReturnInfo AnalyseWithCDEFileWithoutSaving(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement) {
            return base.Channel.AnalyseWithCDEFileWithoutSaving(uploadName, analysisModule, copySettingsFromProjectName, fromTime, toTime, timeIncrement);
        }
        
        public System.Threading.Tasks.Task<NPWSL.NeplanService.AnalysisReturnInfo> AnalyseWithCDEFileWithoutSavingAsync(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement) {
            return base.Channel.AnalyseWithCDEFileWithoutSavingAsync(uploadName, analysisModule, copySettingsFromProjectName, fromTime, toTime, timeIncrement);
        }
        
        public NPWSL.NeplanService.AnalysisReturnInfo DoAnalysisFromFiles(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement) {
            return base.Channel.DoAnalysisFromFiles(uploadName, analysisModule, copySettingsFromProjectName, fromTime, toTime, timeIncrement);
        }
        
        public System.Threading.Tasks.Task<NPWSL.NeplanService.AnalysisReturnInfo> DoAnalysisFromFilesAsync(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement) {
            return base.Channel.DoAnalysisFromFilesAsync(uploadName, analysisModule, copySettingsFromProjectName, fromTime, toTime, timeIncrement);
        }
        
        public NPWSL.NeplanService.AnalysisReturnInfo EnergyCalculationFromFiles(string uploadName, string fromTime, string toTime, int timeIncrement, string copySettingsFromProjectName) {
            return base.Channel.EnergyCalculationFromFiles(uploadName, fromTime, toTime, timeIncrement, copySettingsFromProjectName);
        }
        
        public System.Threading.Tasks.Task<NPWSL.NeplanService.AnalysisReturnInfo> EnergyCalculationFromFilesAsync(string uploadName, string fromTime, string toTime, int timeIncrement, string copySettingsFromProjectName) {
            return base.Channel.EnergyCalculationFromFilesAsync(uploadName, fromTime, toTime, timeIncrement, copySettingsFromProjectName);
        }
        
        public NPWSL.NeplanService.AnalysisReturnInfo LoadAllocationFromDB(string projectName, string measurementDefinitionName, string fromTime, string toTime, int timeIncrement, NPWSL.NeplanService.AnalysisParameterSettings settings) {
            return base.Channel.LoadAllocationFromDB(projectName, measurementDefinitionName, fromTime, toTime, timeIncrement, settings);
        }
        
        public System.Threading.Tasks.Task<NPWSL.NeplanService.AnalysisReturnInfo> LoadAllocationFromDBAsync(string projectName, string measurementDefinitionName, string fromTime, string toTime, int timeIncrement, NPWSL.NeplanService.AnalysisParameterSettings settings) {
            return base.Channel.LoadAllocationFromDBAsync(projectName, measurementDefinitionName, fromTime, toTime, timeIncrement, settings);
        }
        
        public NPWSL.NeplanService.AnalysisReturnInfo LoadAllocationFromMeasurmentFileAndProjectName(string uploadedMeasurementFileName, string projectName, string fromTime, string toTime, int timeIncrement, NPWSL.NeplanService.AnalysisParameterSettings settings) {
            return base.Channel.LoadAllocationFromMeasurmentFileAndProjectName(uploadedMeasurementFileName, projectName, fromTime, toTime, timeIncrement, settings);
        }
        
        public System.Threading.Tasks.Task<NPWSL.NeplanService.AnalysisReturnInfo> LoadAllocationFromMeasurmentFileAndProjectNameAsync(string uploadedMeasurementFileName, string projectName, string fromTime, string toTime, int timeIncrement, NPWSL.NeplanService.AnalysisParameterSettings settings) {
            return base.Channel.LoadAllocationFromMeasurmentFileAndProjectNameAsync(uploadedMeasurementFileName, projectName, fromTime, toTime, timeIncrement, settings);
        }
        
        public NPWSL.NeplanService.AnalysisReturnInfo LoadAllocationFromMeasurmentFile(NPWSL.NeplanService.ExternalProject project, string uploadedMeasurementFileName, string fromTime, string toTime, int timeIncrement, NPWSL.NeplanService.AnalysisParameterSettings settings) {
            return base.Channel.LoadAllocationFromMeasurmentFile(project, uploadedMeasurementFileName, fromTime, toTime, timeIncrement, settings);
        }
        
        public System.Threading.Tasks.Task<NPWSL.NeplanService.AnalysisReturnInfo> LoadAllocationFromMeasurmentFileAsync(NPWSL.NeplanService.ExternalProject project, string uploadedMeasurementFileName, string fromTime, string toTime, int timeIncrement, NPWSL.NeplanService.AnalysisParameterSettings settings) {
            return base.Channel.LoadAllocationFromMeasurmentFileAsync(project, uploadedMeasurementFileName, fromTime, toTime, timeIncrement, settings);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        NPWSL.NeplanService.ImportFromListFileAndDoLoadAllocationResponse NPWSL.NeplanService.NeplanService.ImportFromListFileAndDoLoadAllocation(NPWSL.NeplanService.ImportFromListFileAndDoLoadAllocationRequest request) {
            return base.Channel.ImportFromListFileAndDoLoadAllocation(request);
        }
        
        public NPWSL.NeplanService.ExternalProject ImportFromListFileAndDoLoadAllocation(string uploadName, string projectName, NPWSL.NeplanService.AnalysisParameterSettings settings, out NPWSL.NeplanService.AnalysisReturnInfo analysisReturnInfo) {
            NPWSL.NeplanService.ImportFromListFileAndDoLoadAllocationRequest inValue = new NPWSL.NeplanService.ImportFromListFileAndDoLoadAllocationRequest();
            inValue.uploadName = uploadName;
            inValue.projectName = projectName;
            inValue.settings = settings;
            NPWSL.NeplanService.ImportFromListFileAndDoLoadAllocationResponse retVal = ((NPWSL.NeplanService.NeplanService)(this)).ImportFromListFileAndDoLoadAllocation(inValue);
            analysisReturnInfo = retVal.analysisReturnInfo;
            return retVal.ImportFromListFileAndDoLoadAllocationResult;
        }
        
        public System.Threading.Tasks.Task<NPWSL.NeplanService.ImportFromListFileAndDoLoadAllocationResponse> ImportFromListFileAndDoLoadAllocationAsync(NPWSL.NeplanService.ImportFromListFileAndDoLoadAllocationRequest request) {
            return base.Channel.ImportFromListFileAndDoLoadAllocationAsync(request);
        }
        
        public bool DeleteAnaylsisLogFile(string fileName) {
            return base.Channel.DeleteAnaylsisLogFile(fileName);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAnaylsisLogFileAsync(string fileName) {
            return base.Channel.DeleteAnaylsisLogFileAsync(fileName);
        }
        
        public bool DeleteAnalysisResultFile(string fileName) {
            return base.Channel.DeleteAnalysisResultFile(fileName);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAnalysisResultFileAsync(string fileName) {
            return base.Channel.DeleteAnalysisResultFileAsync(fileName);
        }
        
        public bool DeleteProject(NPWSL.NeplanService.ExternalProject project) {
            return base.Channel.DeleteProject(project);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteProjectAsync(NPWSL.NeplanService.ExternalProject project) {
            return base.Channel.DeleteProjectAsync(project);
        }
        
        public bool MarkedProjectAsDeleted(NPWSL.NeplanService.ExternalProject project) {
            return base.Channel.MarkedProjectAsDeleted(project);
        }
        
        public System.Threading.Tasks.Task<bool> MarkedProjectAsDeletedAsync(NPWSL.NeplanService.ExternalProject project) {
            return base.Channel.MarkedProjectAsDeletedAsync(project);
        }
        
        public int ImportFromFile(string uploadName, string projectName, bool withGraphic, string copySettingsFromProjectName, bool merge, bool mergeOnNewDiagram) {
            return base.Channel.ImportFromFile(uploadName, projectName, withGraphic, copySettingsFromProjectName, merge, mergeOnNewDiagram);
        }
        
        public System.Threading.Tasks.Task<int> ImportFromFileAsync(string uploadName, string projectName, bool withGraphic, string copySettingsFromProjectName, bool merge, bool mergeOnNewDiagram) {
            return base.Channel.ImportFromFileAsync(uploadName, projectName, withGraphic, copySettingsFromProjectName, merge, mergeOnNewDiagram);
        }
        
        public bool AddFeederFromList(NPWSL.NeplanService.ExternalProject project, NPWSL.NeplanService.ImportFeederItem[] feederList) {
            return base.Channel.AddFeederFromList(project, feederList);
        }
        
        public System.Threading.Tasks.Task<bool> AddFeederFromListAsync(NPWSL.NeplanService.ExternalProject project, NPWSL.NeplanService.ImportFeederItem[] feederList) {
            return base.Channel.AddFeederFromListAsync(project, feederList);
        }
        
        public NPWSL.NeplanService.ExternalProject ImportFromList(NPWSL.NeplanService.ImportElementItem[] listElements, string projectName, string copySettingsFromProjectName) {
            return base.Channel.ImportFromList(listElements, projectName, copySettingsFromProjectName);
        }
        
        public System.Threading.Tasks.Task<NPWSL.NeplanService.ExternalProject> ImportFromListAsync(NPWSL.NeplanService.ImportElementItem[] listElements, string projectName, string copySettingsFromProjectName) {
            return base.Channel.ImportFromListAsync(listElements, projectName, copySettingsFromProjectName);
        }
        
        public NPWSL.NeplanService.ExternalProject ImportFromListFile(string uploadName, string projectName, string copySettingsFromProjectName) {
            return base.Channel.ImportFromListFile(uploadName, projectName, copySettingsFromProjectName);
        }
        
        public System.Threading.Tasks.Task<NPWSL.NeplanService.ExternalProject> ImportFromListFileAsync(string uploadName, string projectName, string copySettingsFromProjectName) {
            return base.Channel.ImportFromListFileAsync(uploadName, projectName, copySettingsFromProjectName);
        }
        
        public NPWSL.NeplanService.ExternalProject MergeProjectFromListFile(string uploadName, string projectToMerge, bool mergeOnNewDiagram) {
            return base.Channel.MergeProjectFromListFile(uploadName, projectToMerge, mergeOnNewDiagram);
        }
        
        public System.Threading.Tasks.Task<NPWSL.NeplanService.ExternalProject> MergeProjectFromListFileAsync(string uploadName, string projectToMerge, bool mergeOnNewDiagram) {
            return base.Channel.MergeProjectFromListFileAsync(uploadName, projectToMerge, mergeOnNewDiagram);
        }
        
        public NPWSL.NeplanService.ExternalProject ImportFromCDE(string path1, string path2, string path3, string copySettingsFromProjectName, bool withGraphic) {
            return base.Channel.ImportFromCDE(path1, path2, path3, copySettingsFromProjectName, withGraphic);
        }
        
        public System.Threading.Tasks.Task<NPWSL.NeplanService.ExternalProject> ImportFromCDEAsync(string path1, string path2, string path3, string copySettingsFromProjectName, bool withGraphic) {
            return base.Channel.ImportFromCDEAsync(path1, path2, path3, copySettingsFromProjectName, withGraphic);
        }
        
        public NPWSL.NeplanService.ExternalProject ImportFromCDEFiles(string cdeFilename, string ndbFilename, string xmlFilename, string copySettingsFromProjectName, bool withGraphic) {
            return base.Channel.ImportFromCDEFiles(cdeFilename, ndbFilename, xmlFilename, copySettingsFromProjectName, withGraphic);
        }
        
        public System.Threading.Tasks.Task<NPWSL.NeplanService.ExternalProject> ImportFromCDEFilesAsync(string cdeFilename, string ndbFilename, string xmlFilename, string copySettingsFromProjectName, bool withGraphic) {
            return base.Channel.ImportFromCDEFilesAsync(cdeFilename, ndbFilename, xmlFilename, copySettingsFromProjectName, withGraphic);
        }
        
        public NPWSL.NeplanService.ExternalProject ImportFromCDEZipFile(string zipFile, string copySettingsFromProjectName, bool withGraphic) {
            return base.Channel.ImportFromCDEZipFile(zipFile, copySettingsFromProjectName, withGraphic);
        }
        
        public System.Threading.Tasks.Task<NPWSL.NeplanService.ExternalProject> ImportFromCDEZipFileAsync(string zipFile, string copySettingsFromProjectName, bool withGraphic) {
            return base.Channel.ImportFromCDEZipFileAsync(zipFile, copySettingsFromProjectName, withGraphic);
        }
        
        public NPWSL.NeplanService.ExternalProject ImportFromPSSEFiles(string rawFilename, string seqFilename, string dyrFilename, string drwFilename, int psseVersion, bool ukr, bool withStations, bool withBreakers, int charNumStations, int nameRule, int lineQuant, string copySettingsFromProjectName) {
            return base.Channel.ImportFromPSSEFiles(rawFilename, seqFilename, dyrFilename, drwFilename, psseVersion, ukr, withStations, withBreakers, charNumStations, nameRule, lineQuant, copySettingsFromProjectName);
        }
        
        public System.Threading.Tasks.Task<NPWSL.NeplanService.ExternalProject> ImportFromPSSEFilesAsync(string rawFilename, string seqFilename, string dyrFilename, string drwFilename, int psseVersion, bool ukr, bool withStations, bool withBreakers, int charNumStations, int nameRule, int lineQuant, string copySettingsFromProjectName) {
            return base.Channel.ImportFromPSSEFilesAsync(rawFilename, seqFilename, dyrFilename, drwFilename, psseVersion, ukr, withStations, withBreakers, charNumStations, nameRule, lineQuant, copySettingsFromProjectName);
        }
        
        public NPWSL.NeplanService.ExternalProject ImportFromPSSEZipFile(string zipFile, int psseVersion, bool ukr, bool withStations, bool withBreakers, int charNumStations, int nameRule, int lineQuant, string copySettingsFromProjectName) {
            return base.Channel.ImportFromPSSEZipFile(zipFile, psseVersion, ukr, withStations, withBreakers, charNumStations, nameRule, lineQuant, copySettingsFromProjectName);
        }
        
        public System.Threading.Tasks.Task<NPWSL.NeplanService.ExternalProject> ImportFromPSSEZipFileAsync(string zipFile, int psseVersion, bool ukr, bool withStations, bool withBreakers, int charNumStations, int nameRule, int lineQuant, string copySettingsFromProjectName) {
            return base.Channel.ImportFromPSSEZipFileAsync(zipFile, psseVersion, ukr, withStations, withBreakers, charNumStations, nameRule, lineQuant, copySettingsFromProjectName);
        }
        
        public int ImportFromShapeFile(string path, string fileName) {
            return base.Channel.ImportFromShapeFile(path, fileName);
        }
        
        public System.Threading.Tasks.Task<int> ImportFromShapeFileAsync(string path, string fileName) {
            return base.Channel.ImportFromShapeFileAsync(path, fileName);
        }
        
        public bool ImportFromNDB(NPWSL.NeplanService.ExternalProject project, string uploadName, string origFileName, string mediumType) {
            return base.Channel.ImportFromNDB(project, uploadName, origFileName, mediumType);
        }
        
        public System.Threading.Tasks.Task<bool> ImportFromNDBAsync(NPWSL.NeplanService.ExternalProject project, string uploadName, string origFileName, string mediumType) {
            return base.Channel.ImportFromNDBAsync(project, uploadName, origFileName, mediumType);
        }
        
        public bool ImportMeasuredDataFromXMlFile(NPWSL.NeplanService.ExternalProject project, string uploadName, string definitionName) {
            return base.Channel.ImportMeasuredDataFromXMlFile(project, uploadName, definitionName);
        }
        
        public System.Threading.Tasks.Task<bool> ImportMeasuredDataFromXMlFileAsync(NPWSL.NeplanService.ExternalProject project, string uploadName, string definitionName) {
            return base.Channel.ImportMeasuredDataFromXMlFileAsync(project, uploadName, definitionName);
        }
        
        public System.IO.Stream ExportProjectToNEP360(string projectName) {
            return base.Channel.ExportProjectToNEP360(projectName);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> ExportProjectToNEP360Async(string projectName) {
            return base.Channel.ExportProjectToNEP360Async(projectName);
        }
        
        public void WriteMessageToLogFile(NPWSL.NeplanService.ExternalProject project, string text, string logLvl) {
            base.Channel.WriteMessageToLogFile(project, text, logLvl);
        }
        
        public System.Threading.Tasks.Task WriteMessageToLogFileAsync(NPWSL.NeplanService.ExternalProject project, string text, string logLvl) {
            return base.Channel.WriteMessageToLogFileAsync(project, text, logLvl);
        }
        
        public bool DeleteUserLogFile() {
            return base.Channel.DeleteUserLogFile();
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserLogFileAsync() {
            return base.Channel.DeleteUserLogFileAsync();
        }
        
        public string GetLogFileAsString() {
            return base.Channel.GetLogFileAsString();
        }
        
        public System.Threading.Tasks.Task<string> GetLogFileAsStringAsync() {
            return base.Channel.GetLogFileAsStringAsync();
        }
        
        public string[] GetLogFileAsList() {
            return base.Channel.GetLogFileAsList();
        }
        
        public System.Threading.Tasks.Task<string[]> GetLogFileAsListAsync() {
            return base.Channel.GetLogFileAsListAsync();
        }
        
        public string XMLUpload(System.IO.Stream stream) {
            return base.Channel.XMLUpload(stream);
        }
        
        public System.Threading.Tasks.Task<string> XMLUploadAsync(System.IO.Stream stream) {
            return base.Channel.XMLUploadAsync(stream);
        }
        
        public string CDEUpload(System.IO.Stream stream) {
            return base.Channel.CDEUpload(stream);
        }
        
        public System.Threading.Tasks.Task<string> CDEUploadAsync(System.IO.Stream stream) {
            return base.Channel.CDEUploadAsync(stream);
        }
        
        public string NDBUpload(System.IO.Stream stream) {
            return base.Channel.NDBUpload(stream);
        }
        
        public System.Threading.Tasks.Task<string> NDBUploadAsync(System.IO.Stream stream) {
            return base.Channel.NDBUploadAsync(stream);
        }
        
        public string Nep360Upload(System.IO.Stream stream) {
            return base.Channel.Nep360Upload(stream);
        }
        
        public System.Threading.Tasks.Task<string> Nep360UploadAsync(System.IO.Stream stream) {
            return base.Channel.Nep360UploadAsync(stream);
        }
        
        public string ZipUpload(System.IO.Stream stream) {
            return base.Channel.ZipUpload(stream);
        }
        
        public System.Threading.Tasks.Task<string> ZipUploadAsync(System.IO.Stream stream) {
            return base.Channel.ZipUploadAsync(stream);
        }
        
        public string NepMeasUpload(System.IO.Stream stream) {
            return base.Channel.NepMeasUpload(stream);
        }
        
        public System.Threading.Tasks.Task<string> NepMeasUploadAsync(System.IO.Stream stream) {
            return base.Channel.NepMeasUploadAsync(stream);
        }
        
        public System.IO.Stream GetUserLogFile() {
            return base.Channel.GetUserLogFile();
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> GetUserLogFileAsync() {
            return base.Channel.GetUserLogFileAsync();
        }
        
        public System.IO.Stream GetAnaylsisLogFile(string fileName) {
            return base.Channel.GetAnaylsisLogFile(fileName);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> GetAnaylsisLogFileAsync(string fileName) {
            return base.Channel.GetAnaylsisLogFileAsync(fileName);
        }
        
        public System.IO.Stream GetAnalysisResultFile(string fileName) {
            return base.Channel.GetAnalysisResultFile(fileName);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> GetAnalysisResultFileAsync(string fileName) {
            return base.Channel.GetAnalysisResultFileAsync(fileName);
        }
        
        public string createDailyBackup(bool isAzure, string code) {
            return base.Channel.createDailyBackup(isAzure, code);
        }
        
        public System.Threading.Tasks.Task<string> createDailyBackupAsync(bool isAzure, string code) {
            return base.Channel.createDailyBackupAsync(isAzure, code);
        }
        
        public string removeAllExpiredProjects(string code) {
            return base.Channel.removeAllExpiredProjects(code);
        }
        
        public System.Threading.Tasks.Task<string> removeAllExpiredProjectsAsync(string code) {
            return base.Channel.removeAllExpiredProjectsAsync(code);
        }
        
        public System.Collections.Generic.KeyValuePair<string, string>[] GetNamesOfElementsByType(string projectName, string elementType) {
            return base.Channel.GetNamesOfElementsByType(projectName, elementType);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.KeyValuePair<string, string>[]> GetNamesOfElementsByTypeAsync(string projectName, string elementType) {
            return base.Channel.GetNamesOfElementsByTypeAsync(projectName, elementType);
        }
        
        public System.Collections.Generic.KeyValuePair<string, NPWSL.NeplanService.NeplanServiceConnection_info>[] FindSwitchStatusOfElements(string projectName, string[] GenLoadNames) {
            return base.Channel.FindSwitchStatusOfElements(projectName, GenLoadNames);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.KeyValuePair<string, NPWSL.NeplanService.NeplanServiceConnection_info>[]> FindSwitchStatusOfElementsAsync(string projectName, string[] GenLoadNames) {
            return base.Channel.FindSwitchStatusOfElementsAsync(projectName, GenLoadNames);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        NPWSL.NeplanService.Find_Voltage_Level_of_One_Port_ElementResponse NPWSL.NeplanService.NeplanService.Find_Voltage_Level_of_One_Port_Element(NPWSL.NeplanService.Find_Voltage_Level_of_One_Port_ElementRequest request) {
            return base.Channel.Find_Voltage_Level_of_One_Port_Element(request);
        }
        
        public bool Find_Voltage_Level_of_One_Port_Element(string projectName, string elementName, ref double Voltage) {
            NPWSL.NeplanService.Find_Voltage_Level_of_One_Port_ElementRequest inValue = new NPWSL.NeplanService.Find_Voltage_Level_of_One_Port_ElementRequest();
            inValue.projectName = projectName;
            inValue.elementName = elementName;
            inValue.Voltage = Voltage;
            NPWSL.NeplanService.Find_Voltage_Level_of_One_Port_ElementResponse retVal = ((NPWSL.NeplanService.NeplanService)(this)).Find_Voltage_Level_of_One_Port_Element(inValue);
            Voltage = retVal.Voltage;
            return retVal.Find_Voltage_Level_of_One_Port_ElementResult;
        }
        
        public System.Threading.Tasks.Task<NPWSL.NeplanService.Find_Voltage_Level_of_One_Port_ElementResponse> Find_Voltage_Level_of_One_Port_ElementAsync(NPWSL.NeplanService.Find_Voltage_Level_of_One_Port_ElementRequest request) {
            return base.Channel.Find_Voltage_Level_of_One_Port_ElementAsync(request);
        }
        
        public bool ChangeSwitchStatusOfElements(string projectName, string GenLoadName, bool connectionstatus) {
            return base.Channel.ChangeSwitchStatusOfElements(projectName, GenLoadName, connectionstatus);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeSwitchStatusOfElementsAsync(string projectName, string GenLoadName, bool connectionstatus) {
            return base.Channel.ChangeSwitchStatusOfElementsAsync(projectName, GenLoadName, connectionstatus);
        }
        
        public NPWSL.NeplanService.NeplanServiceLoadGeneration_info[] GetPQValuesLdSmAsm(string projectName) {
            return base.Channel.GetPQValuesLdSmAsm(projectName);
        }
        
        public System.Threading.Tasks.Task<NPWSL.NeplanService.NeplanServiceLoadGeneration_info[]> GetPQValuesLdSmAsmAsync(string projectName) {
            return base.Channel.GetPQValuesLdSmAsmAsync(projectName);
        }
        
        public bool SetPowerofLoadsGenerators(string projectname, NPWSL.NeplanService.NeplanServiceLoadGeneration_info[] loadgens) {
            return base.Channel.SetPowerofLoadsGenerators(projectname, loadgens);
        }
        
        public System.Threading.Tasks.Task<bool> SetPowerofLoadsGeneratorsAsync(string projectname, NPWSL.NeplanService.NeplanServiceLoadGeneration_info[] loadgens) {
            return base.Channel.SetPowerofLoadsGeneratorsAsync(projectname, loadgens);
        }
        
        public bool ChangeSwitchStatusOfElementList(string projectName, System.Guid[] elemids, bool connectionstatus) {
            return base.Channel.ChangeSwitchStatusOfElementList(projectName, elemids, connectionstatus);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeSwitchStatusOfElementListAsync(string projectName, System.Guid[] elemids, bool connectionstatus) {
            return base.Channel.ChangeSwitchStatusOfElementListAsync(projectName, elemids, connectionstatus);
        }
        
        public NPWSL.NeplanService.NeplanDomainServiceImportReturnInfo ImportIEC_62325_451_2FilesAndDoCIMExport(string folderpath, System.Guid variantID, string username, bool onlyOneEQ, string mAS) {
            return base.Channel.ImportIEC_62325_451_2FilesAndDoCIMExport(folderpath, variantID, username, onlyOneEQ, mAS);
        }
        
        public System.Threading.Tasks.Task<NPWSL.NeplanService.NeplanDomainServiceImportReturnInfo> ImportIEC_62325_451_2FilesAndDoCIMExportAsync(string folderpath, System.Guid variantID, string username, bool onlyOneEQ, string mAS) {
            return base.Channel.ImportIEC_62325_451_2FilesAndDoCIMExportAsync(folderpath, variantID, username, onlyOneEQ, mAS);
        }
        
        public System.Guid[] GetFeederIDByName(string ProjectName, string VariantName, string[] FeederNames) {
            return base.Channel.GetFeederIDByName(ProjectName, VariantName, FeederNames);
        }
        
        public System.Threading.Tasks.Task<System.Guid[]> GetFeederIDByNameAsync(string ProjectName, string VariantName, string[] FeederNames) {
            return base.Channel.GetFeederIDByNameAsync(ProjectName, VariantName, FeederNames);
        }
    }
}

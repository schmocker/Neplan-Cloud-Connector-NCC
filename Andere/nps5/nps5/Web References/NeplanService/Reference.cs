//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace nps5.NeplanService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'EndpointReference' from namespace 'http://www.w3.org/2005/08/addressing' was not handled.
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WSHttpBinding_NeplanService", Namespace="http://tempuri.org/")]
    public partial class NeplanService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CreateProjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLogOnUrlWithProjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLogOnUrlOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLogOnSessionIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertNodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertNodeWithoutGraphicOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertBusbarOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertLineOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertLineByNodeIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertLineAsymOperationCompleted;
        
        private System.Threading.SendOrPostCallback Insert2PortElementOperationCompleted;
        
        private System.Threading.SendOrPostCallback Insert1PortElementOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertProtectionElementOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertFeederOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertAreaOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertZoneOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertMeasurementOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertMeasurementByElementIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertDiagramOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertGraphicLayerOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddSubLoadOperationCompleted;
        
        private System.Threading.SendOrPostCallback AssignPowerTo1PortOperationCompleted;
        
        private System.Threading.SendOrPostCallback AssignPowerTo1PortByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SwitchElementAtPortByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SwitchElementAtPortOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetElementDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetElementDataByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetElementDataByNameandTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetElementDataByIDandTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetElementAttributeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetElementAttributeByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetElementAttributeByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetElementAttributeByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddReadAllRoleToProjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddVoltageLevelOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDiagramMinValuesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetLineStyleOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDefaultValuesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDiagramParameterAttributeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetCalcParameterAttributeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetGraphicLayerWorldCoordinatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddNodesFromListOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddElementsFromListOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddSubLoadsFromListOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDateTimeLastSaveOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetResultSummaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListResultSummaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllElementResultsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCalculationSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetResultElementByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetResultsElementsByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetResultElementByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback AnalyseVariantWithAnalysisSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AnalyseVariantOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsAnalysisDoneOperationCompleted;
        
        private System.Threading.SendOrPostCallback AnalyseWithListFileWithoutSavingOperationCompleted;
        
        private System.Threading.SendOrPostCallback AnalyseWithProjectFileWithoutSavingOperationCompleted;
        
        private System.Threading.SendOrPostCallback AnalyseWithCDEFileWithoutSavingOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoAnalysisFromFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnergyCalculationFromFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadAllocationFromDBOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadAllocationFromMeasurmentFileAndProjectNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadAllocationFromMeasurmentFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportFromListFileAndDoLoadAllocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteAnaylsisLogFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteAnalysisResultFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteProjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback MarkedProjectAsDeletedOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportFromFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddFeederFromListOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportFromListOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportFromListFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback MergeProjectFromListFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportFromCDEOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportFromCDEFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportFromCDEZipFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportFromPSSEFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportFromPSSEZipFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportFromShapeFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportFromNDBOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportMeasuredDataFromXMlFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExportProjectToNEP360OperationCompleted;
        
        private System.Threading.SendOrPostCallback WriteMessageToLogFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteUserLogFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLogFileAsStringOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLogFileAsListOperationCompleted;
        
        private System.Threading.SendOrPostCallback XMLUploadOperationCompleted;
        
        private System.Threading.SendOrPostCallback CDEUploadOperationCompleted;
        
        private System.Threading.SendOrPostCallback NDBUploadOperationCompleted;
        
        private System.Threading.SendOrPostCallback Nep360UploadOperationCompleted;
        
        private System.Threading.SendOrPostCallback ZipUploadOperationCompleted;
        
        private System.Threading.SendOrPostCallback NepMeasUploadOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserLogFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAnaylsisLogFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAnalysisResultFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback createDailyBackupOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeAllExpiredProjectsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNamesOfElementsByTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback FindSwitchStatusOfElementsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Find_Voltage_Level_of_One_Port_ElementOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeSwitchStatusOfElementsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPQValuesLdSmAsmOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetPowerofLoadsGeneratorsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeSwitchStatusOfElementListOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportIEC_62325_451_2FilesAndDoCIMExportOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFeederIDByNameOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public NeplanService() {
            this.SoapVersion = System.Web.Services.Protocols.SoapProtocolVersion.Soap12;
            this.Url = global::nps5.Properties.Settings.Default.nps5_NeplanService_NeplanService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CreateProjectCompletedEventHandler CreateProjectCompleted;
        
        /// <remarks/>
        public event GetProjectCompletedEventHandler GetProjectCompleted;
        
        /// <remarks/>
        public event GetLogOnUrlWithProjectCompletedEventHandler GetLogOnUrlWithProjectCompleted;
        
        /// <remarks/>
        public event GetLogOnUrlCompletedEventHandler GetLogOnUrlCompleted;
        
        /// <remarks/>
        public event GetLogOnSessionIDCompletedEventHandler GetLogOnSessionIDCompleted;
        
        /// <remarks/>
        public event InsertNodeCompletedEventHandler InsertNodeCompleted;
        
        /// <remarks/>
        public event InsertNodeWithoutGraphicCompletedEventHandler InsertNodeWithoutGraphicCompleted;
        
        /// <remarks/>
        public event InsertBusbarCompletedEventHandler InsertBusbarCompleted;
        
        /// <remarks/>
        public event InsertLineCompletedEventHandler InsertLineCompleted;
        
        /// <remarks/>
        public event InsertLineByNodeIDCompletedEventHandler InsertLineByNodeIDCompleted;
        
        /// <remarks/>
        public event InsertLineAsymCompletedEventHandler InsertLineAsymCompleted;
        
        /// <remarks/>
        public event Insert2PortElementCompletedEventHandler Insert2PortElementCompleted;
        
        /// <remarks/>
        public event Insert1PortElementCompletedEventHandler Insert1PortElementCompleted;
        
        /// <remarks/>
        public event InsertProtectionElementCompletedEventHandler InsertProtectionElementCompleted;
        
        /// <remarks/>
        public event InsertFeederCompletedEventHandler InsertFeederCompleted;
        
        /// <remarks/>
        public event InsertAreaCompletedEventHandler InsertAreaCompleted;
        
        /// <remarks/>
        public event InsertZoneCompletedEventHandler InsertZoneCompleted;
        
        /// <remarks/>
        public event InsertMeasurementCompletedEventHandler InsertMeasurementCompleted;
        
        /// <remarks/>
        public event InsertMeasurementByElementIDCompletedEventHandler InsertMeasurementByElementIDCompleted;
        
        /// <remarks/>
        public event InsertDiagramCompletedEventHandler InsertDiagramCompleted;
        
        /// <remarks/>
        public event InsertGraphicLayerCompletedEventHandler InsertGraphicLayerCompleted;
        
        /// <remarks/>
        public event AddSubLoadCompletedEventHandler AddSubLoadCompleted;
        
        /// <remarks/>
        public event AssignPowerTo1PortCompletedEventHandler AssignPowerTo1PortCompleted;
        
        /// <remarks/>
        public event AssignPowerTo1PortByIDCompletedEventHandler AssignPowerTo1PortByIDCompleted;
        
        /// <remarks/>
        public event SwitchElementAtPortByIDCompletedEventHandler SwitchElementAtPortByIDCompleted;
        
        /// <remarks/>
        public event SwitchElementAtPortCompletedEventHandler SwitchElementAtPortCompleted;
        
        /// <remarks/>
        public event SetElementDataCompletedEventHandler SetElementDataCompleted;
        
        /// <remarks/>
        public event SetElementDataByIDCompletedEventHandler SetElementDataByIDCompleted;
        
        /// <remarks/>
        public event GetElementDataByNameandTypeCompletedEventHandler GetElementDataByNameandTypeCompleted;
        
        /// <remarks/>
        public event GetElementDataByIDandTypeCompletedEventHandler GetElementDataByIDandTypeCompleted;
        
        /// <remarks/>
        public event SetElementAttributeCompletedEventHandler SetElementAttributeCompleted;
        
        /// <remarks/>
        public event SetElementAttributeByIDCompletedEventHandler SetElementAttributeByIDCompleted;
        
        /// <remarks/>
        public event GetElementAttributeByIDCompletedEventHandler GetElementAttributeByIDCompleted;
        
        /// <remarks/>
        public event GetElementAttributeByNameCompletedEventHandler GetElementAttributeByNameCompleted;
        
        /// <remarks/>
        public event AddReadAllRoleToProjectCompletedEventHandler AddReadAllRoleToProjectCompleted;
        
        /// <remarks/>
        public event AddVoltageLevelCompletedEventHandler AddVoltageLevelCompleted;
        
        /// <remarks/>
        public event SetDiagramMinValuesCompletedEventHandler SetDiagramMinValuesCompleted;
        
        /// <remarks/>
        public event SetLineStyleCompletedEventHandler SetLineStyleCompleted;
        
        /// <remarks/>
        public event SetDefaultValuesCompletedEventHandler SetDefaultValuesCompleted;
        
        /// <remarks/>
        public event SetDiagramParameterAttributeCompletedEventHandler SetDiagramParameterAttributeCompleted;
        
        /// <remarks/>
        public event SetCalcParameterAttributeCompletedEventHandler SetCalcParameterAttributeCompleted;
        
        /// <remarks/>
        public event SetGraphicLayerWorldCoordinatesCompletedEventHandler SetGraphicLayerWorldCoordinatesCompleted;
        
        /// <remarks/>
        public event AddNodesFromListCompletedEventHandler AddNodesFromListCompleted;
        
        /// <remarks/>
        public event AddElementsFromListCompletedEventHandler AddElementsFromListCompleted;
        
        /// <remarks/>
        public event AddSubLoadsFromListCompletedEventHandler AddSubLoadsFromListCompleted;
        
        /// <remarks/>
        public event SetDateTimeLastSaveCompletedEventHandler SetDateTimeLastSaveCompleted;
        
        /// <remarks/>
        public event GetResultSummaryCompletedEventHandler GetResultSummaryCompleted;
        
        /// <remarks/>
        public event GetListResultSummaryCompletedEventHandler GetListResultSummaryCompleted;
        
        /// <remarks/>
        public event GetAllElementResultsCompletedEventHandler GetAllElementResultsCompleted;
        
        /// <remarks/>
        public event GetCalculationSettingsCompletedEventHandler GetCalculationSettingsCompleted;
        
        /// <remarks/>
        public event GetResultElementByIDCompletedEventHandler GetResultElementByIDCompleted;
        
        /// <remarks/>
        public event GetResultsElementsByIDCompletedEventHandler GetResultsElementsByIDCompleted;
        
        /// <remarks/>
        public event GetResultElementByNameCompletedEventHandler GetResultElementByNameCompleted;
        
        /// <remarks/>
        public event AnalyseVariantWithAnalysisSettingsCompletedEventHandler AnalyseVariantWithAnalysisSettingsCompleted;
        
        /// <remarks/>
        public event AnalyseVariantCompletedEventHandler AnalyseVariantCompleted;
        
        /// <remarks/>
        public event IsAnalysisDoneCompletedEventHandler IsAnalysisDoneCompleted;
        
        /// <remarks/>
        public event AnalyseWithListFileWithoutSavingCompletedEventHandler AnalyseWithListFileWithoutSavingCompleted;
        
        /// <remarks/>
        public event AnalyseWithProjectFileWithoutSavingCompletedEventHandler AnalyseWithProjectFileWithoutSavingCompleted;
        
        /// <remarks/>
        public event AnalyseWithCDEFileWithoutSavingCompletedEventHandler AnalyseWithCDEFileWithoutSavingCompleted;
        
        /// <remarks/>
        public event DoAnalysisFromFilesCompletedEventHandler DoAnalysisFromFilesCompleted;
        
        /// <remarks/>
        public event EnergyCalculationFromFilesCompletedEventHandler EnergyCalculationFromFilesCompleted;
        
        /// <remarks/>
        public event LoadAllocationFromDBCompletedEventHandler LoadAllocationFromDBCompleted;
        
        /// <remarks/>
        public event LoadAllocationFromMeasurmentFileAndProjectNameCompletedEventHandler LoadAllocationFromMeasurmentFileAndProjectNameCompleted;
        
        /// <remarks/>
        public event LoadAllocationFromMeasurmentFileCompletedEventHandler LoadAllocationFromMeasurmentFileCompleted;
        
        /// <remarks/>
        public event ImportFromListFileAndDoLoadAllocationCompletedEventHandler ImportFromListFileAndDoLoadAllocationCompleted;
        
        /// <remarks/>
        public event DeleteAnaylsisLogFileCompletedEventHandler DeleteAnaylsisLogFileCompleted;
        
        /// <remarks/>
        public event DeleteAnalysisResultFileCompletedEventHandler DeleteAnalysisResultFileCompleted;
        
        /// <remarks/>
        public event DeleteProjectCompletedEventHandler DeleteProjectCompleted;
        
        /// <remarks/>
        public event MarkedProjectAsDeletedCompletedEventHandler MarkedProjectAsDeletedCompleted;
        
        /// <remarks/>
        public event ImportFromFileCompletedEventHandler ImportFromFileCompleted;
        
        /// <remarks/>
        public event AddFeederFromListCompletedEventHandler AddFeederFromListCompleted;
        
        /// <remarks/>
        public event ImportFromListCompletedEventHandler ImportFromListCompleted;
        
        /// <remarks/>
        public event ImportFromListFileCompletedEventHandler ImportFromListFileCompleted;
        
        /// <remarks/>
        public event MergeProjectFromListFileCompletedEventHandler MergeProjectFromListFileCompleted;
        
        /// <remarks/>
        public event ImportFromCDECompletedEventHandler ImportFromCDECompleted;
        
        /// <remarks/>
        public event ImportFromCDEFilesCompletedEventHandler ImportFromCDEFilesCompleted;
        
        /// <remarks/>
        public event ImportFromCDEZipFileCompletedEventHandler ImportFromCDEZipFileCompleted;
        
        /// <remarks/>
        public event ImportFromPSSEFilesCompletedEventHandler ImportFromPSSEFilesCompleted;
        
        /// <remarks/>
        public event ImportFromPSSEZipFileCompletedEventHandler ImportFromPSSEZipFileCompleted;
        
        /// <remarks/>
        public event ImportFromShapeFileCompletedEventHandler ImportFromShapeFileCompleted;
        
        /// <remarks/>
        public event ImportFromNDBCompletedEventHandler ImportFromNDBCompleted;
        
        /// <remarks/>
        public event ImportMeasuredDataFromXMlFileCompletedEventHandler ImportMeasuredDataFromXMlFileCompleted;
        
        /// <remarks/>
        public event ExportProjectToNEP360CompletedEventHandler ExportProjectToNEP360Completed;
        
        /// <remarks/>
        public event WriteMessageToLogFileCompletedEventHandler WriteMessageToLogFileCompleted;
        
        /// <remarks/>
        public event DeleteUserLogFileCompletedEventHandler DeleteUserLogFileCompleted;
        
        /// <remarks/>
        public event GetLogFileAsStringCompletedEventHandler GetLogFileAsStringCompleted;
        
        /// <remarks/>
        public event GetLogFileAsListCompletedEventHandler GetLogFileAsListCompleted;
        
        /// <remarks/>
        public event XMLUploadCompletedEventHandler XMLUploadCompleted;
        
        /// <remarks/>
        public event CDEUploadCompletedEventHandler CDEUploadCompleted;
        
        /// <remarks/>
        public event NDBUploadCompletedEventHandler NDBUploadCompleted;
        
        /// <remarks/>
        public event Nep360UploadCompletedEventHandler Nep360UploadCompleted;
        
        /// <remarks/>
        public event ZipUploadCompletedEventHandler ZipUploadCompleted;
        
        /// <remarks/>
        public event NepMeasUploadCompletedEventHandler NepMeasUploadCompleted;
        
        /// <remarks/>
        public event GetUserLogFileCompletedEventHandler GetUserLogFileCompleted;
        
        /// <remarks/>
        public event GetAnaylsisLogFileCompletedEventHandler GetAnaylsisLogFileCompleted;
        
        /// <remarks/>
        public event GetAnalysisResultFileCompletedEventHandler GetAnalysisResultFileCompleted;
        
        /// <remarks/>
        public event createDailyBackupCompletedEventHandler createDailyBackupCompleted;
        
        /// <remarks/>
        public event removeAllExpiredProjectsCompletedEventHandler removeAllExpiredProjectsCompleted;
        
        /// <remarks/>
        public event GetNamesOfElementsByTypeCompletedEventHandler GetNamesOfElementsByTypeCompleted;
        
        /// <remarks/>
        public event FindSwitchStatusOfElementsCompletedEventHandler FindSwitchStatusOfElementsCompleted;
        
        /// <remarks/>
        public event Find_Voltage_Level_of_One_Port_ElementCompletedEventHandler Find_Voltage_Level_of_One_Port_ElementCompleted;
        
        /// <remarks/>
        public event ChangeSwitchStatusOfElementsCompletedEventHandler ChangeSwitchStatusOfElementsCompleted;
        
        /// <remarks/>
        public event GetPQValuesLdSmAsmCompletedEventHandler GetPQValuesLdSmAsmCompleted;
        
        /// <remarks/>
        public event SetPowerofLoadsGeneratorsCompletedEventHandler SetPowerofLoadsGeneratorsCompleted;
        
        /// <remarks/>
        public event ChangeSwitchStatusOfElementListCompletedEventHandler ChangeSwitchStatusOfElementListCompleted;
        
        /// <remarks/>
        public event ImportIEC_62325_451_2FilesAndDoCIMExportCompletedEventHandler ImportIEC_62325_451_2FilesAndDoCIMExportCompleted;
        
        /// <remarks/>
        public event GetFeederIDByNameCompletedEventHandler GetFeederIDByNameCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/CreateProject", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public ExternalProject CreateProject([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string projectName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string variantName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string diagram, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string layerName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string mediumType, int srid, [System.Xml.Serialization.XmlIgnoreAttribute()] bool sridSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string copySettingsFromProjectName) {
            object[] results = this.Invoke("CreateProject", new object[] {
                        projectName,
                        variantName,
                        diagram,
                        layerName,
                        mediumType,
                        srid,
                        sridSpecified,
                        copySettingsFromProjectName});
            return ((ExternalProject)(results[0]));
        }
        
        /// <remarks/>
        public void CreateProjectAsync(string projectName, string variantName, string diagram, string layerName, string mediumType, int srid, bool sridSpecified, string copySettingsFromProjectName) {
            this.CreateProjectAsync(projectName, variantName, diagram, layerName, mediumType, srid, sridSpecified, copySettingsFromProjectName, null);
        }
        
        /// <remarks/>
        public void CreateProjectAsync(string projectName, string variantName, string diagram, string layerName, string mediumType, int srid, bool sridSpecified, string copySettingsFromProjectName, object userState) {
            if ((this.CreateProjectOperationCompleted == null)) {
                this.CreateProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateProjectOperationCompleted);
            }
            this.InvokeAsync("CreateProject", new object[] {
                        projectName,
                        variantName,
                        diagram,
                        layerName,
                        mediumType,
                        srid,
                        sridSpecified,
                        copySettingsFromProjectName}, this.CreateProjectOperationCompleted, userState);
        }
        
        private void OnCreateProjectOperationCompleted(object arg) {
            if ((this.CreateProjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateProjectCompleted(this, new CreateProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/GetProject", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public ExternalProject GetProject([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string projectName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string variantName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string diagramName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string layerName) {
            object[] results = this.Invoke("GetProject", new object[] {
                        projectName,
                        variantName,
                        diagramName,
                        layerName});
            return ((ExternalProject)(results[0]));
        }
        
        /// <remarks/>
        public void GetProjectAsync(string projectName, string variantName, string diagramName, string layerName) {
            this.GetProjectAsync(projectName, variantName, diagramName, layerName, null);
        }
        
        /// <remarks/>
        public void GetProjectAsync(string projectName, string variantName, string diagramName, string layerName, object userState) {
            if ((this.GetProjectOperationCompleted == null)) {
                this.GetProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProjectOperationCompleted);
            }
            this.InvokeAsync("GetProject", new object[] {
                        projectName,
                        variantName,
                        diagramName,
                        layerName}, this.GetProjectOperationCompleted, userState);
        }
        
        private void OnGetProjectOperationCompleted(object arg) {
            if ((this.GetProjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProjectCompleted(this, new GetProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/GetLogOnUrlWithProject", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetLogOnUrlWithProject([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project) {
            object[] results = this.Invoke("GetLogOnUrlWithProject", new object[] {
                        project});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLogOnUrlWithProjectAsync(ExternalProject project) {
            this.GetLogOnUrlWithProjectAsync(project, null);
        }
        
        /// <remarks/>
        public void GetLogOnUrlWithProjectAsync(ExternalProject project, object userState) {
            if ((this.GetLogOnUrlWithProjectOperationCompleted == null)) {
                this.GetLogOnUrlWithProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLogOnUrlWithProjectOperationCompleted);
            }
            this.InvokeAsync("GetLogOnUrlWithProject", new object[] {
                        project}, this.GetLogOnUrlWithProjectOperationCompleted, userState);
        }
        
        private void OnGetLogOnUrlWithProjectOperationCompleted(object arg) {
            if ((this.GetLogOnUrlWithProjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLogOnUrlWithProjectCompleted(this, new GetLogOnUrlWithProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/GetLogOnUrl", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetLogOnUrl() {
            object[] results = this.Invoke("GetLogOnUrl", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLogOnUrlAsync() {
            this.GetLogOnUrlAsync(null);
        }
        
        /// <remarks/>
        public void GetLogOnUrlAsync(object userState) {
            if ((this.GetLogOnUrlOperationCompleted == null)) {
                this.GetLogOnUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLogOnUrlOperationCompleted);
            }
            this.InvokeAsync("GetLogOnUrl", new object[0], this.GetLogOnUrlOperationCompleted, userState);
        }
        
        private void OnGetLogOnUrlOperationCompleted(object arg) {
            if ((this.GetLogOnUrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLogOnUrlCompleted(this, new GetLogOnUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/GetLogOnSessionID", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetLogOnSessionID([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project) {
            object[] results = this.Invoke("GetLogOnSessionID", new object[] {
                        project});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLogOnSessionIDAsync(ExternalProject project) {
            this.GetLogOnSessionIDAsync(project, null);
        }
        
        /// <remarks/>
        public void GetLogOnSessionIDAsync(ExternalProject project, object userState) {
            if ((this.GetLogOnSessionIDOperationCompleted == null)) {
                this.GetLogOnSessionIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLogOnSessionIDOperationCompleted);
            }
            this.InvokeAsync("GetLogOnSessionID", new object[] {
                        project}, this.GetLogOnSessionIDOperationCompleted, userState);
        }
        
        private void OnGetLogOnSessionIDOperationCompleted(object arg) {
            if ((this.GetLogOnSessionIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLogOnSessionIDCompleted(this, new GetLogOnSessionIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/InsertNode", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string InsertNode([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref ExternalProject project, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string name, double un, [System.Xml.Serialization.XmlIgnoreAttribute()] bool unSpecified, double fn, [System.Xml.Serialization.XmlIgnoreAttribute()] bool fnSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string libraryType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string xmlData, double x, [System.Xml.Serialization.XmlIgnoreAttribute()] bool xSpecified, double y, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ySpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string symbolName) {
            object[] results = this.Invoke("InsertNode", new object[] {
                        project,
                        name,
                        un,
                        unSpecified,
                        fn,
                        fnSpecified,
                        libraryType,
                        xmlData,
                        x,
                        xSpecified,
                        y,
                        ySpecified,
                        symbolName});
            project = ((ExternalProject)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertNodeAsync(ExternalProject project, string name, double un, bool unSpecified, double fn, bool fnSpecified, string libraryType, string xmlData, double x, bool xSpecified, double y, bool ySpecified, string symbolName) {
            this.InsertNodeAsync(project, name, un, unSpecified, fn, fnSpecified, libraryType, xmlData, x, xSpecified, y, ySpecified, symbolName, null);
        }
        
        /// <remarks/>
        public void InsertNodeAsync(ExternalProject project, string name, double un, bool unSpecified, double fn, bool fnSpecified, string libraryType, string xmlData, double x, bool xSpecified, double y, bool ySpecified, string symbolName, object userState) {
            if ((this.InsertNodeOperationCompleted == null)) {
                this.InsertNodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertNodeOperationCompleted);
            }
            this.InvokeAsync("InsertNode", new object[] {
                        project,
                        name,
                        un,
                        unSpecified,
                        fn,
                        fnSpecified,
                        libraryType,
                        xmlData,
                        x,
                        xSpecified,
                        y,
                        ySpecified,
                        symbolName}, this.InsertNodeOperationCompleted, userState);
        }
        
        private void OnInsertNodeOperationCompleted(object arg) {
            if ((this.InsertNodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertNodeCompleted(this, new InsertNodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/InsertNodeWithoutGraphic", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string InsertNodeWithoutGraphic([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref ExternalProject project, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string name, double un, [System.Xml.Serialization.XmlIgnoreAttribute()] bool unSpecified, double fn, [System.Xml.Serialization.XmlIgnoreAttribute()] bool fnSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string libraryType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string xmlData) {
            object[] results = this.Invoke("InsertNodeWithoutGraphic", new object[] {
                        project,
                        name,
                        un,
                        unSpecified,
                        fn,
                        fnSpecified,
                        libraryType,
                        xmlData});
            project = ((ExternalProject)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertNodeWithoutGraphicAsync(ExternalProject project, string name, double un, bool unSpecified, double fn, bool fnSpecified, string libraryType, string xmlData) {
            this.InsertNodeWithoutGraphicAsync(project, name, un, unSpecified, fn, fnSpecified, libraryType, xmlData, null);
        }
        
        /// <remarks/>
        public void InsertNodeWithoutGraphicAsync(ExternalProject project, string name, double un, bool unSpecified, double fn, bool fnSpecified, string libraryType, string xmlData, object userState) {
            if ((this.InsertNodeWithoutGraphicOperationCompleted == null)) {
                this.InsertNodeWithoutGraphicOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertNodeWithoutGraphicOperationCompleted);
            }
            this.InvokeAsync("InsertNodeWithoutGraphic", new object[] {
                        project,
                        name,
                        un,
                        unSpecified,
                        fn,
                        fnSpecified,
                        libraryType,
                        xmlData}, this.InsertNodeWithoutGraphicOperationCompleted, userState);
        }
        
        private void OnInsertNodeWithoutGraphicOperationCompleted(object arg) {
            if ((this.InsertNodeWithoutGraphicCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertNodeWithoutGraphicCompleted(this, new InsertNodeWithoutGraphicCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/InsertBusbar", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string InsertBusbar([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref ExternalProject project, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string name, double un, [System.Xml.Serialization.XmlIgnoreAttribute()] bool unSpecified, double fn, [System.Xml.Serialization.XmlIgnoreAttribute()] bool fnSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string libraryType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string xmlData, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)] double[] coordinates) {
            object[] results = this.Invoke("InsertBusbar", new object[] {
                        project,
                        name,
                        un,
                        unSpecified,
                        fn,
                        fnSpecified,
                        libraryType,
                        xmlData,
                        coordinates});
            project = ((ExternalProject)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertBusbarAsync(ExternalProject project, string name, double un, bool unSpecified, double fn, bool fnSpecified, string libraryType, string xmlData, double[] coordinates) {
            this.InsertBusbarAsync(project, name, un, unSpecified, fn, fnSpecified, libraryType, xmlData, coordinates, null);
        }
        
        /// <remarks/>
        public void InsertBusbarAsync(ExternalProject project, string name, double un, bool unSpecified, double fn, bool fnSpecified, string libraryType, string xmlData, double[] coordinates, object userState) {
            if ((this.InsertBusbarOperationCompleted == null)) {
                this.InsertBusbarOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertBusbarOperationCompleted);
            }
            this.InvokeAsync("InsertBusbar", new object[] {
                        project,
                        name,
                        un,
                        unSpecified,
                        fn,
                        fnSpecified,
                        libraryType,
                        xmlData,
                        coordinates}, this.InsertBusbarOperationCompleted, userState);
        }
        
        private void OnInsertBusbarOperationCompleted(object arg) {
            if ((this.InsertBusbarCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertBusbarCompleted(this, new InsertBusbarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/InsertLine", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string InsertLine([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string name, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string fromNode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string toNode, double length, [System.Xml.Serialization.XmlIgnoreAttribute()] bool lengthSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string libraryType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string xmlData, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)] double[] coordinates) {
            object[] results = this.Invoke("InsertLine", new object[] {
                        project,
                        name,
                        fromNode,
                        toNode,
                        length,
                        lengthSpecified,
                        libraryType,
                        xmlData,
                        coordinates});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertLineAsync(ExternalProject project, string name, string fromNode, string toNode, double length, bool lengthSpecified, string libraryType, string xmlData, double[] coordinates) {
            this.InsertLineAsync(project, name, fromNode, toNode, length, lengthSpecified, libraryType, xmlData, coordinates, null);
        }
        
        /// <remarks/>
        public void InsertLineAsync(ExternalProject project, string name, string fromNode, string toNode, double length, bool lengthSpecified, string libraryType, string xmlData, double[] coordinates, object userState) {
            if ((this.InsertLineOperationCompleted == null)) {
                this.InsertLineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertLineOperationCompleted);
            }
            this.InvokeAsync("InsertLine", new object[] {
                        project,
                        name,
                        fromNode,
                        toNode,
                        length,
                        lengthSpecified,
                        libraryType,
                        xmlData,
                        coordinates}, this.InsertLineOperationCompleted, userState);
        }
        
        private void OnInsertLineOperationCompleted(object arg) {
            if ((this.InsertLineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertLineCompleted(this, new InsertLineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/InsertLineByNodeID", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string InsertLineByNodeID([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string name, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string fromNodeID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string toNodeID, double length, [System.Xml.Serialization.XmlIgnoreAttribute()] bool lengthSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string libraryType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string xmlData, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)] double[] coordinates) {
            object[] results = this.Invoke("InsertLineByNodeID", new object[] {
                        project,
                        name,
                        fromNodeID,
                        toNodeID,
                        length,
                        lengthSpecified,
                        libraryType,
                        xmlData,
                        coordinates});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertLineByNodeIDAsync(ExternalProject project, string name, string fromNodeID, string toNodeID, double length, bool lengthSpecified, string libraryType, string xmlData, double[] coordinates) {
            this.InsertLineByNodeIDAsync(project, name, fromNodeID, toNodeID, length, lengthSpecified, libraryType, xmlData, coordinates, null);
        }
        
        /// <remarks/>
        public void InsertLineByNodeIDAsync(ExternalProject project, string name, string fromNodeID, string toNodeID, double length, bool lengthSpecified, string libraryType, string xmlData, double[] coordinates, object userState) {
            if ((this.InsertLineByNodeIDOperationCompleted == null)) {
                this.InsertLineByNodeIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertLineByNodeIDOperationCompleted);
            }
            this.InvokeAsync("InsertLineByNodeID", new object[] {
                        project,
                        name,
                        fromNodeID,
                        toNodeID,
                        length,
                        lengthSpecified,
                        libraryType,
                        xmlData,
                        coordinates}, this.InsertLineByNodeIDOperationCompleted, userState);
        }
        
        private void OnInsertLineByNodeIDOperationCompleted(object arg) {
            if ((this.InsertLineByNodeIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertLineByNodeIDCompleted(this, new InsertLineByNodeIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/InsertLineAsym", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string InsertLineAsym([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string name, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string fromNode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string toNode, double length, [System.Xml.Serialization.XmlIgnoreAttribute()] bool lengthSpecified, short phase, [System.Xml.Serialization.XmlIgnoreAttribute()] bool phaseSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string libraryType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string xmlData, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)] double[] coordinates) {
            object[] results = this.Invoke("InsertLineAsym", new object[] {
                        project,
                        name,
                        fromNode,
                        toNode,
                        length,
                        lengthSpecified,
                        phase,
                        phaseSpecified,
                        libraryType,
                        xmlData,
                        coordinates});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertLineAsymAsync(ExternalProject project, string name, string fromNode, string toNode, double length, bool lengthSpecified, short phase, bool phaseSpecified, string libraryType, string xmlData, double[] coordinates) {
            this.InsertLineAsymAsync(project, name, fromNode, toNode, length, lengthSpecified, phase, phaseSpecified, libraryType, xmlData, coordinates, null);
        }
        
        /// <remarks/>
        public void InsertLineAsymAsync(ExternalProject project, string name, string fromNode, string toNode, double length, bool lengthSpecified, short phase, bool phaseSpecified, string libraryType, string xmlData, double[] coordinates, object userState) {
            if ((this.InsertLineAsymOperationCompleted == null)) {
                this.InsertLineAsymOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertLineAsymOperationCompleted);
            }
            this.InvokeAsync("InsertLineAsym", new object[] {
                        project,
                        name,
                        fromNode,
                        toNode,
                        length,
                        lengthSpecified,
                        phase,
                        phaseSpecified,
                        libraryType,
                        xmlData,
                        coordinates}, this.InsertLineAsymOperationCompleted, userState);
        }
        
        private void OnInsertLineAsymOperationCompleted(object arg) {
            if ((this.InsertLineAsymCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertLineAsymCompleted(this, new InsertLineAsymCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/Insert2PortElement", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Insert2PortElement([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string name, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string fromNode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string toNode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string elementTypeName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string libraryType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string xmlData, int phase, [System.Xml.Serialization.XmlIgnoreAttribute()] bool phaseSpecified, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)] double[] coordinatesLink1, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)] double[] coordinatesLink2, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string symbolName, double symbolAngle, [System.Xml.Serialization.XmlIgnoreAttribute()] bool symbolAngleSpecified) {
            object[] results = this.Invoke("Insert2PortElement", new object[] {
                        project,
                        name,
                        fromNode,
                        toNode,
                        elementTypeName,
                        libraryType,
                        xmlData,
                        phase,
                        phaseSpecified,
                        coordinatesLink1,
                        coordinatesLink2,
                        symbolName,
                        symbolAngle,
                        symbolAngleSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Insert2PortElementAsync(ExternalProject project, string name, string fromNode, string toNode, string elementTypeName, string libraryType, string xmlData, int phase, bool phaseSpecified, double[] coordinatesLink1, double[] coordinatesLink2, string symbolName, double symbolAngle, bool symbolAngleSpecified) {
            this.Insert2PortElementAsync(project, name, fromNode, toNode, elementTypeName, libraryType, xmlData, phase, phaseSpecified, coordinatesLink1, coordinatesLink2, symbolName, symbolAngle, symbolAngleSpecified, null);
        }
        
        /// <remarks/>
        public void Insert2PortElementAsync(ExternalProject project, string name, string fromNode, string toNode, string elementTypeName, string libraryType, string xmlData, int phase, bool phaseSpecified, double[] coordinatesLink1, double[] coordinatesLink2, string symbolName, double symbolAngle, bool symbolAngleSpecified, object userState) {
            if ((this.Insert2PortElementOperationCompleted == null)) {
                this.Insert2PortElementOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsert2PortElementOperationCompleted);
            }
            this.InvokeAsync("Insert2PortElement", new object[] {
                        project,
                        name,
                        fromNode,
                        toNode,
                        elementTypeName,
                        libraryType,
                        xmlData,
                        phase,
                        phaseSpecified,
                        coordinatesLink1,
                        coordinatesLink2,
                        symbolName,
                        symbolAngle,
                        symbolAngleSpecified}, this.Insert2PortElementOperationCompleted, userState);
        }
        
        private void OnInsert2PortElementOperationCompleted(object arg) {
            if ((this.Insert2PortElementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Insert2PortElementCompleted(this, new Insert2PortElementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/Insert1PortElement", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Insert1PortElement([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref ExternalProject project, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string name, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string fromNode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string elementTypeName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string libraryType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string xmlData, int phase, [System.Xml.Serialization.XmlIgnoreAttribute()] bool phaseSpecified, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)] double[] coordinatesLink, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string symbolName, double symbolAngle, [System.Xml.Serialization.XmlIgnoreAttribute()] bool symbolAngleSpecified) {
            object[] results = this.Invoke("Insert1PortElement", new object[] {
                        project,
                        name,
                        fromNode,
                        elementTypeName,
                        libraryType,
                        xmlData,
                        phase,
                        phaseSpecified,
                        coordinatesLink,
                        symbolName,
                        symbolAngle,
                        symbolAngleSpecified});
            project = ((ExternalProject)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Insert1PortElementAsync(ExternalProject project, string name, string fromNode, string elementTypeName, string libraryType, string xmlData, int phase, bool phaseSpecified, double[] coordinatesLink, string symbolName, double symbolAngle, bool symbolAngleSpecified) {
            this.Insert1PortElementAsync(project, name, fromNode, elementTypeName, libraryType, xmlData, phase, phaseSpecified, coordinatesLink, symbolName, symbolAngle, symbolAngleSpecified, null);
        }
        
        /// <remarks/>
        public void Insert1PortElementAsync(ExternalProject project, string name, string fromNode, string elementTypeName, string libraryType, string xmlData, int phase, bool phaseSpecified, double[] coordinatesLink, string symbolName, double symbolAngle, bool symbolAngleSpecified, object userState) {
            if ((this.Insert1PortElementOperationCompleted == null)) {
                this.Insert1PortElementOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsert1PortElementOperationCompleted);
            }
            this.InvokeAsync("Insert1PortElement", new object[] {
                        project,
                        name,
                        fromNode,
                        elementTypeName,
                        libraryType,
                        xmlData,
                        phase,
                        phaseSpecified,
                        coordinatesLink,
                        symbolName,
                        symbolAngle,
                        symbolAngleSpecified}, this.Insert1PortElementOperationCompleted, userState);
        }
        
        private void OnInsert1PortElementOperationCompleted(object arg) {
            if ((this.Insert1PortElementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Insert1PortElementCompleted(this, new Insert1PortElementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/InsertProtectionElement", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string InsertProtectionElement([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string name, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string onElementID, short atPort, [System.Xml.Serialization.XmlIgnoreAttribute()] bool atPortSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string elementTypeName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string libraryType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string xmlData, int phase, [System.Xml.Serialization.XmlIgnoreAttribute()] bool phaseSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string symbolName) {
            object[] results = this.Invoke("InsertProtectionElement", new object[] {
                        project,
                        name,
                        onElementID,
                        atPort,
                        atPortSpecified,
                        elementTypeName,
                        libraryType,
                        xmlData,
                        phase,
                        phaseSpecified,
                        symbolName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertProtectionElementAsync(ExternalProject project, string name, string onElementID, short atPort, bool atPortSpecified, string elementTypeName, string libraryType, string xmlData, int phase, bool phaseSpecified, string symbolName) {
            this.InsertProtectionElementAsync(project, name, onElementID, atPort, atPortSpecified, elementTypeName, libraryType, xmlData, phase, phaseSpecified, symbolName, null);
        }
        
        /// <remarks/>
        public void InsertProtectionElementAsync(ExternalProject project, string name, string onElementID, short atPort, bool atPortSpecified, string elementTypeName, string libraryType, string xmlData, int phase, bool phaseSpecified, string symbolName, object userState) {
            if ((this.InsertProtectionElementOperationCompleted == null)) {
                this.InsertProtectionElementOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertProtectionElementOperationCompleted);
            }
            this.InvokeAsync("InsertProtectionElement", new object[] {
                        project,
                        name,
                        onElementID,
                        atPort,
                        atPortSpecified,
                        elementTypeName,
                        libraryType,
                        xmlData,
                        phase,
                        phaseSpecified,
                        symbolName}, this.InsertProtectionElementOperationCompleted, userState);
        }
        
        private void OnInsertProtectionElementOperationCompleted(object arg) {
            if ((this.InsertProtectionElementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertProtectionElementCompleted(this, new InsertProtectionElementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/InsertFeeder", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string InsertFeeder([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string feederName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string nodeName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string elementName) {
            object[] results = this.Invoke("InsertFeeder", new object[] {
                        project,
                        feederName,
                        nodeName,
                        elementName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertFeederAsync(ExternalProject project, string feederName, string nodeName, string elementName) {
            this.InsertFeederAsync(project, feederName, nodeName, elementName, null);
        }
        
        /// <remarks/>
        public void InsertFeederAsync(ExternalProject project, string feederName, string nodeName, string elementName, object userState) {
            if ((this.InsertFeederOperationCompleted == null)) {
                this.InsertFeederOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertFeederOperationCompleted);
            }
            this.InvokeAsync("InsertFeeder", new object[] {
                        project,
                        feederName,
                        nodeName,
                        elementName}, this.InsertFeederOperationCompleted, userState);
        }
        
        private void OnInsertFeederOperationCompleted(object arg) {
            if ((this.InsertFeederCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertFeederCompleted(this, new InsertFeederCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/InsertArea", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string InsertArea([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string areaName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string firstSubArea, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string colorStringArea, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string colorStringSubArea) {
            object[] results = this.Invoke("InsertArea", new object[] {
                        project,
                        areaName,
                        firstSubArea,
                        colorStringArea,
                        colorStringSubArea});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertAreaAsync(ExternalProject project, string areaName, string firstSubArea, string colorStringArea, string colorStringSubArea) {
            this.InsertAreaAsync(project, areaName, firstSubArea, colorStringArea, colorStringSubArea, null);
        }
        
        /// <remarks/>
        public void InsertAreaAsync(ExternalProject project, string areaName, string firstSubArea, string colorStringArea, string colorStringSubArea, object userState) {
            if ((this.InsertAreaOperationCompleted == null)) {
                this.InsertAreaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertAreaOperationCompleted);
            }
            this.InvokeAsync("InsertArea", new object[] {
                        project,
                        areaName,
                        firstSubArea,
                        colorStringArea,
                        colorStringSubArea}, this.InsertAreaOperationCompleted, userState);
        }
        
        private void OnInsertAreaOperationCompleted(object arg) {
            if ((this.InsertAreaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertAreaCompleted(this, new InsertAreaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/InsertZone", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string InsertZone([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string name, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string colorString) {
            object[] results = this.Invoke("InsertZone", new object[] {
                        project,
                        name,
                        colorString});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertZoneAsync(ExternalProject project, string name, string colorString) {
            this.InsertZoneAsync(project, name, colorString, null);
        }
        
        /// <remarks/>
        public void InsertZoneAsync(ExternalProject project, string name, string colorString, object userState) {
            if ((this.InsertZoneOperationCompleted == null)) {
                this.InsertZoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertZoneOperationCompleted);
            }
            this.InvokeAsync("InsertZone", new object[] {
                        project,
                        name,
                        colorString}, this.InsertZoneOperationCompleted, userState);
        }
        
        private void OnInsertZoneOperationCompleted(object arg) {
            if ((this.InsertZoneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertZoneCompleted(this, new InsertZoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/InsertMeasurement", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string InsertMeasurement([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string measurementDefinitionName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string elementName, short portNr, [System.Xml.Serialization.XmlIgnoreAttribute()] bool portNrSpecified, System.DateTime dateTime, [System.Xml.Serialization.XmlIgnoreAttribute()] bool dateTimeSpecified, int inputDataDefinition, [System.Xml.Serialization.XmlIgnoreAttribute()] bool inputDataDefinitionSpecified, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)] double[] measuremens, short nameAliasName1AliasName2, [System.Xml.Serialization.XmlIgnoreAttribute()] bool nameAliasName1AliasName2Specified) {
            object[] results = this.Invoke("InsertMeasurement", new object[] {
                        project,
                        measurementDefinitionName,
                        elementName,
                        portNr,
                        portNrSpecified,
                        dateTime,
                        dateTimeSpecified,
                        inputDataDefinition,
                        inputDataDefinitionSpecified,
                        measuremens,
                        nameAliasName1AliasName2,
                        nameAliasName1AliasName2Specified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertMeasurementAsync(ExternalProject project, string measurementDefinitionName, string elementName, short portNr, bool portNrSpecified, System.DateTime dateTime, bool dateTimeSpecified, int inputDataDefinition, bool inputDataDefinitionSpecified, double[] measuremens, short nameAliasName1AliasName2, bool nameAliasName1AliasName2Specified) {
            this.InsertMeasurementAsync(project, measurementDefinitionName, elementName, portNr, portNrSpecified, dateTime, dateTimeSpecified, inputDataDefinition, inputDataDefinitionSpecified, measuremens, nameAliasName1AliasName2, nameAliasName1AliasName2Specified, null);
        }
        
        /// <remarks/>
        public void InsertMeasurementAsync(ExternalProject project, string measurementDefinitionName, string elementName, short portNr, bool portNrSpecified, System.DateTime dateTime, bool dateTimeSpecified, int inputDataDefinition, bool inputDataDefinitionSpecified, double[] measuremens, short nameAliasName1AliasName2, bool nameAliasName1AliasName2Specified, object userState) {
            if ((this.InsertMeasurementOperationCompleted == null)) {
                this.InsertMeasurementOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertMeasurementOperationCompleted);
            }
            this.InvokeAsync("InsertMeasurement", new object[] {
                        project,
                        measurementDefinitionName,
                        elementName,
                        portNr,
                        portNrSpecified,
                        dateTime,
                        dateTimeSpecified,
                        inputDataDefinition,
                        inputDataDefinitionSpecified,
                        measuremens,
                        nameAliasName1AliasName2,
                        nameAliasName1AliasName2Specified}, this.InsertMeasurementOperationCompleted, userState);
        }
        
        private void OnInsertMeasurementOperationCompleted(object arg) {
            if ((this.InsertMeasurementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertMeasurementCompleted(this, new InsertMeasurementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/InsertMeasurementByElementID", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string InsertMeasurementByElementID([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string elementID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string measurementDefinitionName, short portNr, [System.Xml.Serialization.XmlIgnoreAttribute()] bool portNrSpecified, System.DateTime dateTime, [System.Xml.Serialization.XmlIgnoreAttribute()] bool dateTimeSpecified, int inputDataDefinition, [System.Xml.Serialization.XmlIgnoreAttribute()] bool inputDataDefinitionSpecified, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)] double[] measurements) {
            object[] results = this.Invoke("InsertMeasurementByElementID", new object[] {
                        elementID,
                        measurementDefinitionName,
                        portNr,
                        portNrSpecified,
                        dateTime,
                        dateTimeSpecified,
                        inputDataDefinition,
                        inputDataDefinitionSpecified,
                        measurements});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertMeasurementByElementIDAsync(string elementID, string measurementDefinitionName, short portNr, bool portNrSpecified, System.DateTime dateTime, bool dateTimeSpecified, int inputDataDefinition, bool inputDataDefinitionSpecified, double[] measurements) {
            this.InsertMeasurementByElementIDAsync(elementID, measurementDefinitionName, portNr, portNrSpecified, dateTime, dateTimeSpecified, inputDataDefinition, inputDataDefinitionSpecified, measurements, null);
        }
        
        /// <remarks/>
        public void InsertMeasurementByElementIDAsync(string elementID, string measurementDefinitionName, short portNr, bool portNrSpecified, System.DateTime dateTime, bool dateTimeSpecified, int inputDataDefinition, bool inputDataDefinitionSpecified, double[] measurements, object userState) {
            if ((this.InsertMeasurementByElementIDOperationCompleted == null)) {
                this.InsertMeasurementByElementIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertMeasurementByElementIDOperationCompleted);
            }
            this.InvokeAsync("InsertMeasurementByElementID", new object[] {
                        elementID,
                        measurementDefinitionName,
                        portNr,
                        portNrSpecified,
                        dateTime,
                        dateTimeSpecified,
                        inputDataDefinition,
                        inputDataDefinitionSpecified,
                        measurements}, this.InsertMeasurementByElementIDOperationCompleted, userState);
        }
        
        private void OnInsertMeasurementByElementIDOperationCompleted(object arg) {
            if ((this.InsertMeasurementByElementIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertMeasurementByElementIDCompleted(this, new InsertMeasurementByElementIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/InsertDiagram", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string InsertDiagram([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string diagramName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string firstGraphicLayerName) {
            object[] results = this.Invoke("InsertDiagram", new object[] {
                        project,
                        diagramName,
                        firstGraphicLayerName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertDiagramAsync(ExternalProject project, string diagramName, string firstGraphicLayerName) {
            this.InsertDiagramAsync(project, diagramName, firstGraphicLayerName, null);
        }
        
        /// <remarks/>
        public void InsertDiagramAsync(ExternalProject project, string diagramName, string firstGraphicLayerName, object userState) {
            if ((this.InsertDiagramOperationCompleted == null)) {
                this.InsertDiagramOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertDiagramOperationCompleted);
            }
            this.InvokeAsync("InsertDiagram", new object[] {
                        project,
                        diagramName,
                        firstGraphicLayerName}, this.InsertDiagramOperationCompleted, userState);
        }
        
        private void OnInsertDiagramOperationCompleted(object arg) {
            if ((this.InsertDiagramCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertDiagramCompleted(this, new InsertDiagramCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/InsertGraphicLayer", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string InsertGraphicLayer([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref ExternalProject project, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string diagramID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string graphicLayerName) {
            object[] results = this.Invoke("InsertGraphicLayer", new object[] {
                        project,
                        diagramID,
                        graphicLayerName});
            project = ((ExternalProject)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertGraphicLayerAsync(ExternalProject project, string diagramID, string graphicLayerName) {
            this.InsertGraphicLayerAsync(project, diagramID, graphicLayerName, null);
        }
        
        /// <remarks/>
        public void InsertGraphicLayerAsync(ExternalProject project, string diagramID, string graphicLayerName, object userState) {
            if ((this.InsertGraphicLayerOperationCompleted == null)) {
                this.InsertGraphicLayerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertGraphicLayerOperationCompleted);
            }
            this.InvokeAsync("InsertGraphicLayer", new object[] {
                        project,
                        diagramID,
                        graphicLayerName}, this.InsertGraphicLayerOperationCompleted, userState);
        }
        
        private void OnInsertGraphicLayerOperationCompleted(object arg) {
            if ((this.InsertGraphicLayerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertGraphicLayerCompleted(this, new InsertGraphicLayerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/AddSubLoad", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddSubLoad([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string loadID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] LoadData loadData, out bool AddSubLoadResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool AddSubLoadResultSpecified) {
            object[] results = this.Invoke("AddSubLoad", new object[] {
                        project,
                        loadID,
                        loadData});
            AddSubLoadResult = ((bool)(results[0]));
            AddSubLoadResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void AddSubLoadAsync(ExternalProject project, string loadID, LoadData loadData) {
            this.AddSubLoadAsync(project, loadID, loadData, null);
        }
        
        /// <remarks/>
        public void AddSubLoadAsync(ExternalProject project, string loadID, LoadData loadData, object userState) {
            if ((this.AddSubLoadOperationCompleted == null)) {
                this.AddSubLoadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSubLoadOperationCompleted);
            }
            this.InvokeAsync("AddSubLoad", new object[] {
                        project,
                        loadID,
                        loadData}, this.AddSubLoadOperationCompleted, userState);
        }
        
        private void OnAddSubLoadOperationCompleted(object arg) {
            if ((this.AddSubLoadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSubLoadCompleted(this, new AddSubLoadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/AssignPowerTo1Port", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AssignPowerTo1Port([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string name, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string elementTypeName, short powerType, [System.Xml.Serialization.XmlIgnoreAttribute()] bool powerTypeSpecified, double value1, [System.Xml.Serialization.XmlIgnoreAttribute()] bool value1Specified, double value2, [System.Xml.Serialization.XmlIgnoreAttribute()] bool value2Specified, out bool AssignPowerTo1PortResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool AssignPowerTo1PortResultSpecified) {
            object[] results = this.Invoke("AssignPowerTo1Port", new object[] {
                        project,
                        name,
                        elementTypeName,
                        powerType,
                        powerTypeSpecified,
                        value1,
                        value1Specified,
                        value2,
                        value2Specified});
            AssignPowerTo1PortResult = ((bool)(results[0]));
            AssignPowerTo1PortResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void AssignPowerTo1PortAsync(ExternalProject project, string name, string elementTypeName, short powerType, bool powerTypeSpecified, double value1, bool value1Specified, double value2, bool value2Specified) {
            this.AssignPowerTo1PortAsync(project, name, elementTypeName, powerType, powerTypeSpecified, value1, value1Specified, value2, value2Specified, null);
        }
        
        /// <remarks/>
        public void AssignPowerTo1PortAsync(ExternalProject project, string name, string elementTypeName, short powerType, bool powerTypeSpecified, double value1, bool value1Specified, double value2, bool value2Specified, object userState) {
            if ((this.AssignPowerTo1PortOperationCompleted == null)) {
                this.AssignPowerTo1PortOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAssignPowerTo1PortOperationCompleted);
            }
            this.InvokeAsync("AssignPowerTo1Port", new object[] {
                        project,
                        name,
                        elementTypeName,
                        powerType,
                        powerTypeSpecified,
                        value1,
                        value1Specified,
                        value2,
                        value2Specified}, this.AssignPowerTo1PortOperationCompleted, userState);
        }
        
        private void OnAssignPowerTo1PortOperationCompleted(object arg) {
            if ((this.AssignPowerTo1PortCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AssignPowerTo1PortCompleted(this, new AssignPowerTo1PortCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/AssignPowerTo1PortByID", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AssignPowerTo1PortByID([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string elementID, short powerType, [System.Xml.Serialization.XmlIgnoreAttribute()] bool powerTypeSpecified, double value1, [System.Xml.Serialization.XmlIgnoreAttribute()] bool value1Specified, double value2, [System.Xml.Serialization.XmlIgnoreAttribute()] bool value2Specified, out bool AssignPowerTo1PortByIDResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool AssignPowerTo1PortByIDResultSpecified) {
            object[] results = this.Invoke("AssignPowerTo1PortByID", new object[] {
                        project,
                        elementID,
                        powerType,
                        powerTypeSpecified,
                        value1,
                        value1Specified,
                        value2,
                        value2Specified});
            AssignPowerTo1PortByIDResult = ((bool)(results[0]));
            AssignPowerTo1PortByIDResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void AssignPowerTo1PortByIDAsync(ExternalProject project, string elementID, short powerType, bool powerTypeSpecified, double value1, bool value1Specified, double value2, bool value2Specified) {
            this.AssignPowerTo1PortByIDAsync(project, elementID, powerType, powerTypeSpecified, value1, value1Specified, value2, value2Specified, null);
        }
        
        /// <remarks/>
        public void AssignPowerTo1PortByIDAsync(ExternalProject project, string elementID, short powerType, bool powerTypeSpecified, double value1, bool value1Specified, double value2, bool value2Specified, object userState) {
            if ((this.AssignPowerTo1PortByIDOperationCompleted == null)) {
                this.AssignPowerTo1PortByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAssignPowerTo1PortByIDOperationCompleted);
            }
            this.InvokeAsync("AssignPowerTo1PortByID", new object[] {
                        project,
                        elementID,
                        powerType,
                        powerTypeSpecified,
                        value1,
                        value1Specified,
                        value2,
                        value2Specified}, this.AssignPowerTo1PortByIDOperationCompleted, userState);
        }
        
        private void OnAssignPowerTo1PortByIDOperationCompleted(object arg) {
            if ((this.AssignPowerTo1PortByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AssignPowerTo1PortByIDCompleted(this, new AssignPowerTo1PortByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/SwitchElementAtPortByID", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SwitchElementAtPortByID([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string elementID, short portNr, [System.Xml.Serialization.XmlIgnoreAttribute()] bool portNrSpecified, bool isConnected, [System.Xml.Serialization.XmlIgnoreAttribute()] bool isConnectedSpecified) {
            this.Invoke("SwitchElementAtPortByID", new object[] {
                        elementID,
                        portNr,
                        portNrSpecified,
                        isConnected,
                        isConnectedSpecified});
        }
        
        /// <remarks/>
        public void SwitchElementAtPortByIDAsync(string elementID, short portNr, bool portNrSpecified, bool isConnected, bool isConnectedSpecified) {
            this.SwitchElementAtPortByIDAsync(elementID, portNr, portNrSpecified, isConnected, isConnectedSpecified, null);
        }
        
        /// <remarks/>
        public void SwitchElementAtPortByIDAsync(string elementID, short portNr, bool portNrSpecified, bool isConnected, bool isConnectedSpecified, object userState) {
            if ((this.SwitchElementAtPortByIDOperationCompleted == null)) {
                this.SwitchElementAtPortByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSwitchElementAtPortByIDOperationCompleted);
            }
            this.InvokeAsync("SwitchElementAtPortByID", new object[] {
                        elementID,
                        portNr,
                        portNrSpecified,
                        isConnected,
                        isConnectedSpecified}, this.SwitchElementAtPortByIDOperationCompleted, userState);
        }
        
        private void OnSwitchElementAtPortByIDOperationCompleted(object arg) {
            if ((this.SwitchElementAtPortByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SwitchElementAtPortByIDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/SwitchElementAtPort", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SwitchElementAtPort([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string elementName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string elementTypeName, short portNr, [System.Xml.Serialization.XmlIgnoreAttribute()] bool portNrSpecified, bool isConnected, [System.Xml.Serialization.XmlIgnoreAttribute()] bool isConnectedSpecified) {
            this.Invoke("SwitchElementAtPort", new object[] {
                        project,
                        elementName,
                        elementTypeName,
                        portNr,
                        portNrSpecified,
                        isConnected,
                        isConnectedSpecified});
        }
        
        /// <remarks/>
        public void SwitchElementAtPortAsync(ExternalProject project, string elementName, string elementTypeName, short portNr, bool portNrSpecified, bool isConnected, bool isConnectedSpecified) {
            this.SwitchElementAtPortAsync(project, elementName, elementTypeName, portNr, portNrSpecified, isConnected, isConnectedSpecified, null);
        }
        
        /// <remarks/>
        public void SwitchElementAtPortAsync(ExternalProject project, string elementName, string elementTypeName, short portNr, bool portNrSpecified, bool isConnected, bool isConnectedSpecified, object userState) {
            if ((this.SwitchElementAtPortOperationCompleted == null)) {
                this.SwitchElementAtPortOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSwitchElementAtPortOperationCompleted);
            }
            this.InvokeAsync("SwitchElementAtPort", new object[] {
                        project,
                        elementName,
                        elementTypeName,
                        portNr,
                        portNrSpecified,
                        isConnected,
                        isConnectedSpecified}, this.SwitchElementAtPortOperationCompleted, userState);
        }
        
        private void OnSwitchElementAtPortOperationCompleted(object arg) {
            if ((this.SwitchElementAtPortCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SwitchElementAtPortCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/SetElementData", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetElementData([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string elementName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string elementTypeName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string aliasName1, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string aliasName2, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string description, bool isInMaintenance, [System.Xml.Serialization.XmlIgnoreAttribute()] bool isInMaintenanceSpecified, bool IsProjected, [System.Xml.Serialization.XmlIgnoreAttribute()] bool IsProjectedSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string zoneGuid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string subAreaGuid) {
            this.Invoke("SetElementData", new object[] {
                        project,
                        elementName,
                        elementTypeName,
                        aliasName1,
                        aliasName2,
                        description,
                        isInMaintenance,
                        isInMaintenanceSpecified,
                        IsProjected,
                        IsProjectedSpecified,
                        zoneGuid,
                        subAreaGuid});
        }
        
        /// <remarks/>
        public void SetElementDataAsync(ExternalProject project, string elementName, string elementTypeName, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool isInMaintenanceSpecified, bool IsProjected, bool IsProjectedSpecified, string zoneGuid, string subAreaGuid) {
            this.SetElementDataAsync(project, elementName, elementTypeName, aliasName1, aliasName2, description, isInMaintenance, isInMaintenanceSpecified, IsProjected, IsProjectedSpecified, zoneGuid, subAreaGuid, null);
        }
        
        /// <remarks/>
        public void SetElementDataAsync(ExternalProject project, string elementName, string elementTypeName, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool isInMaintenanceSpecified, bool IsProjected, bool IsProjectedSpecified, string zoneGuid, string subAreaGuid, object userState) {
            if ((this.SetElementDataOperationCompleted == null)) {
                this.SetElementDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetElementDataOperationCompleted);
            }
            this.InvokeAsync("SetElementData", new object[] {
                        project,
                        elementName,
                        elementTypeName,
                        aliasName1,
                        aliasName2,
                        description,
                        isInMaintenance,
                        isInMaintenanceSpecified,
                        IsProjected,
                        IsProjectedSpecified,
                        zoneGuid,
                        subAreaGuid}, this.SetElementDataOperationCompleted, userState);
        }
        
        private void OnSetElementDataOperationCompleted(object arg) {
            if ((this.SetElementDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetElementDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/SetElementDataByID", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetElementDataByID([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string elementID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string elementTypeName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string aliasName1, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string aliasName2, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string description, bool isInMaintenance, [System.Xml.Serialization.XmlIgnoreAttribute()] bool isInMaintenanceSpecified, bool IsProjected, [System.Xml.Serialization.XmlIgnoreAttribute()] bool IsProjectedSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string zoneGuid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string subAreaGuid) {
            this.Invoke("SetElementDataByID", new object[] {
                        elementID,
                        elementTypeName,
                        aliasName1,
                        aliasName2,
                        description,
                        isInMaintenance,
                        isInMaintenanceSpecified,
                        IsProjected,
                        IsProjectedSpecified,
                        zoneGuid,
                        subAreaGuid});
        }
        
        /// <remarks/>
        public void SetElementDataByIDAsync(string elementID, string elementTypeName, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool isInMaintenanceSpecified, bool IsProjected, bool IsProjectedSpecified, string zoneGuid, string subAreaGuid) {
            this.SetElementDataByIDAsync(elementID, elementTypeName, aliasName1, aliasName2, description, isInMaintenance, isInMaintenanceSpecified, IsProjected, IsProjectedSpecified, zoneGuid, subAreaGuid, null);
        }
        
        /// <remarks/>
        public void SetElementDataByIDAsync(string elementID, string elementTypeName, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool isInMaintenanceSpecified, bool IsProjected, bool IsProjectedSpecified, string zoneGuid, string subAreaGuid, object userState) {
            if ((this.SetElementDataByIDOperationCompleted == null)) {
                this.SetElementDataByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetElementDataByIDOperationCompleted);
            }
            this.InvokeAsync("SetElementDataByID", new object[] {
                        elementID,
                        elementTypeName,
                        aliasName1,
                        aliasName2,
                        description,
                        isInMaintenance,
                        isInMaintenanceSpecified,
                        IsProjected,
                        IsProjectedSpecified,
                        zoneGuid,
                        subAreaGuid}, this.SetElementDataByIDOperationCompleted, userState);
        }
        
        private void OnSetElementDataByIDOperationCompleted(object arg) {
            if ((this.SetElementDataByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetElementDataByIDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/GetElementDataByNameandType", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetElementDataByNameandType([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string elementName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string elementTypeName, ref string elementID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string aliasName1, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string aliasName2, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string description, ref bool isInMaintenance, [System.Xml.Serialization.XmlIgnoreAttribute()] ref bool isInMaintenanceSpecified, ref bool IsProjected, [System.Xml.Serialization.XmlIgnoreAttribute()] ref bool IsProjectedSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string zoneGuid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string subAreaGuid) {
            object[] results = this.Invoke("GetElementDataByNameandType", new object[] {
                        project,
                        elementName,
                        elementTypeName,
                        elementID,
                        aliasName1,
                        aliasName2,
                        description,
                        isInMaintenance,
                        isInMaintenanceSpecified,
                        IsProjected,
                        IsProjectedSpecified,
                        zoneGuid,
                        subAreaGuid});
            elementID = ((string)(results[0]));
            aliasName1 = ((string)(results[1]));
            aliasName2 = ((string)(results[2]));
            description = ((string)(results[3]));
            isInMaintenance = ((bool)(results[4]));
            isInMaintenanceSpecified = ((bool)(results[5]));
            IsProjected = ((bool)(results[6]));
            IsProjectedSpecified = ((bool)(results[7]));
            zoneGuid = ((string)(results[8]));
            subAreaGuid = ((string)(results[9]));
        }
        
        /// <remarks/>
        public void GetElementDataByNameandTypeAsync(ExternalProject project, string elementName, string elementTypeName, string elementID, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool isInMaintenanceSpecified, bool IsProjected, bool IsProjectedSpecified, string zoneGuid, string subAreaGuid) {
            this.GetElementDataByNameandTypeAsync(project, elementName, elementTypeName, elementID, aliasName1, aliasName2, description, isInMaintenance, isInMaintenanceSpecified, IsProjected, IsProjectedSpecified, zoneGuid, subAreaGuid, null);
        }
        
        /// <remarks/>
        public void GetElementDataByNameandTypeAsync(ExternalProject project, string elementName, string elementTypeName, string elementID, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool isInMaintenanceSpecified, bool IsProjected, bool IsProjectedSpecified, string zoneGuid, string subAreaGuid, object userState) {
            if ((this.GetElementDataByNameandTypeOperationCompleted == null)) {
                this.GetElementDataByNameandTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetElementDataByNameandTypeOperationCompleted);
            }
            this.InvokeAsync("GetElementDataByNameandType", new object[] {
                        project,
                        elementName,
                        elementTypeName,
                        elementID,
                        aliasName1,
                        aliasName2,
                        description,
                        isInMaintenance,
                        isInMaintenanceSpecified,
                        IsProjected,
                        IsProjectedSpecified,
                        zoneGuid,
                        subAreaGuid}, this.GetElementDataByNameandTypeOperationCompleted, userState);
        }
        
        private void OnGetElementDataByNameandTypeOperationCompleted(object arg) {
            if ((this.GetElementDataByNameandTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetElementDataByNameandTypeCompleted(this, new GetElementDataByNameandTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/GetElementDataByIDandType", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetElementDataByIDandType([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, string elementID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string elementTypeName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string elementName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string aliasName1, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string aliasName2, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string description, ref bool isInMaintenance, [System.Xml.Serialization.XmlIgnoreAttribute()] ref bool isInMaintenanceSpecified, ref bool IsProjected, [System.Xml.Serialization.XmlIgnoreAttribute()] ref bool IsProjectedSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string zoneGuid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string subAreaGuid) {
            object[] results = this.Invoke("GetElementDataByIDandType", new object[] {
                        project,
                        elementID,
                        elementTypeName,
                        elementName,
                        aliasName1,
                        aliasName2,
                        description,
                        isInMaintenance,
                        isInMaintenanceSpecified,
                        IsProjected,
                        IsProjectedSpecified,
                        zoneGuid,
                        subAreaGuid});
            elementName = ((string)(results[0]));
            aliasName1 = ((string)(results[1]));
            aliasName2 = ((string)(results[2]));
            description = ((string)(results[3]));
            isInMaintenance = ((bool)(results[4]));
            isInMaintenanceSpecified = ((bool)(results[5]));
            IsProjected = ((bool)(results[6]));
            IsProjectedSpecified = ((bool)(results[7]));
            zoneGuid = ((string)(results[8]));
            subAreaGuid = ((string)(results[9]));
        }
        
        /// <remarks/>
        public void GetElementDataByIDandTypeAsync(ExternalProject project, string elementID, string elementTypeName, string elementName, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool isInMaintenanceSpecified, bool IsProjected, bool IsProjectedSpecified, string zoneGuid, string subAreaGuid) {
            this.GetElementDataByIDandTypeAsync(project, elementID, elementTypeName, elementName, aliasName1, aliasName2, description, isInMaintenance, isInMaintenanceSpecified, IsProjected, IsProjectedSpecified, zoneGuid, subAreaGuid, null);
        }
        
        /// <remarks/>
        public void GetElementDataByIDandTypeAsync(ExternalProject project, string elementID, string elementTypeName, string elementName, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool isInMaintenanceSpecified, bool IsProjected, bool IsProjectedSpecified, string zoneGuid, string subAreaGuid, object userState) {
            if ((this.GetElementDataByIDandTypeOperationCompleted == null)) {
                this.GetElementDataByIDandTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetElementDataByIDandTypeOperationCompleted);
            }
            this.InvokeAsync("GetElementDataByIDandType", new object[] {
                        project,
                        elementID,
                        elementTypeName,
                        elementName,
                        aliasName1,
                        aliasName2,
                        description,
                        isInMaintenance,
                        isInMaintenanceSpecified,
                        IsProjected,
                        IsProjectedSpecified,
                        zoneGuid,
                        subAreaGuid}, this.GetElementDataByIDandTypeOperationCompleted, userState);
        }
        
        private void OnGetElementDataByIDandTypeOperationCompleted(object arg) {
            if ((this.GetElementDataByIDandTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetElementDataByIDandTypeCompleted(this, new GetElementDataByIDandTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/SetElementAttribute", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetElementAttribute([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string elementName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string elementType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string attributeName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string attributeValue, out bool SetElementAttributeResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool SetElementAttributeResultSpecified) {
            object[] results = this.Invoke("SetElementAttribute", new object[] {
                        project,
                        elementName,
                        elementType,
                        attributeName,
                        attributeValue});
            SetElementAttributeResult = ((bool)(results[0]));
            SetElementAttributeResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void SetElementAttributeAsync(ExternalProject project, string elementName, string elementType, string attributeName, string attributeValue) {
            this.SetElementAttributeAsync(project, elementName, elementType, attributeName, attributeValue, null);
        }
        
        /// <remarks/>
        public void SetElementAttributeAsync(ExternalProject project, string elementName, string elementType, string attributeName, string attributeValue, object userState) {
            if ((this.SetElementAttributeOperationCompleted == null)) {
                this.SetElementAttributeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetElementAttributeOperationCompleted);
            }
            this.InvokeAsync("SetElementAttribute", new object[] {
                        project,
                        elementName,
                        elementType,
                        attributeName,
                        attributeValue}, this.SetElementAttributeOperationCompleted, userState);
        }
        
        private void OnSetElementAttributeOperationCompleted(object arg) {
            if ((this.SetElementAttributeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetElementAttributeCompleted(this, new SetElementAttributeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/SetElementAttributeByID", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetElementAttributeByID([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string elementID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string attributeName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string attributeValue, out bool SetElementAttributeByIDResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool SetElementAttributeByIDResultSpecified) {
            object[] results = this.Invoke("SetElementAttributeByID", new object[] {
                        project,
                        elementID,
                        attributeName,
                        attributeValue});
            SetElementAttributeByIDResult = ((bool)(results[0]));
            SetElementAttributeByIDResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void SetElementAttributeByIDAsync(ExternalProject project, string elementID, string attributeName, string attributeValue) {
            this.SetElementAttributeByIDAsync(project, elementID, attributeName, attributeValue, null);
        }
        
        /// <remarks/>
        public void SetElementAttributeByIDAsync(ExternalProject project, string elementID, string attributeName, string attributeValue, object userState) {
            if ((this.SetElementAttributeByIDOperationCompleted == null)) {
                this.SetElementAttributeByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetElementAttributeByIDOperationCompleted);
            }
            this.InvokeAsync("SetElementAttributeByID", new object[] {
                        project,
                        elementID,
                        attributeName,
                        attributeValue}, this.SetElementAttributeByIDOperationCompleted, userState);
        }
        
        private void OnSetElementAttributeByIDOperationCompleted(object arg) {
            if ((this.SetElementAttributeByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetElementAttributeByIDCompleted(this, new SetElementAttributeByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/GetElementAttributeByID", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetElementAttributeByID([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string projectName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string elementID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string attributeName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string attributeValue, out bool GetElementAttributeByIDResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool GetElementAttributeByIDResultSpecified) {
            object[] results = this.Invoke("GetElementAttributeByID", new object[] {
                        projectName,
                        elementID,
                        attributeName,
                        attributeValue});
            attributeValue = ((string)(results[0]));
            GetElementAttributeByIDResult = ((bool)(results[1]));
            GetElementAttributeByIDResultSpecified = ((bool)(results[2]));
        }
        
        /// <remarks/>
        public void GetElementAttributeByIDAsync(string projectName, string elementID, string attributeName, string attributeValue) {
            this.GetElementAttributeByIDAsync(projectName, elementID, attributeName, attributeValue, null);
        }
        
        /// <remarks/>
        public void GetElementAttributeByIDAsync(string projectName, string elementID, string attributeName, string attributeValue, object userState) {
            if ((this.GetElementAttributeByIDOperationCompleted == null)) {
                this.GetElementAttributeByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetElementAttributeByIDOperationCompleted);
            }
            this.InvokeAsync("GetElementAttributeByID", new object[] {
                        projectName,
                        elementID,
                        attributeName,
                        attributeValue}, this.GetElementAttributeByIDOperationCompleted, userState);
        }
        
        private void OnGetElementAttributeByIDOperationCompleted(object arg) {
            if ((this.GetElementAttributeByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetElementAttributeByIDCompleted(this, new GetElementAttributeByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/GetElementAttributeByName", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetElementAttributeByName([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string projectName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string elementName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string elementType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string attributeName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string attributeValue, out bool GetElementAttributeByNameResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool GetElementAttributeByNameResultSpecified) {
            object[] results = this.Invoke("GetElementAttributeByName", new object[] {
                        projectName,
                        elementName,
                        elementType,
                        attributeName,
                        attributeValue});
            attributeValue = ((string)(results[0]));
            GetElementAttributeByNameResult = ((bool)(results[1]));
            GetElementAttributeByNameResultSpecified = ((bool)(results[2]));
        }
        
        /// <remarks/>
        public void GetElementAttributeByNameAsync(string projectName, string elementName, string elementType, string attributeName, string attributeValue) {
            this.GetElementAttributeByNameAsync(projectName, elementName, elementType, attributeName, attributeValue, null);
        }
        
        /// <remarks/>
        public void GetElementAttributeByNameAsync(string projectName, string elementName, string elementType, string attributeName, string attributeValue, object userState) {
            if ((this.GetElementAttributeByNameOperationCompleted == null)) {
                this.GetElementAttributeByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetElementAttributeByNameOperationCompleted);
            }
            this.InvokeAsync("GetElementAttributeByName", new object[] {
                        projectName,
                        elementName,
                        elementType,
                        attributeName,
                        attributeValue}, this.GetElementAttributeByNameOperationCompleted, userState);
        }
        
        private void OnGetElementAttributeByNameOperationCompleted(object arg) {
            if ((this.GetElementAttributeByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetElementAttributeByNameCompleted(this, new GetElementAttributeByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/AddReadAllRoleToProject", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddReadAllRoleToProject([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, out bool AddReadAllRoleToProjectResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool AddReadAllRoleToProjectResultSpecified) {
            object[] results = this.Invoke("AddReadAllRoleToProject", new object[] {
                        project});
            AddReadAllRoleToProjectResult = ((bool)(results[0]));
            AddReadAllRoleToProjectResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void AddReadAllRoleToProjectAsync(ExternalProject project) {
            this.AddReadAllRoleToProjectAsync(project, null);
        }
        
        /// <remarks/>
        public void AddReadAllRoleToProjectAsync(ExternalProject project, object userState) {
            if ((this.AddReadAllRoleToProjectOperationCompleted == null)) {
                this.AddReadAllRoleToProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddReadAllRoleToProjectOperationCompleted);
            }
            this.InvokeAsync("AddReadAllRoleToProject", new object[] {
                        project}, this.AddReadAllRoleToProjectOperationCompleted, userState);
        }
        
        private void OnAddReadAllRoleToProjectOperationCompleted(object arg) {
            if ((this.AddReadAllRoleToProjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddReadAllRoleToProjectCompleted(this, new AddReadAllRoleToProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/AddVoltageLevel", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string AddVoltageLevel([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, double un, [System.Xml.Serialization.XmlIgnoreAttribute()] bool unSpecified, int colorR, [System.Xml.Serialization.XmlIgnoreAttribute()] bool colorRSpecified, int colorG, [System.Xml.Serialization.XmlIgnoreAttribute()] bool colorGSpecified, int colorB, [System.Xml.Serialization.XmlIgnoreAttribute()] bool colorBSpecified) {
            object[] results = this.Invoke("AddVoltageLevel", new object[] {
                        project,
                        un,
                        unSpecified,
                        colorR,
                        colorRSpecified,
                        colorG,
                        colorGSpecified,
                        colorB,
                        colorBSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddVoltageLevelAsync(ExternalProject project, double un, bool unSpecified, int colorR, bool colorRSpecified, int colorG, bool colorGSpecified, int colorB, bool colorBSpecified) {
            this.AddVoltageLevelAsync(project, un, unSpecified, colorR, colorRSpecified, colorG, colorGSpecified, colorB, colorBSpecified, null);
        }
        
        /// <remarks/>
        public void AddVoltageLevelAsync(ExternalProject project, double un, bool unSpecified, int colorR, bool colorRSpecified, int colorG, bool colorGSpecified, int colorB, bool colorBSpecified, object userState) {
            if ((this.AddVoltageLevelOperationCompleted == null)) {
                this.AddVoltageLevelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddVoltageLevelOperationCompleted);
            }
            this.InvokeAsync("AddVoltageLevel", new object[] {
                        project,
                        un,
                        unSpecified,
                        colorR,
                        colorRSpecified,
                        colorG,
                        colorGSpecified,
                        colorB,
                        colorBSpecified}, this.AddVoltageLevelOperationCompleted, userState);
        }
        
        private void OnAddVoltageLevelOperationCompleted(object arg) {
            if ((this.AddVoltageLevelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddVoltageLevelCompleted(this, new AddVoltageLevelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/SetDiagramMinValues", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetDiagramMinValues([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, double xMin, [System.Xml.Serialization.XmlIgnoreAttribute()] bool xMinSpecified, double yMin, [System.Xml.Serialization.XmlIgnoreAttribute()] bool yMinSpecified, short units, [System.Xml.Serialization.XmlIgnoreAttribute()] bool unitsSpecified, double factorXY, [System.Xml.Serialization.XmlIgnoreAttribute()] bool factorXYSpecified, double angle, [System.Xml.Serialization.XmlIgnoreAttribute()] bool angleSpecified) {
            this.Invoke("SetDiagramMinValues", new object[] {
                        project,
                        xMin,
                        xMinSpecified,
                        yMin,
                        yMinSpecified,
                        units,
                        unitsSpecified,
                        factorXY,
                        factorXYSpecified,
                        angle,
                        angleSpecified});
        }
        
        /// <remarks/>
        public void SetDiagramMinValuesAsync(ExternalProject project, double xMin, bool xMinSpecified, double yMin, bool yMinSpecified, short units, bool unitsSpecified, double factorXY, bool factorXYSpecified, double angle, bool angleSpecified) {
            this.SetDiagramMinValuesAsync(project, xMin, xMinSpecified, yMin, yMinSpecified, units, unitsSpecified, factorXY, factorXYSpecified, angle, angleSpecified, null);
        }
        
        /// <remarks/>
        public void SetDiagramMinValuesAsync(ExternalProject project, double xMin, bool xMinSpecified, double yMin, bool yMinSpecified, short units, bool unitsSpecified, double factorXY, bool factorXYSpecified, double angle, bool angleSpecified, object userState) {
            if ((this.SetDiagramMinValuesOperationCompleted == null)) {
                this.SetDiagramMinValuesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDiagramMinValuesOperationCompleted);
            }
            this.InvokeAsync("SetDiagramMinValues", new object[] {
                        project,
                        xMin,
                        xMinSpecified,
                        yMin,
                        yMinSpecified,
                        units,
                        unitsSpecified,
                        factorXY,
                        factorXYSpecified,
                        angle,
                        angleSpecified}, this.SetDiagramMinValuesOperationCompleted, userState);
        }
        
        private void OnSetDiagramMinValuesOperationCompleted(object arg) {
            if ((this.SetDiagramMinValuesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDiagramMinValuesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/SetLineStyle", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetLineStyle([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string lineType, short lineStyle, [System.Xml.Serialization.XmlIgnoreAttribute()] bool lineStyleSpecified, out bool SetLineStyleResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool SetLineStyleResultSpecified) {
            object[] results = this.Invoke("SetLineStyle", new object[] {
                        project,
                        lineType,
                        lineStyle,
                        lineStyleSpecified});
            SetLineStyleResult = ((bool)(results[0]));
            SetLineStyleResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void SetLineStyleAsync(ExternalProject project, string lineType, short lineStyle, bool lineStyleSpecified) {
            this.SetLineStyleAsync(project, lineType, lineStyle, lineStyleSpecified, null);
        }
        
        /// <remarks/>
        public void SetLineStyleAsync(ExternalProject project, string lineType, short lineStyle, bool lineStyleSpecified, object userState) {
            if ((this.SetLineStyleOperationCompleted == null)) {
                this.SetLineStyleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetLineStyleOperationCompleted);
            }
            this.InvokeAsync("SetLineStyle", new object[] {
                        project,
                        lineType,
                        lineStyle,
                        lineStyleSpecified}, this.SetLineStyleOperationCompleted, userState);
        }
        
        private void OnSetLineStyleOperationCompleted(object arg) {
            if ((this.SetLineStyleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetLineStyleCompleted(this, new SetLineStyleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/SetDefaultValues", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetDefaultValues([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref ExternalProject project, short defaultType, [System.Xml.Serialization.XmlIgnoreAttribute()] bool defaultTypeSpecified, short phaseDomination, [System.Xml.Serialization.XmlIgnoreAttribute()] bool phaseDominationSpecified, bool isAnsi, [System.Xml.Serialization.XmlIgnoreAttribute()] bool isAnsiSpecified, out bool SetDefaultValuesResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool SetDefaultValuesResultSpecified) {
            object[] results = this.Invoke("SetDefaultValues", new object[] {
                        project,
                        defaultType,
                        defaultTypeSpecified,
                        phaseDomination,
                        phaseDominationSpecified,
                        isAnsi,
                        isAnsiSpecified});
            project = ((ExternalProject)(results[0]));
            SetDefaultValuesResult = ((bool)(results[1]));
            SetDefaultValuesResultSpecified = ((bool)(results[2]));
        }
        
        /// <remarks/>
        public void SetDefaultValuesAsync(ExternalProject project, short defaultType, bool defaultTypeSpecified, short phaseDomination, bool phaseDominationSpecified, bool isAnsi, bool isAnsiSpecified) {
            this.SetDefaultValuesAsync(project, defaultType, defaultTypeSpecified, phaseDomination, phaseDominationSpecified, isAnsi, isAnsiSpecified, null);
        }
        
        /// <remarks/>
        public void SetDefaultValuesAsync(ExternalProject project, short defaultType, bool defaultTypeSpecified, short phaseDomination, bool phaseDominationSpecified, bool isAnsi, bool isAnsiSpecified, object userState) {
            if ((this.SetDefaultValuesOperationCompleted == null)) {
                this.SetDefaultValuesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDefaultValuesOperationCompleted);
            }
            this.InvokeAsync("SetDefaultValues", new object[] {
                        project,
                        defaultType,
                        defaultTypeSpecified,
                        phaseDomination,
                        phaseDominationSpecified,
                        isAnsi,
                        isAnsiSpecified}, this.SetDefaultValuesOperationCompleted, userState);
        }
        
        private void OnSetDefaultValuesOperationCompleted(object arg) {
            if ((this.SetDefaultValuesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDefaultValuesCompleted(this, new SetDefaultValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/SetDiagramParameterAttribute", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetDiagramParameterAttribute([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string parameterType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string attributeName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string attributeValue, out bool SetDiagramParameterAttributeResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool SetDiagramParameterAttributeResultSpecified) {
            object[] results = this.Invoke("SetDiagramParameterAttribute", new object[] {
                        project,
                        parameterType,
                        attributeName,
                        attributeValue});
            SetDiagramParameterAttributeResult = ((bool)(results[0]));
            SetDiagramParameterAttributeResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void SetDiagramParameterAttributeAsync(ExternalProject project, string parameterType, string attributeName, string attributeValue) {
            this.SetDiagramParameterAttributeAsync(project, parameterType, attributeName, attributeValue, null);
        }
        
        /// <remarks/>
        public void SetDiagramParameterAttributeAsync(ExternalProject project, string parameterType, string attributeName, string attributeValue, object userState) {
            if ((this.SetDiagramParameterAttributeOperationCompleted == null)) {
                this.SetDiagramParameterAttributeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDiagramParameterAttributeOperationCompleted);
            }
            this.InvokeAsync("SetDiagramParameterAttribute", new object[] {
                        project,
                        parameterType,
                        attributeName,
                        attributeValue}, this.SetDiagramParameterAttributeOperationCompleted, userState);
        }
        
        private void OnSetDiagramParameterAttributeOperationCompleted(object arg) {
            if ((this.SetDiagramParameterAttributeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDiagramParameterAttributeCompleted(this, new SetDiagramParameterAttributeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/SetCalcParameterAttribute", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetCalcParameterAttribute([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string parameterType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string attributeName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string attributeValue, out bool SetCalcParameterAttributeResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool SetCalcParameterAttributeResultSpecified) {
            object[] results = this.Invoke("SetCalcParameterAttribute", new object[] {
                        project,
                        parameterType,
                        attributeName,
                        attributeValue});
            SetCalcParameterAttributeResult = ((bool)(results[0]));
            SetCalcParameterAttributeResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void SetCalcParameterAttributeAsync(ExternalProject project, string parameterType, string attributeName, string attributeValue) {
            this.SetCalcParameterAttributeAsync(project, parameterType, attributeName, attributeValue, null);
        }
        
        /// <remarks/>
        public void SetCalcParameterAttributeAsync(ExternalProject project, string parameterType, string attributeName, string attributeValue, object userState) {
            if ((this.SetCalcParameterAttributeOperationCompleted == null)) {
                this.SetCalcParameterAttributeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetCalcParameterAttributeOperationCompleted);
            }
            this.InvokeAsync("SetCalcParameterAttribute", new object[] {
                        project,
                        parameterType,
                        attributeName,
                        attributeValue}, this.SetCalcParameterAttributeOperationCompleted, userState);
        }
        
        private void OnSetCalcParameterAttributeOperationCompleted(object arg) {
            if ((this.SetCalcParameterAttributeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetCalcParameterAttributeCompleted(this, new SetCalcParameterAttributeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/SetGraphicLayerWorldCoordinates", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetGraphicLayerWorldCoordinates([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, bool isDirectionUpY, [System.Xml.Serialization.XmlIgnoreAttribute()] bool isDirectionUpYSpecified, double factor, [System.Xml.Serialization.XmlIgnoreAttribute()] bool factorSpecified, double angle, [System.Xml.Serialization.XmlIgnoreAttribute()] bool angleSpecified, double offsetZeroPoint, [System.Xml.Serialization.XmlIgnoreAttribute()] bool offsetZeroPointSpecified, out bool SetGraphicLayerWorldCoordinatesResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool SetGraphicLayerWorldCoordinatesResultSpecified) {
            object[] results = this.Invoke("SetGraphicLayerWorldCoordinates", new object[] {
                        project,
                        isDirectionUpY,
                        isDirectionUpYSpecified,
                        factor,
                        factorSpecified,
                        angle,
                        angleSpecified,
                        offsetZeroPoint,
                        offsetZeroPointSpecified});
            SetGraphicLayerWorldCoordinatesResult = ((bool)(results[0]));
            SetGraphicLayerWorldCoordinatesResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void SetGraphicLayerWorldCoordinatesAsync(ExternalProject project, bool isDirectionUpY, bool isDirectionUpYSpecified, double factor, bool factorSpecified, double angle, bool angleSpecified, double offsetZeroPoint, bool offsetZeroPointSpecified) {
            this.SetGraphicLayerWorldCoordinatesAsync(project, isDirectionUpY, isDirectionUpYSpecified, factor, factorSpecified, angle, angleSpecified, offsetZeroPoint, offsetZeroPointSpecified, null);
        }
        
        /// <remarks/>
        public void SetGraphicLayerWorldCoordinatesAsync(ExternalProject project, bool isDirectionUpY, bool isDirectionUpYSpecified, double factor, bool factorSpecified, double angle, bool angleSpecified, double offsetZeroPoint, bool offsetZeroPointSpecified, object userState) {
            if ((this.SetGraphicLayerWorldCoordinatesOperationCompleted == null)) {
                this.SetGraphicLayerWorldCoordinatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetGraphicLayerWorldCoordinatesOperationCompleted);
            }
            this.InvokeAsync("SetGraphicLayerWorldCoordinates", new object[] {
                        project,
                        isDirectionUpY,
                        isDirectionUpYSpecified,
                        factor,
                        factorSpecified,
                        angle,
                        angleSpecified,
                        offsetZeroPoint,
                        offsetZeroPointSpecified}, this.SetGraphicLayerWorldCoordinatesOperationCompleted, userState);
        }
        
        private void OnSetGraphicLayerWorldCoordinatesOperationCompleted(object arg) {
            if ((this.SetGraphicLayerWorldCoordinatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetGraphicLayerWorldCoordinatesCompleted(this, new SetGraphicLayerWorldCoordinatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/AddNodesFromList", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddNodesFromList([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref ExternalProject project, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="")] ImportElementItem[] listElements, out bool AddNodesFromListResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool AddNodesFromListResultSpecified) {
            object[] results = this.Invoke("AddNodesFromList", new object[] {
                        project,
                        listElements});
            project = ((ExternalProject)(results[0]));
            AddNodesFromListResult = ((bool)(results[1]));
            AddNodesFromListResultSpecified = ((bool)(results[2]));
        }
        
        /// <remarks/>
        public void AddNodesFromListAsync(ExternalProject project, ImportElementItem[] listElements) {
            this.AddNodesFromListAsync(project, listElements, null);
        }
        
        /// <remarks/>
        public void AddNodesFromListAsync(ExternalProject project, ImportElementItem[] listElements, object userState) {
            if ((this.AddNodesFromListOperationCompleted == null)) {
                this.AddNodesFromListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddNodesFromListOperationCompleted);
            }
            this.InvokeAsync("AddNodesFromList", new object[] {
                        project,
                        listElements}, this.AddNodesFromListOperationCompleted, userState);
        }
        
        private void OnAddNodesFromListOperationCompleted(object arg) {
            if ((this.AddNodesFromListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddNodesFromListCompleted(this, new AddNodesFromListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/AddElementsFromList", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddElementsFromList([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref ExternalProject project, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="")] ImportElementItem[] listElements, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string elementTypeName, out bool AddElementsFromListResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool AddElementsFromListResultSpecified) {
            object[] results = this.Invoke("AddElementsFromList", new object[] {
                        project,
                        listElements,
                        elementTypeName});
            project = ((ExternalProject)(results[0]));
            AddElementsFromListResult = ((bool)(results[1]));
            AddElementsFromListResultSpecified = ((bool)(results[2]));
        }
        
        /// <remarks/>
        public void AddElementsFromListAsync(ExternalProject project, ImportElementItem[] listElements, string elementTypeName) {
            this.AddElementsFromListAsync(project, listElements, elementTypeName, null);
        }
        
        /// <remarks/>
        public void AddElementsFromListAsync(ExternalProject project, ImportElementItem[] listElements, string elementTypeName, object userState) {
            if ((this.AddElementsFromListOperationCompleted == null)) {
                this.AddElementsFromListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddElementsFromListOperationCompleted);
            }
            this.InvokeAsync("AddElementsFromList", new object[] {
                        project,
                        listElements,
                        elementTypeName}, this.AddElementsFromListOperationCompleted, userState);
        }
        
        private void OnAddElementsFromListOperationCompleted(object arg) {
            if ((this.AddElementsFromListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddElementsFromListCompleted(this, new AddElementsFromListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/AddSubLoadsFromList", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddSubLoadsFromList([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref ExternalProject project, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External")] LoadData[] listLoadData, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string loadID, out bool AddSubLoadsFromListResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool AddSubLoadsFromListResultSpecified) {
            object[] results = this.Invoke("AddSubLoadsFromList", new object[] {
                        project,
                        listLoadData,
                        loadID});
            project = ((ExternalProject)(results[0]));
            AddSubLoadsFromListResult = ((bool)(results[1]));
            AddSubLoadsFromListResultSpecified = ((bool)(results[2]));
        }
        
        /// <remarks/>
        public void AddSubLoadsFromListAsync(ExternalProject project, LoadData[] listLoadData, string loadID) {
            this.AddSubLoadsFromListAsync(project, listLoadData, loadID, null);
        }
        
        /// <remarks/>
        public void AddSubLoadsFromListAsync(ExternalProject project, LoadData[] listLoadData, string loadID, object userState) {
            if ((this.AddSubLoadsFromListOperationCompleted == null)) {
                this.AddSubLoadsFromListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSubLoadsFromListOperationCompleted);
            }
            this.InvokeAsync("AddSubLoadsFromList", new object[] {
                        project,
                        listLoadData,
                        loadID}, this.AddSubLoadsFromListOperationCompleted, userState);
        }
        
        private void OnAddSubLoadsFromListOperationCompleted(object arg) {
            if ((this.AddSubLoadsFromListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSubLoadsFromListCompleted(this, new AddSubLoadsFromListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/SetDateTimeLastSave", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetDateTimeLastSave([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project) {
            this.Invoke("SetDateTimeLastSave", new object[] {
                        project});
        }
        
        /// <remarks/>
        public void SetDateTimeLastSaveAsync(ExternalProject project) {
            this.SetDateTimeLastSaveAsync(project, null);
        }
        
        /// <remarks/>
        public void SetDateTimeLastSaveAsync(ExternalProject project, object userState) {
            if ((this.SetDateTimeLastSaveOperationCompleted == null)) {
                this.SetDateTimeLastSaveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDateTimeLastSaveOperationCompleted);
            }
            this.InvokeAsync("SetDateTimeLastSave", new object[] {
                        project}, this.SetDateTimeLastSaveOperationCompleted, userState);
        }
        
        private void OnSetDateTimeLastSaveOperationCompleted(object arg) {
            if ((this.SetDateTimeLastSaveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDateTimeLastSaveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/GetResultSummary", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetResultSummary([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string analysisType, System.DateTime simulationDateTime, [System.Xml.Serialization.XmlIgnoreAttribute()] bool simulationDateTimeSpecified, int networkTypeGroup, [System.Xml.Serialization.XmlIgnoreAttribute()] bool networkTypeGroupSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string networkTypeGroupID) {
            object[] results = this.Invoke("GetResultSummary", new object[] {
                        project,
                        analysisType,
                        simulationDateTime,
                        simulationDateTimeSpecified,
                        networkTypeGroup,
                        networkTypeGroupSpecified,
                        networkTypeGroupID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetResultSummaryAsync(ExternalProject project, string analysisType, System.DateTime simulationDateTime, bool simulationDateTimeSpecified, int networkTypeGroup, bool networkTypeGroupSpecified, string networkTypeGroupID) {
            this.GetResultSummaryAsync(project, analysisType, simulationDateTime, simulationDateTimeSpecified, networkTypeGroup, networkTypeGroupSpecified, networkTypeGroupID, null);
        }
        
        /// <remarks/>
        public void GetResultSummaryAsync(ExternalProject project, string analysisType, System.DateTime simulationDateTime, bool simulationDateTimeSpecified, int networkTypeGroup, bool networkTypeGroupSpecified, string networkTypeGroupID, object userState) {
            if ((this.GetResultSummaryOperationCompleted == null)) {
                this.GetResultSummaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResultSummaryOperationCompleted);
            }
            this.InvokeAsync("GetResultSummary", new object[] {
                        project,
                        analysisType,
                        simulationDateTime,
                        simulationDateTimeSpecified,
                        networkTypeGroup,
                        networkTypeGroupSpecified,
                        networkTypeGroupID}, this.GetResultSummaryOperationCompleted, userState);
        }
        
        private void OnGetResultSummaryOperationCompleted(object arg) {
            if ((this.GetResultSummaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResultSummaryCompleted(this, new GetResultSummaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/GetListResultSummary", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] GetListResultSummary([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string analysisType, System.DateTime simulationDateTime, [System.Xml.Serialization.XmlIgnoreAttribute()] bool simulationDateTimeSpecified, int networkTypeGroup, [System.Xml.Serialization.XmlIgnoreAttribute()] bool networkTypeGroupSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string networkTypeGroupID) {
            object[] results = this.Invoke("GetListResultSummary", new object[] {
                        project,
                        analysisType,
                        simulationDateTime,
                        simulationDateTimeSpecified,
                        networkTypeGroup,
                        networkTypeGroupSpecified,
                        networkTypeGroupID});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetListResultSummaryAsync(ExternalProject project, string analysisType, System.DateTime simulationDateTime, bool simulationDateTimeSpecified, int networkTypeGroup, bool networkTypeGroupSpecified, string networkTypeGroupID) {
            this.GetListResultSummaryAsync(project, analysisType, simulationDateTime, simulationDateTimeSpecified, networkTypeGroup, networkTypeGroupSpecified, networkTypeGroupID, null);
        }
        
        /// <remarks/>
        public void GetListResultSummaryAsync(ExternalProject project, string analysisType, System.DateTime simulationDateTime, bool simulationDateTimeSpecified, int networkTypeGroup, bool networkTypeGroupSpecified, string networkTypeGroupID, object userState) {
            if ((this.GetListResultSummaryOperationCompleted == null)) {
                this.GetListResultSummaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListResultSummaryOperationCompleted);
            }
            this.InvokeAsync("GetListResultSummary", new object[] {
                        project,
                        analysisType,
                        simulationDateTime,
                        simulationDateTimeSpecified,
                        networkTypeGroup,
                        networkTypeGroupSpecified,
                        networkTypeGroupID}, this.GetListResultSummaryOperationCompleted, userState);
        }
        
        private void OnGetListResultSummaryOperationCompleted(object arg) {
            if ((this.GetListResultSummaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListResultSummaryCompleted(this, new GetListResultSummaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/GetAllElementResults", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.External")]
        public NeplanServiceElementResult[] GetAllElementResults([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string analysisType) {
            object[] results = this.Invoke("GetAllElementResults", new object[] {
                        project,
                        analysisType});
            return ((NeplanServiceElementResult[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllElementResultsAsync(ExternalProject project, string analysisType) {
            this.GetAllElementResultsAsync(project, analysisType, null);
        }
        
        /// <remarks/>
        public void GetAllElementResultsAsync(ExternalProject project, string analysisType, object userState) {
            if ((this.GetAllElementResultsOperationCompleted == null)) {
                this.GetAllElementResultsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllElementResultsOperationCompleted);
            }
            this.InvokeAsync("GetAllElementResults", new object[] {
                        project,
                        analysisType}, this.GetAllElementResultsOperationCompleted, userState);
        }
        
        private void OnGetAllElementResultsOperationCompleted(object arg) {
            if ((this.GetAllElementResultsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllElementResultsCompleted(this, new GetAllElementResultsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/GetCalculationSettings", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetCalculationSettings([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string analysisType) {
            object[] results = this.Invoke("GetCalculationSettings", new object[] {
                        project,
                        analysisType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCalculationSettingsAsync(ExternalProject project, string analysisType) {
            this.GetCalculationSettingsAsync(project, analysisType, null);
        }
        
        /// <remarks/>
        public void GetCalculationSettingsAsync(ExternalProject project, string analysisType, object userState) {
            if ((this.GetCalculationSettingsOperationCompleted == null)) {
                this.GetCalculationSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCalculationSettingsOperationCompleted);
            }
            this.InvokeAsync("GetCalculationSettings", new object[] {
                        project,
                        analysisType}, this.GetCalculationSettingsOperationCompleted, userState);
        }
        
        private void OnGetCalculationSettingsOperationCompleted(object arg) {
            if ((this.GetCalculationSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCalculationSettingsCompleted(this, new GetCalculationSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/GetResultElementByID", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetResultElementByID([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string elementID, int portNr, [System.Xml.Serialization.XmlIgnoreAttribute()] bool portNrSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string analysisType, System.DateTime simulationDateTime, [System.Xml.Serialization.XmlIgnoreAttribute()] bool simulationDateTimeSpecified) {
            object[] results = this.Invoke("GetResultElementByID", new object[] {
                        project,
                        elementID,
                        portNr,
                        portNrSpecified,
                        analysisType,
                        simulationDateTime,
                        simulationDateTimeSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetResultElementByIDAsync(ExternalProject project, string elementID, int portNr, bool portNrSpecified, string analysisType, System.DateTime simulationDateTime, bool simulationDateTimeSpecified) {
            this.GetResultElementByIDAsync(project, elementID, portNr, portNrSpecified, analysisType, simulationDateTime, simulationDateTimeSpecified, null);
        }
        
        /// <remarks/>
        public void GetResultElementByIDAsync(ExternalProject project, string elementID, int portNr, bool portNrSpecified, string analysisType, System.DateTime simulationDateTime, bool simulationDateTimeSpecified, object userState) {
            if ((this.GetResultElementByIDOperationCompleted == null)) {
                this.GetResultElementByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResultElementByIDOperationCompleted);
            }
            this.InvokeAsync("GetResultElementByID", new object[] {
                        project,
                        elementID,
                        portNr,
                        portNrSpecified,
                        analysisType,
                        simulationDateTime,
                        simulationDateTimeSpecified}, this.GetResultElementByIDOperationCompleted, userState);
        }
        
        private void OnGetResultElementByIDOperationCompleted(object arg) {
            if ((this.GetResultElementByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResultElementByIDCompleted(this, new GetResultElementByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/GetResultsElementsByID", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.External")]
        public NeplanServiceElementResult[] GetResultsElementsByID([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] elementID, int portNr, [System.Xml.Serialization.XmlIgnoreAttribute()] bool portNrSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string analysisType, System.DateTime simulationDateTime, [System.Xml.Serialization.XmlIgnoreAttribute()] bool simulationDateTimeSpecified) {
            object[] results = this.Invoke("GetResultsElementsByID", new object[] {
                        project,
                        elementID,
                        portNr,
                        portNrSpecified,
                        analysisType,
                        simulationDateTime,
                        simulationDateTimeSpecified});
            return ((NeplanServiceElementResult[])(results[0]));
        }
        
        /// <remarks/>
        public void GetResultsElementsByIDAsync(ExternalProject project, string[] elementID, int portNr, bool portNrSpecified, string analysisType, System.DateTime simulationDateTime, bool simulationDateTimeSpecified) {
            this.GetResultsElementsByIDAsync(project, elementID, portNr, portNrSpecified, analysisType, simulationDateTime, simulationDateTimeSpecified, null);
        }
        
        /// <remarks/>
        public void GetResultsElementsByIDAsync(ExternalProject project, string[] elementID, int portNr, bool portNrSpecified, string analysisType, System.DateTime simulationDateTime, bool simulationDateTimeSpecified, object userState) {
            if ((this.GetResultsElementsByIDOperationCompleted == null)) {
                this.GetResultsElementsByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResultsElementsByIDOperationCompleted);
            }
            this.InvokeAsync("GetResultsElementsByID", new object[] {
                        project,
                        elementID,
                        portNr,
                        portNrSpecified,
                        analysisType,
                        simulationDateTime,
                        simulationDateTimeSpecified}, this.GetResultsElementsByIDOperationCompleted, userState);
        }
        
        private void OnGetResultsElementsByIDOperationCompleted(object arg) {
            if ((this.GetResultsElementsByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResultsElementsByIDCompleted(this, new GetResultsElementsByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/GetResultElementByName", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetResultElementByName([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string elementName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string elementTypeName, int portNr, [System.Xml.Serialization.XmlIgnoreAttribute()] bool portNrSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string analysisType, System.DateTime simulationDateTime, [System.Xml.Serialization.XmlIgnoreAttribute()] bool simulationDateTimeSpecified) {
            object[] results = this.Invoke("GetResultElementByName", new object[] {
                        project,
                        elementName,
                        elementTypeName,
                        portNr,
                        portNrSpecified,
                        analysisType,
                        simulationDateTime,
                        simulationDateTimeSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetResultElementByNameAsync(ExternalProject project, string elementName, string elementTypeName, int portNr, bool portNrSpecified, string analysisType, System.DateTime simulationDateTime, bool simulationDateTimeSpecified) {
            this.GetResultElementByNameAsync(project, elementName, elementTypeName, portNr, portNrSpecified, analysisType, simulationDateTime, simulationDateTimeSpecified, null);
        }
        
        /// <remarks/>
        public void GetResultElementByNameAsync(ExternalProject project, string elementName, string elementTypeName, int portNr, bool portNrSpecified, string analysisType, System.DateTime simulationDateTime, bool simulationDateTimeSpecified, object userState) {
            if ((this.GetResultElementByNameOperationCompleted == null)) {
                this.GetResultElementByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResultElementByNameOperationCompleted);
            }
            this.InvokeAsync("GetResultElementByName", new object[] {
                        project,
                        elementName,
                        elementTypeName,
                        portNr,
                        portNrSpecified,
                        analysisType,
                        simulationDateTime,
                        simulationDateTimeSpecified}, this.GetResultElementByNameOperationCompleted, userState);
        }
        
        private void OnGetResultElementByNameOperationCompleted(object arg) {
            if ((this.GetResultElementByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResultElementByNameCompleted(this, new GetResultElementByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/AnalyseVariantWithAnalysisSetting" +
            "s", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public AnalysisReturnInfo AnalyseVariantWithAnalysisSettings([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string analysisRefenceID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string analysisModule, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string calcNameID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string analysisMethode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string conditions, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string analysisLoadOptionXML, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] AnalysisParameterSettings settings) {
            object[] results = this.Invoke("AnalyseVariantWithAnalysisSettings", new object[] {
                        project,
                        analysisRefenceID,
                        analysisModule,
                        calcNameID,
                        analysisMethode,
                        conditions,
                        analysisLoadOptionXML,
                        settings});
            return ((AnalysisReturnInfo)(results[0]));
        }
        
        /// <remarks/>
        public void AnalyseVariantWithAnalysisSettingsAsync(ExternalProject project, string analysisRefenceID, string analysisModule, string calcNameID, string analysisMethode, string conditions, string analysisLoadOptionXML, AnalysisParameterSettings settings) {
            this.AnalyseVariantWithAnalysisSettingsAsync(project, analysisRefenceID, analysisModule, calcNameID, analysisMethode, conditions, analysisLoadOptionXML, settings, null);
        }
        
        /// <remarks/>
        public void AnalyseVariantWithAnalysisSettingsAsync(ExternalProject project, string analysisRefenceID, string analysisModule, string calcNameID, string analysisMethode, string conditions, string analysisLoadOptionXML, AnalysisParameterSettings settings, object userState) {
            if ((this.AnalyseVariantWithAnalysisSettingsOperationCompleted == null)) {
                this.AnalyseVariantWithAnalysisSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAnalyseVariantWithAnalysisSettingsOperationCompleted);
            }
            this.InvokeAsync("AnalyseVariantWithAnalysisSettings", new object[] {
                        project,
                        analysisRefenceID,
                        analysisModule,
                        calcNameID,
                        analysisMethode,
                        conditions,
                        analysisLoadOptionXML,
                        settings}, this.AnalyseVariantWithAnalysisSettingsOperationCompleted, userState);
        }
        
        private void OnAnalyseVariantWithAnalysisSettingsOperationCompleted(object arg) {
            if ((this.AnalyseVariantWithAnalysisSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AnalyseVariantWithAnalysisSettingsCompleted(this, new AnalyseVariantWithAnalysisSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/AnalyseVariant", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public AnalysisReturnInfo AnalyseVariant([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string analysisRefenceID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string analysisModule, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string calcNameID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string analysisMethode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string conditions, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string analysisLoadOptionXML) {
            object[] results = this.Invoke("AnalyseVariant", new object[] {
                        project,
                        analysisRefenceID,
                        analysisModule,
                        calcNameID,
                        analysisMethode,
                        conditions,
                        analysisLoadOptionXML});
            return ((AnalysisReturnInfo)(results[0]));
        }
        
        /// <remarks/>
        public void AnalyseVariantAsync(ExternalProject project, string analysisRefenceID, string analysisModule, string calcNameID, string analysisMethode, string conditions, string analysisLoadOptionXML) {
            this.AnalyseVariantAsync(project, analysisRefenceID, analysisModule, calcNameID, analysisMethode, conditions, analysisLoadOptionXML, null);
        }
        
        /// <remarks/>
        public void AnalyseVariantAsync(ExternalProject project, string analysisRefenceID, string analysisModule, string calcNameID, string analysisMethode, string conditions, string analysisLoadOptionXML, object userState) {
            if ((this.AnalyseVariantOperationCompleted == null)) {
                this.AnalyseVariantOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAnalyseVariantOperationCompleted);
            }
            this.InvokeAsync("AnalyseVariant", new object[] {
                        project,
                        analysisRefenceID,
                        analysisModule,
                        calcNameID,
                        analysisMethode,
                        conditions,
                        analysisLoadOptionXML}, this.AnalyseVariantOperationCompleted, userState);
        }
        
        private void OnAnalyseVariantOperationCompleted(object arg) {
            if ((this.AnalyseVariantCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AnalyseVariantCompleted(this, new AnalyseVariantCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/IsAnalysisDone", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void IsAnalysisDone([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string analysisRefenceID, out bool IsAnalysisDoneResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool IsAnalysisDoneResultSpecified) {
            object[] results = this.Invoke("IsAnalysisDone", new object[] {
                        analysisRefenceID});
            IsAnalysisDoneResult = ((bool)(results[0]));
            IsAnalysisDoneResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void IsAnalysisDoneAsync(string analysisRefenceID) {
            this.IsAnalysisDoneAsync(analysisRefenceID, null);
        }
        
        /// <remarks/>
        public void IsAnalysisDoneAsync(string analysisRefenceID, object userState) {
            if ((this.IsAnalysisDoneOperationCompleted == null)) {
                this.IsAnalysisDoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsAnalysisDoneOperationCompleted);
            }
            this.InvokeAsync("IsAnalysisDone", new object[] {
                        analysisRefenceID}, this.IsAnalysisDoneOperationCompleted, userState);
        }
        
        private void OnIsAnalysisDoneOperationCompleted(object arg) {
            if ((this.IsAnalysisDoneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsAnalysisDoneCompleted(this, new IsAnalysisDoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/AnalyseWithListFileWithoutSaving", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public AnalysisReturnInfo AnalyseWithListFileWithoutSaving([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uploadName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string analysisModule, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string copySettingsFromProjectName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string fromTime, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string toTime, int timeIncrement, [System.Xml.Serialization.XmlIgnoreAttribute()] bool timeIncrementSpecified) {
            object[] results = this.Invoke("AnalyseWithListFileWithoutSaving", new object[] {
                        uploadName,
                        analysisModule,
                        copySettingsFromProjectName,
                        fromTime,
                        toTime,
                        timeIncrement,
                        timeIncrementSpecified});
            return ((AnalysisReturnInfo)(results[0]));
        }
        
        /// <remarks/>
        public void AnalyseWithListFileWithoutSavingAsync(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement, bool timeIncrementSpecified) {
            this.AnalyseWithListFileWithoutSavingAsync(uploadName, analysisModule, copySettingsFromProjectName, fromTime, toTime, timeIncrement, timeIncrementSpecified, null);
        }
        
        /// <remarks/>
        public void AnalyseWithListFileWithoutSavingAsync(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement, bool timeIncrementSpecified, object userState) {
            if ((this.AnalyseWithListFileWithoutSavingOperationCompleted == null)) {
                this.AnalyseWithListFileWithoutSavingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAnalyseWithListFileWithoutSavingOperationCompleted);
            }
            this.InvokeAsync("AnalyseWithListFileWithoutSaving", new object[] {
                        uploadName,
                        analysisModule,
                        copySettingsFromProjectName,
                        fromTime,
                        toTime,
                        timeIncrement,
                        timeIncrementSpecified}, this.AnalyseWithListFileWithoutSavingOperationCompleted, userState);
        }
        
        private void OnAnalyseWithListFileWithoutSavingOperationCompleted(object arg) {
            if ((this.AnalyseWithListFileWithoutSavingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AnalyseWithListFileWithoutSavingCompleted(this, new AnalyseWithListFileWithoutSavingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/AnalyseWithProjectFileWithoutSavi" +
            "ng", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public AnalysisReturnInfo AnalyseWithProjectFileWithoutSaving([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uploadName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string analysisModule, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string copySettingsFromProjectName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string fromTime, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string toTime, int timeIncrement, [System.Xml.Serialization.XmlIgnoreAttribute()] bool timeIncrementSpecified) {
            object[] results = this.Invoke("AnalyseWithProjectFileWithoutSaving", new object[] {
                        uploadName,
                        analysisModule,
                        copySettingsFromProjectName,
                        fromTime,
                        toTime,
                        timeIncrement,
                        timeIncrementSpecified});
            return ((AnalysisReturnInfo)(results[0]));
        }
        
        /// <remarks/>
        public void AnalyseWithProjectFileWithoutSavingAsync(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement, bool timeIncrementSpecified) {
            this.AnalyseWithProjectFileWithoutSavingAsync(uploadName, analysisModule, copySettingsFromProjectName, fromTime, toTime, timeIncrement, timeIncrementSpecified, null);
        }
        
        /// <remarks/>
        public void AnalyseWithProjectFileWithoutSavingAsync(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement, bool timeIncrementSpecified, object userState) {
            if ((this.AnalyseWithProjectFileWithoutSavingOperationCompleted == null)) {
                this.AnalyseWithProjectFileWithoutSavingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAnalyseWithProjectFileWithoutSavingOperationCompleted);
            }
            this.InvokeAsync("AnalyseWithProjectFileWithoutSaving", new object[] {
                        uploadName,
                        analysisModule,
                        copySettingsFromProjectName,
                        fromTime,
                        toTime,
                        timeIncrement,
                        timeIncrementSpecified}, this.AnalyseWithProjectFileWithoutSavingOperationCompleted, userState);
        }
        
        private void OnAnalyseWithProjectFileWithoutSavingOperationCompleted(object arg) {
            if ((this.AnalyseWithProjectFileWithoutSavingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AnalyseWithProjectFileWithoutSavingCompleted(this, new AnalyseWithProjectFileWithoutSavingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/AnalyseWithCDEFileWithoutSaving", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public AnalysisReturnInfo AnalyseWithCDEFileWithoutSaving([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uploadName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string analysisModule, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string copySettingsFromProjectName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string fromTime, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string toTime, int timeIncrement, [System.Xml.Serialization.XmlIgnoreAttribute()] bool timeIncrementSpecified) {
            object[] results = this.Invoke("AnalyseWithCDEFileWithoutSaving", new object[] {
                        uploadName,
                        analysisModule,
                        copySettingsFromProjectName,
                        fromTime,
                        toTime,
                        timeIncrement,
                        timeIncrementSpecified});
            return ((AnalysisReturnInfo)(results[0]));
        }
        
        /// <remarks/>
        public void AnalyseWithCDEFileWithoutSavingAsync(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement, bool timeIncrementSpecified) {
            this.AnalyseWithCDEFileWithoutSavingAsync(uploadName, analysisModule, copySettingsFromProjectName, fromTime, toTime, timeIncrement, timeIncrementSpecified, null);
        }
        
        /// <remarks/>
        public void AnalyseWithCDEFileWithoutSavingAsync(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement, bool timeIncrementSpecified, object userState) {
            if ((this.AnalyseWithCDEFileWithoutSavingOperationCompleted == null)) {
                this.AnalyseWithCDEFileWithoutSavingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAnalyseWithCDEFileWithoutSavingOperationCompleted);
            }
            this.InvokeAsync("AnalyseWithCDEFileWithoutSaving", new object[] {
                        uploadName,
                        analysisModule,
                        copySettingsFromProjectName,
                        fromTime,
                        toTime,
                        timeIncrement,
                        timeIncrementSpecified}, this.AnalyseWithCDEFileWithoutSavingOperationCompleted, userState);
        }
        
        private void OnAnalyseWithCDEFileWithoutSavingOperationCompleted(object arg) {
            if ((this.AnalyseWithCDEFileWithoutSavingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AnalyseWithCDEFileWithoutSavingCompleted(this, new AnalyseWithCDEFileWithoutSavingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/DoAnalysisFromFiles", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public AnalysisReturnInfo DoAnalysisFromFiles([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uploadName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string analysisModule, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string copySettingsFromProjectName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string fromTime, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string toTime, int timeIncrement, [System.Xml.Serialization.XmlIgnoreAttribute()] bool timeIncrementSpecified) {
            object[] results = this.Invoke("DoAnalysisFromFiles", new object[] {
                        uploadName,
                        analysisModule,
                        copySettingsFromProjectName,
                        fromTime,
                        toTime,
                        timeIncrement,
                        timeIncrementSpecified});
            return ((AnalysisReturnInfo)(results[0]));
        }
        
        /// <remarks/>
        public void DoAnalysisFromFilesAsync(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement, bool timeIncrementSpecified) {
            this.DoAnalysisFromFilesAsync(uploadName, analysisModule, copySettingsFromProjectName, fromTime, toTime, timeIncrement, timeIncrementSpecified, null);
        }
        
        /// <remarks/>
        public void DoAnalysisFromFilesAsync(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement, bool timeIncrementSpecified, object userState) {
            if ((this.DoAnalysisFromFilesOperationCompleted == null)) {
                this.DoAnalysisFromFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoAnalysisFromFilesOperationCompleted);
            }
            this.InvokeAsync("DoAnalysisFromFiles", new object[] {
                        uploadName,
                        analysisModule,
                        copySettingsFromProjectName,
                        fromTime,
                        toTime,
                        timeIncrement,
                        timeIncrementSpecified}, this.DoAnalysisFromFilesOperationCompleted, userState);
        }
        
        private void OnDoAnalysisFromFilesOperationCompleted(object arg) {
            if ((this.DoAnalysisFromFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoAnalysisFromFilesCompleted(this, new DoAnalysisFromFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/EnergyCalculationFromFiles", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public AnalysisReturnInfo EnergyCalculationFromFiles([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uploadName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string fromTime, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string toTime, int timeIncrement, [System.Xml.Serialization.XmlIgnoreAttribute()] bool timeIncrementSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string copySettingsFromProjectName) {
            object[] results = this.Invoke("EnergyCalculationFromFiles", new object[] {
                        uploadName,
                        fromTime,
                        toTime,
                        timeIncrement,
                        timeIncrementSpecified,
                        copySettingsFromProjectName});
            return ((AnalysisReturnInfo)(results[0]));
        }
        
        /// <remarks/>
        public void EnergyCalculationFromFilesAsync(string uploadName, string fromTime, string toTime, int timeIncrement, bool timeIncrementSpecified, string copySettingsFromProjectName) {
            this.EnergyCalculationFromFilesAsync(uploadName, fromTime, toTime, timeIncrement, timeIncrementSpecified, copySettingsFromProjectName, null);
        }
        
        /// <remarks/>
        public void EnergyCalculationFromFilesAsync(string uploadName, string fromTime, string toTime, int timeIncrement, bool timeIncrementSpecified, string copySettingsFromProjectName, object userState) {
            if ((this.EnergyCalculationFromFilesOperationCompleted == null)) {
                this.EnergyCalculationFromFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnergyCalculationFromFilesOperationCompleted);
            }
            this.InvokeAsync("EnergyCalculationFromFiles", new object[] {
                        uploadName,
                        fromTime,
                        toTime,
                        timeIncrement,
                        timeIncrementSpecified,
                        copySettingsFromProjectName}, this.EnergyCalculationFromFilesOperationCompleted, userState);
        }
        
        private void OnEnergyCalculationFromFilesOperationCompleted(object arg) {
            if ((this.EnergyCalculationFromFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnergyCalculationFromFilesCompleted(this, new EnergyCalculationFromFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/LoadAllocationFromDB", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public AnalysisReturnInfo LoadAllocationFromDB([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string projectName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string measurementDefinitionName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string fromTime, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string toTime, int timeIncrement, [System.Xml.Serialization.XmlIgnoreAttribute()] bool timeIncrementSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] AnalysisParameterSettings settings) {
            object[] results = this.Invoke("LoadAllocationFromDB", new object[] {
                        projectName,
                        measurementDefinitionName,
                        fromTime,
                        toTime,
                        timeIncrement,
                        timeIncrementSpecified,
                        settings});
            return ((AnalysisReturnInfo)(results[0]));
        }
        
        /// <remarks/>
        public void LoadAllocationFromDBAsync(string projectName, string measurementDefinitionName, string fromTime, string toTime, int timeIncrement, bool timeIncrementSpecified, AnalysisParameterSettings settings) {
            this.LoadAllocationFromDBAsync(projectName, measurementDefinitionName, fromTime, toTime, timeIncrement, timeIncrementSpecified, settings, null);
        }
        
        /// <remarks/>
        public void LoadAllocationFromDBAsync(string projectName, string measurementDefinitionName, string fromTime, string toTime, int timeIncrement, bool timeIncrementSpecified, AnalysisParameterSettings settings, object userState) {
            if ((this.LoadAllocationFromDBOperationCompleted == null)) {
                this.LoadAllocationFromDBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadAllocationFromDBOperationCompleted);
            }
            this.InvokeAsync("LoadAllocationFromDB", new object[] {
                        projectName,
                        measurementDefinitionName,
                        fromTime,
                        toTime,
                        timeIncrement,
                        timeIncrementSpecified,
                        settings}, this.LoadAllocationFromDBOperationCompleted, userState);
        }
        
        private void OnLoadAllocationFromDBOperationCompleted(object arg) {
            if ((this.LoadAllocationFromDBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadAllocationFromDBCompleted(this, new LoadAllocationFromDBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/LoadAllocationFromMeasurmentFileA" +
            "ndProjectName", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public AnalysisReturnInfo LoadAllocationFromMeasurmentFileAndProjectName([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uploadedMeasurementFileName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string projectName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string fromTime, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string toTime, int timeIncrement, [System.Xml.Serialization.XmlIgnoreAttribute()] bool timeIncrementSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] AnalysisParameterSettings settings) {
            object[] results = this.Invoke("LoadAllocationFromMeasurmentFileAndProjectName", new object[] {
                        uploadedMeasurementFileName,
                        projectName,
                        fromTime,
                        toTime,
                        timeIncrement,
                        timeIncrementSpecified,
                        settings});
            return ((AnalysisReturnInfo)(results[0]));
        }
        
        /// <remarks/>
        public void LoadAllocationFromMeasurmentFileAndProjectNameAsync(string uploadedMeasurementFileName, string projectName, string fromTime, string toTime, int timeIncrement, bool timeIncrementSpecified, AnalysisParameterSettings settings) {
            this.LoadAllocationFromMeasurmentFileAndProjectNameAsync(uploadedMeasurementFileName, projectName, fromTime, toTime, timeIncrement, timeIncrementSpecified, settings, null);
        }
        
        /// <remarks/>
        public void LoadAllocationFromMeasurmentFileAndProjectNameAsync(string uploadedMeasurementFileName, string projectName, string fromTime, string toTime, int timeIncrement, bool timeIncrementSpecified, AnalysisParameterSettings settings, object userState) {
            if ((this.LoadAllocationFromMeasurmentFileAndProjectNameOperationCompleted == null)) {
                this.LoadAllocationFromMeasurmentFileAndProjectNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadAllocationFromMeasurmentFileAndProjectNameOperationCompleted);
            }
            this.InvokeAsync("LoadAllocationFromMeasurmentFileAndProjectName", new object[] {
                        uploadedMeasurementFileName,
                        projectName,
                        fromTime,
                        toTime,
                        timeIncrement,
                        timeIncrementSpecified,
                        settings}, this.LoadAllocationFromMeasurmentFileAndProjectNameOperationCompleted, userState);
        }
        
        private void OnLoadAllocationFromMeasurmentFileAndProjectNameOperationCompleted(object arg) {
            if ((this.LoadAllocationFromMeasurmentFileAndProjectNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadAllocationFromMeasurmentFileAndProjectNameCompleted(this, new LoadAllocationFromMeasurmentFileAndProjectNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/LoadAllocationFromMeasurmentFile", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public AnalysisReturnInfo LoadAllocationFromMeasurmentFile([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uploadedMeasurementFileName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string fromTime, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string toTime, int timeIncrement, [System.Xml.Serialization.XmlIgnoreAttribute()] bool timeIncrementSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] AnalysisParameterSettings settings) {
            object[] results = this.Invoke("LoadAllocationFromMeasurmentFile", new object[] {
                        project,
                        uploadedMeasurementFileName,
                        fromTime,
                        toTime,
                        timeIncrement,
                        timeIncrementSpecified,
                        settings});
            return ((AnalysisReturnInfo)(results[0]));
        }
        
        /// <remarks/>
        public void LoadAllocationFromMeasurmentFileAsync(ExternalProject project, string uploadedMeasurementFileName, string fromTime, string toTime, int timeIncrement, bool timeIncrementSpecified, AnalysisParameterSettings settings) {
            this.LoadAllocationFromMeasurmentFileAsync(project, uploadedMeasurementFileName, fromTime, toTime, timeIncrement, timeIncrementSpecified, settings, null);
        }
        
        /// <remarks/>
        public void LoadAllocationFromMeasurmentFileAsync(ExternalProject project, string uploadedMeasurementFileName, string fromTime, string toTime, int timeIncrement, bool timeIncrementSpecified, AnalysisParameterSettings settings, object userState) {
            if ((this.LoadAllocationFromMeasurmentFileOperationCompleted == null)) {
                this.LoadAllocationFromMeasurmentFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadAllocationFromMeasurmentFileOperationCompleted);
            }
            this.InvokeAsync("LoadAllocationFromMeasurmentFile", new object[] {
                        project,
                        uploadedMeasurementFileName,
                        fromTime,
                        toTime,
                        timeIncrement,
                        timeIncrementSpecified,
                        settings}, this.LoadAllocationFromMeasurmentFileOperationCompleted, userState);
        }
        
        private void OnLoadAllocationFromMeasurmentFileOperationCompleted(object arg) {
            if ((this.LoadAllocationFromMeasurmentFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadAllocationFromMeasurmentFileCompleted(this, new LoadAllocationFromMeasurmentFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/ImportFromListFileAndDoLoadAlloca" +
            "tion", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public ExternalProject ImportFromListFileAndDoLoadAllocation([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uploadName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string projectName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] AnalysisParameterSettings settings, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out AnalysisReturnInfo analysisReturnInfo) {
            object[] results = this.Invoke("ImportFromListFileAndDoLoadAllocation", new object[] {
                        uploadName,
                        projectName,
                        settings});
            analysisReturnInfo = ((AnalysisReturnInfo)(results[1]));
            return ((ExternalProject)(results[0]));
        }
        
        /// <remarks/>
        public void ImportFromListFileAndDoLoadAllocationAsync(string uploadName, string projectName, AnalysisParameterSettings settings) {
            this.ImportFromListFileAndDoLoadAllocationAsync(uploadName, projectName, settings, null);
        }
        
        /// <remarks/>
        public void ImportFromListFileAndDoLoadAllocationAsync(string uploadName, string projectName, AnalysisParameterSettings settings, object userState) {
            if ((this.ImportFromListFileAndDoLoadAllocationOperationCompleted == null)) {
                this.ImportFromListFileAndDoLoadAllocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportFromListFileAndDoLoadAllocationOperationCompleted);
            }
            this.InvokeAsync("ImportFromListFileAndDoLoadAllocation", new object[] {
                        uploadName,
                        projectName,
                        settings}, this.ImportFromListFileAndDoLoadAllocationOperationCompleted, userState);
        }
        
        private void OnImportFromListFileAndDoLoadAllocationOperationCompleted(object arg) {
            if ((this.ImportFromListFileAndDoLoadAllocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportFromListFileAndDoLoadAllocationCompleted(this, new ImportFromListFileAndDoLoadAllocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/DeleteAnaylsisLogFile", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteAnaylsisLogFile([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string fileName, out bool DeleteAnaylsisLogFileResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool DeleteAnaylsisLogFileResultSpecified) {
            object[] results = this.Invoke("DeleteAnaylsisLogFile", new object[] {
                        fileName});
            DeleteAnaylsisLogFileResult = ((bool)(results[0]));
            DeleteAnaylsisLogFileResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void DeleteAnaylsisLogFileAsync(string fileName) {
            this.DeleteAnaylsisLogFileAsync(fileName, null);
        }
        
        /// <remarks/>
        public void DeleteAnaylsisLogFileAsync(string fileName, object userState) {
            if ((this.DeleteAnaylsisLogFileOperationCompleted == null)) {
                this.DeleteAnaylsisLogFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAnaylsisLogFileOperationCompleted);
            }
            this.InvokeAsync("DeleteAnaylsisLogFile", new object[] {
                        fileName}, this.DeleteAnaylsisLogFileOperationCompleted, userState);
        }
        
        private void OnDeleteAnaylsisLogFileOperationCompleted(object arg) {
            if ((this.DeleteAnaylsisLogFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAnaylsisLogFileCompleted(this, new DeleteAnaylsisLogFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/DeleteAnalysisResultFile", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteAnalysisResultFile([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string fileName, out bool DeleteAnalysisResultFileResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool DeleteAnalysisResultFileResultSpecified) {
            object[] results = this.Invoke("DeleteAnalysisResultFile", new object[] {
                        fileName});
            DeleteAnalysisResultFileResult = ((bool)(results[0]));
            DeleteAnalysisResultFileResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void DeleteAnalysisResultFileAsync(string fileName) {
            this.DeleteAnalysisResultFileAsync(fileName, null);
        }
        
        /// <remarks/>
        public void DeleteAnalysisResultFileAsync(string fileName, object userState) {
            if ((this.DeleteAnalysisResultFileOperationCompleted == null)) {
                this.DeleteAnalysisResultFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAnalysisResultFileOperationCompleted);
            }
            this.InvokeAsync("DeleteAnalysisResultFile", new object[] {
                        fileName}, this.DeleteAnalysisResultFileOperationCompleted, userState);
        }
        
        private void OnDeleteAnalysisResultFileOperationCompleted(object arg) {
            if ((this.DeleteAnalysisResultFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAnalysisResultFileCompleted(this, new DeleteAnalysisResultFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/DeleteProject", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteProject([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, out bool DeleteProjectResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool DeleteProjectResultSpecified) {
            object[] results = this.Invoke("DeleteProject", new object[] {
                        project});
            DeleteProjectResult = ((bool)(results[0]));
            DeleteProjectResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void DeleteProjectAsync(ExternalProject project) {
            this.DeleteProjectAsync(project, null);
        }
        
        /// <remarks/>
        public void DeleteProjectAsync(ExternalProject project, object userState) {
            if ((this.DeleteProjectOperationCompleted == null)) {
                this.DeleteProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteProjectOperationCompleted);
            }
            this.InvokeAsync("DeleteProject", new object[] {
                        project}, this.DeleteProjectOperationCompleted, userState);
        }
        
        private void OnDeleteProjectOperationCompleted(object arg) {
            if ((this.DeleteProjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteProjectCompleted(this, new DeleteProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/MarkedProjectAsDeleted", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MarkedProjectAsDeleted([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, out bool MarkedProjectAsDeletedResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool MarkedProjectAsDeletedResultSpecified) {
            object[] results = this.Invoke("MarkedProjectAsDeleted", new object[] {
                        project});
            MarkedProjectAsDeletedResult = ((bool)(results[0]));
            MarkedProjectAsDeletedResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void MarkedProjectAsDeletedAsync(ExternalProject project) {
            this.MarkedProjectAsDeletedAsync(project, null);
        }
        
        /// <remarks/>
        public void MarkedProjectAsDeletedAsync(ExternalProject project, object userState) {
            if ((this.MarkedProjectAsDeletedOperationCompleted == null)) {
                this.MarkedProjectAsDeletedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMarkedProjectAsDeletedOperationCompleted);
            }
            this.InvokeAsync("MarkedProjectAsDeleted", new object[] {
                        project}, this.MarkedProjectAsDeletedOperationCompleted, userState);
        }
        
        private void OnMarkedProjectAsDeletedOperationCompleted(object arg) {
            if ((this.MarkedProjectAsDeletedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MarkedProjectAsDeletedCompleted(this, new MarkedProjectAsDeletedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/ImportFromFile", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ImportFromFile([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uploadName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string projectName, bool withGraphic, [System.Xml.Serialization.XmlIgnoreAttribute()] bool withGraphicSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string copySettingsFromProjectName, bool merge, [System.Xml.Serialization.XmlIgnoreAttribute()] bool mergeSpecified, bool mergeOnNewDiagram, [System.Xml.Serialization.XmlIgnoreAttribute()] bool mergeOnNewDiagramSpecified, out int ImportFromFileResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool ImportFromFileResultSpecified) {
            object[] results = this.Invoke("ImportFromFile", new object[] {
                        uploadName,
                        projectName,
                        withGraphic,
                        withGraphicSpecified,
                        copySettingsFromProjectName,
                        merge,
                        mergeSpecified,
                        mergeOnNewDiagram,
                        mergeOnNewDiagramSpecified});
            ImportFromFileResult = ((int)(results[0]));
            ImportFromFileResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void ImportFromFileAsync(string uploadName, string projectName, bool withGraphic, bool withGraphicSpecified, string copySettingsFromProjectName, bool merge, bool mergeSpecified, bool mergeOnNewDiagram, bool mergeOnNewDiagramSpecified) {
            this.ImportFromFileAsync(uploadName, projectName, withGraphic, withGraphicSpecified, copySettingsFromProjectName, merge, mergeSpecified, mergeOnNewDiagram, mergeOnNewDiagramSpecified, null);
        }
        
        /// <remarks/>
        public void ImportFromFileAsync(string uploadName, string projectName, bool withGraphic, bool withGraphicSpecified, string copySettingsFromProjectName, bool merge, bool mergeSpecified, bool mergeOnNewDiagram, bool mergeOnNewDiagramSpecified, object userState) {
            if ((this.ImportFromFileOperationCompleted == null)) {
                this.ImportFromFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportFromFileOperationCompleted);
            }
            this.InvokeAsync("ImportFromFile", new object[] {
                        uploadName,
                        projectName,
                        withGraphic,
                        withGraphicSpecified,
                        copySettingsFromProjectName,
                        merge,
                        mergeSpecified,
                        mergeOnNewDiagram,
                        mergeOnNewDiagramSpecified}, this.ImportFromFileOperationCompleted, userState);
        }
        
        private void OnImportFromFileOperationCompleted(object arg) {
            if ((this.ImportFromFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportFromFileCompleted(this, new ImportFromFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/AddFeederFromList", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddFeederFromList([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="")] ImportFeederItem[] feederList, out bool AddFeederFromListResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool AddFeederFromListResultSpecified) {
            object[] results = this.Invoke("AddFeederFromList", new object[] {
                        project,
                        feederList});
            AddFeederFromListResult = ((bool)(results[0]));
            AddFeederFromListResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void AddFeederFromListAsync(ExternalProject project, ImportFeederItem[] feederList) {
            this.AddFeederFromListAsync(project, feederList, null);
        }
        
        /// <remarks/>
        public void AddFeederFromListAsync(ExternalProject project, ImportFeederItem[] feederList, object userState) {
            if ((this.AddFeederFromListOperationCompleted == null)) {
                this.AddFeederFromListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddFeederFromListOperationCompleted);
            }
            this.InvokeAsync("AddFeederFromList", new object[] {
                        project,
                        feederList}, this.AddFeederFromListOperationCompleted, userState);
        }
        
        private void OnAddFeederFromListOperationCompleted(object arg) {
            if ((this.AddFeederFromListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddFeederFromListCompleted(this, new AddFeederFromListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/ImportFromList", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public ExternalProject ImportFromList([System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="")] ImportElementItem[] listElements, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string projectName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string copySettingsFromProjectName) {
            object[] results = this.Invoke("ImportFromList", new object[] {
                        listElements,
                        projectName,
                        copySettingsFromProjectName});
            return ((ExternalProject)(results[0]));
        }
        
        /// <remarks/>
        public void ImportFromListAsync(ImportElementItem[] listElements, string projectName, string copySettingsFromProjectName) {
            this.ImportFromListAsync(listElements, projectName, copySettingsFromProjectName, null);
        }
        
        /// <remarks/>
        public void ImportFromListAsync(ImportElementItem[] listElements, string projectName, string copySettingsFromProjectName, object userState) {
            if ((this.ImportFromListOperationCompleted == null)) {
                this.ImportFromListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportFromListOperationCompleted);
            }
            this.InvokeAsync("ImportFromList", new object[] {
                        listElements,
                        projectName,
                        copySettingsFromProjectName}, this.ImportFromListOperationCompleted, userState);
        }
        
        private void OnImportFromListOperationCompleted(object arg) {
            if ((this.ImportFromListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportFromListCompleted(this, new ImportFromListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/ImportFromListFile", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public ExternalProject ImportFromListFile([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uploadName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string projectName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string copySettingsFromProjectName) {
            object[] results = this.Invoke("ImportFromListFile", new object[] {
                        uploadName,
                        projectName,
                        copySettingsFromProjectName});
            return ((ExternalProject)(results[0]));
        }
        
        /// <remarks/>
        public void ImportFromListFileAsync(string uploadName, string projectName, string copySettingsFromProjectName) {
            this.ImportFromListFileAsync(uploadName, projectName, copySettingsFromProjectName, null);
        }
        
        /// <remarks/>
        public void ImportFromListFileAsync(string uploadName, string projectName, string copySettingsFromProjectName, object userState) {
            if ((this.ImportFromListFileOperationCompleted == null)) {
                this.ImportFromListFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportFromListFileOperationCompleted);
            }
            this.InvokeAsync("ImportFromListFile", new object[] {
                        uploadName,
                        projectName,
                        copySettingsFromProjectName}, this.ImportFromListFileOperationCompleted, userState);
        }
        
        private void OnImportFromListFileOperationCompleted(object arg) {
            if ((this.ImportFromListFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportFromListFileCompleted(this, new ImportFromListFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/MergeProjectFromListFile", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public ExternalProject MergeProjectFromListFile([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uploadName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string projectToMerge, bool mergeOnNewDiagram, [System.Xml.Serialization.XmlIgnoreAttribute()] bool mergeOnNewDiagramSpecified) {
            object[] results = this.Invoke("MergeProjectFromListFile", new object[] {
                        uploadName,
                        projectToMerge,
                        mergeOnNewDiagram,
                        mergeOnNewDiagramSpecified});
            return ((ExternalProject)(results[0]));
        }
        
        /// <remarks/>
        public void MergeProjectFromListFileAsync(string uploadName, string projectToMerge, bool mergeOnNewDiagram, bool mergeOnNewDiagramSpecified) {
            this.MergeProjectFromListFileAsync(uploadName, projectToMerge, mergeOnNewDiagram, mergeOnNewDiagramSpecified, null);
        }
        
        /// <remarks/>
        public void MergeProjectFromListFileAsync(string uploadName, string projectToMerge, bool mergeOnNewDiagram, bool mergeOnNewDiagramSpecified, object userState) {
            if ((this.MergeProjectFromListFileOperationCompleted == null)) {
                this.MergeProjectFromListFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMergeProjectFromListFileOperationCompleted);
            }
            this.InvokeAsync("MergeProjectFromListFile", new object[] {
                        uploadName,
                        projectToMerge,
                        mergeOnNewDiagram,
                        mergeOnNewDiagramSpecified}, this.MergeProjectFromListFileOperationCompleted, userState);
        }
        
        private void OnMergeProjectFromListFileOperationCompleted(object arg) {
            if ((this.MergeProjectFromListFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MergeProjectFromListFileCompleted(this, new MergeProjectFromListFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/ImportFromCDE", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public ExternalProject ImportFromCDE([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string path1, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string path2, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string path3, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string copySettingsFromProjectName, bool withGraphic, [System.Xml.Serialization.XmlIgnoreAttribute()] bool withGraphicSpecified) {
            object[] results = this.Invoke("ImportFromCDE", new object[] {
                        path1,
                        path2,
                        path3,
                        copySettingsFromProjectName,
                        withGraphic,
                        withGraphicSpecified});
            return ((ExternalProject)(results[0]));
        }
        
        /// <remarks/>
        public void ImportFromCDEAsync(string path1, string path2, string path3, string copySettingsFromProjectName, bool withGraphic, bool withGraphicSpecified) {
            this.ImportFromCDEAsync(path1, path2, path3, copySettingsFromProjectName, withGraphic, withGraphicSpecified, null);
        }
        
        /// <remarks/>
        public void ImportFromCDEAsync(string path1, string path2, string path3, string copySettingsFromProjectName, bool withGraphic, bool withGraphicSpecified, object userState) {
            if ((this.ImportFromCDEOperationCompleted == null)) {
                this.ImportFromCDEOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportFromCDEOperationCompleted);
            }
            this.InvokeAsync("ImportFromCDE", new object[] {
                        path1,
                        path2,
                        path3,
                        copySettingsFromProjectName,
                        withGraphic,
                        withGraphicSpecified}, this.ImportFromCDEOperationCompleted, userState);
        }
        
        private void OnImportFromCDEOperationCompleted(object arg) {
            if ((this.ImportFromCDECompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportFromCDECompleted(this, new ImportFromCDECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/ImportFromCDEFiles", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public ExternalProject ImportFromCDEFiles([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string cdeFilename, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ndbFilename, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string xmlFilename, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string copySettingsFromProjectName, bool withGraphic, [System.Xml.Serialization.XmlIgnoreAttribute()] bool withGraphicSpecified) {
            object[] results = this.Invoke("ImportFromCDEFiles", new object[] {
                        cdeFilename,
                        ndbFilename,
                        xmlFilename,
                        copySettingsFromProjectName,
                        withGraphic,
                        withGraphicSpecified});
            return ((ExternalProject)(results[0]));
        }
        
        /// <remarks/>
        public void ImportFromCDEFilesAsync(string cdeFilename, string ndbFilename, string xmlFilename, string copySettingsFromProjectName, bool withGraphic, bool withGraphicSpecified) {
            this.ImportFromCDEFilesAsync(cdeFilename, ndbFilename, xmlFilename, copySettingsFromProjectName, withGraphic, withGraphicSpecified, null);
        }
        
        /// <remarks/>
        public void ImportFromCDEFilesAsync(string cdeFilename, string ndbFilename, string xmlFilename, string copySettingsFromProjectName, bool withGraphic, bool withGraphicSpecified, object userState) {
            if ((this.ImportFromCDEFilesOperationCompleted == null)) {
                this.ImportFromCDEFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportFromCDEFilesOperationCompleted);
            }
            this.InvokeAsync("ImportFromCDEFiles", new object[] {
                        cdeFilename,
                        ndbFilename,
                        xmlFilename,
                        copySettingsFromProjectName,
                        withGraphic,
                        withGraphicSpecified}, this.ImportFromCDEFilesOperationCompleted, userState);
        }
        
        private void OnImportFromCDEFilesOperationCompleted(object arg) {
            if ((this.ImportFromCDEFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportFromCDEFilesCompleted(this, new ImportFromCDEFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/ImportFromCDEZipFile", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public ExternalProject ImportFromCDEZipFile([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string zipFile, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string copySettingsFromProjectName, bool withGraphic, [System.Xml.Serialization.XmlIgnoreAttribute()] bool withGraphicSpecified) {
            object[] results = this.Invoke("ImportFromCDEZipFile", new object[] {
                        zipFile,
                        copySettingsFromProjectName,
                        withGraphic,
                        withGraphicSpecified});
            return ((ExternalProject)(results[0]));
        }
        
        /// <remarks/>
        public void ImportFromCDEZipFileAsync(string zipFile, string copySettingsFromProjectName, bool withGraphic, bool withGraphicSpecified) {
            this.ImportFromCDEZipFileAsync(zipFile, copySettingsFromProjectName, withGraphic, withGraphicSpecified, null);
        }
        
        /// <remarks/>
        public void ImportFromCDEZipFileAsync(string zipFile, string copySettingsFromProjectName, bool withGraphic, bool withGraphicSpecified, object userState) {
            if ((this.ImportFromCDEZipFileOperationCompleted == null)) {
                this.ImportFromCDEZipFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportFromCDEZipFileOperationCompleted);
            }
            this.InvokeAsync("ImportFromCDEZipFile", new object[] {
                        zipFile,
                        copySettingsFromProjectName,
                        withGraphic,
                        withGraphicSpecified}, this.ImportFromCDEZipFileOperationCompleted, userState);
        }
        
        private void OnImportFromCDEZipFileOperationCompleted(object arg) {
            if ((this.ImportFromCDEZipFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportFromCDEZipFileCompleted(this, new ImportFromCDEZipFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/ImportFromPSSEFiles", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public ExternalProject ImportFromPSSEFiles(
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string rawFilename, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string seqFilename, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string dyrFilename, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string drwFilename, 
                    int psseVersion, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool psseVersionSpecified, 
                    bool ukr, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool ukrSpecified, 
                    bool withStations, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool withStationsSpecified, 
                    bool withBreakers, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool withBreakersSpecified, 
                    int charNumStations, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool charNumStationsSpecified, 
                    int nameRule, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool nameRuleSpecified, 
                    int lineQuant, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool lineQuantSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string copySettingsFromProjectName) {
            object[] results = this.Invoke("ImportFromPSSEFiles", new object[] {
                        rawFilename,
                        seqFilename,
                        dyrFilename,
                        drwFilename,
                        psseVersion,
                        psseVersionSpecified,
                        ukr,
                        ukrSpecified,
                        withStations,
                        withStationsSpecified,
                        withBreakers,
                        withBreakersSpecified,
                        charNumStations,
                        charNumStationsSpecified,
                        nameRule,
                        nameRuleSpecified,
                        lineQuant,
                        lineQuantSpecified,
                        copySettingsFromProjectName});
            return ((ExternalProject)(results[0]));
        }
        
        /// <remarks/>
        public void ImportFromPSSEFilesAsync(
                    string rawFilename, 
                    string seqFilename, 
                    string dyrFilename, 
                    string drwFilename, 
                    int psseVersion, 
                    bool psseVersionSpecified, 
                    bool ukr, 
                    bool ukrSpecified, 
                    bool withStations, 
                    bool withStationsSpecified, 
                    bool withBreakers, 
                    bool withBreakersSpecified, 
                    int charNumStations, 
                    bool charNumStationsSpecified, 
                    int nameRule, 
                    bool nameRuleSpecified, 
                    int lineQuant, 
                    bool lineQuantSpecified, 
                    string copySettingsFromProjectName) {
            this.ImportFromPSSEFilesAsync(rawFilename, seqFilename, dyrFilename, drwFilename, psseVersion, psseVersionSpecified, ukr, ukrSpecified, withStations, withStationsSpecified, withBreakers, withBreakersSpecified, charNumStations, charNumStationsSpecified, nameRule, nameRuleSpecified, lineQuant, lineQuantSpecified, copySettingsFromProjectName, null);
        }
        
        /// <remarks/>
        public void ImportFromPSSEFilesAsync(
                    string rawFilename, 
                    string seqFilename, 
                    string dyrFilename, 
                    string drwFilename, 
                    int psseVersion, 
                    bool psseVersionSpecified, 
                    bool ukr, 
                    bool ukrSpecified, 
                    bool withStations, 
                    bool withStationsSpecified, 
                    bool withBreakers, 
                    bool withBreakersSpecified, 
                    int charNumStations, 
                    bool charNumStationsSpecified, 
                    int nameRule, 
                    bool nameRuleSpecified, 
                    int lineQuant, 
                    bool lineQuantSpecified, 
                    string copySettingsFromProjectName, 
                    object userState) {
            if ((this.ImportFromPSSEFilesOperationCompleted == null)) {
                this.ImportFromPSSEFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportFromPSSEFilesOperationCompleted);
            }
            this.InvokeAsync("ImportFromPSSEFiles", new object[] {
                        rawFilename,
                        seqFilename,
                        dyrFilename,
                        drwFilename,
                        psseVersion,
                        psseVersionSpecified,
                        ukr,
                        ukrSpecified,
                        withStations,
                        withStationsSpecified,
                        withBreakers,
                        withBreakersSpecified,
                        charNumStations,
                        charNumStationsSpecified,
                        nameRule,
                        nameRuleSpecified,
                        lineQuant,
                        lineQuantSpecified,
                        copySettingsFromProjectName}, this.ImportFromPSSEFilesOperationCompleted, userState);
        }
        
        private void OnImportFromPSSEFilesOperationCompleted(object arg) {
            if ((this.ImportFromPSSEFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportFromPSSEFilesCompleted(this, new ImportFromPSSEFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/ImportFromPSSEZipFile", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public ExternalProject ImportFromPSSEZipFile(
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string zipFile, 
                    int psseVersion, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool psseVersionSpecified, 
                    bool ukr, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool ukrSpecified, 
                    bool withStations, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool withStationsSpecified, 
                    bool withBreakers, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool withBreakersSpecified, 
                    int charNumStations, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool charNumStationsSpecified, 
                    int nameRule, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool nameRuleSpecified, 
                    int lineQuant, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool lineQuantSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string copySettingsFromProjectName) {
            object[] results = this.Invoke("ImportFromPSSEZipFile", new object[] {
                        zipFile,
                        psseVersion,
                        psseVersionSpecified,
                        ukr,
                        ukrSpecified,
                        withStations,
                        withStationsSpecified,
                        withBreakers,
                        withBreakersSpecified,
                        charNumStations,
                        charNumStationsSpecified,
                        nameRule,
                        nameRuleSpecified,
                        lineQuant,
                        lineQuantSpecified,
                        copySettingsFromProjectName});
            return ((ExternalProject)(results[0]));
        }
        
        /// <remarks/>
        public void ImportFromPSSEZipFileAsync(
                    string zipFile, 
                    int psseVersion, 
                    bool psseVersionSpecified, 
                    bool ukr, 
                    bool ukrSpecified, 
                    bool withStations, 
                    bool withStationsSpecified, 
                    bool withBreakers, 
                    bool withBreakersSpecified, 
                    int charNumStations, 
                    bool charNumStationsSpecified, 
                    int nameRule, 
                    bool nameRuleSpecified, 
                    int lineQuant, 
                    bool lineQuantSpecified, 
                    string copySettingsFromProjectName) {
            this.ImportFromPSSEZipFileAsync(zipFile, psseVersion, psseVersionSpecified, ukr, ukrSpecified, withStations, withStationsSpecified, withBreakers, withBreakersSpecified, charNumStations, charNumStationsSpecified, nameRule, nameRuleSpecified, lineQuant, lineQuantSpecified, copySettingsFromProjectName, null);
        }
        
        /// <remarks/>
        public void ImportFromPSSEZipFileAsync(
                    string zipFile, 
                    int psseVersion, 
                    bool psseVersionSpecified, 
                    bool ukr, 
                    bool ukrSpecified, 
                    bool withStations, 
                    bool withStationsSpecified, 
                    bool withBreakers, 
                    bool withBreakersSpecified, 
                    int charNumStations, 
                    bool charNumStationsSpecified, 
                    int nameRule, 
                    bool nameRuleSpecified, 
                    int lineQuant, 
                    bool lineQuantSpecified, 
                    string copySettingsFromProjectName, 
                    object userState) {
            if ((this.ImportFromPSSEZipFileOperationCompleted == null)) {
                this.ImportFromPSSEZipFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportFromPSSEZipFileOperationCompleted);
            }
            this.InvokeAsync("ImportFromPSSEZipFile", new object[] {
                        zipFile,
                        psseVersion,
                        psseVersionSpecified,
                        ukr,
                        ukrSpecified,
                        withStations,
                        withStationsSpecified,
                        withBreakers,
                        withBreakersSpecified,
                        charNumStations,
                        charNumStationsSpecified,
                        nameRule,
                        nameRuleSpecified,
                        lineQuant,
                        lineQuantSpecified,
                        copySettingsFromProjectName}, this.ImportFromPSSEZipFileOperationCompleted, userState);
        }
        
        private void OnImportFromPSSEZipFileOperationCompleted(object arg) {
            if ((this.ImportFromPSSEZipFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportFromPSSEZipFileCompleted(this, new ImportFromPSSEZipFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/ImportFromShapeFile", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ImportFromShapeFile([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string path, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string fileName, out int ImportFromShapeFileResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool ImportFromShapeFileResultSpecified) {
            object[] results = this.Invoke("ImportFromShapeFile", new object[] {
                        path,
                        fileName});
            ImportFromShapeFileResult = ((int)(results[0]));
            ImportFromShapeFileResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void ImportFromShapeFileAsync(string path, string fileName) {
            this.ImportFromShapeFileAsync(path, fileName, null);
        }
        
        /// <remarks/>
        public void ImportFromShapeFileAsync(string path, string fileName, object userState) {
            if ((this.ImportFromShapeFileOperationCompleted == null)) {
                this.ImportFromShapeFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportFromShapeFileOperationCompleted);
            }
            this.InvokeAsync("ImportFromShapeFile", new object[] {
                        path,
                        fileName}, this.ImportFromShapeFileOperationCompleted, userState);
        }
        
        private void OnImportFromShapeFileOperationCompleted(object arg) {
            if ((this.ImportFromShapeFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportFromShapeFileCompleted(this, new ImportFromShapeFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/ImportFromNDB", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ImportFromNDB([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uploadName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string origFileName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string mediumType, out bool ImportFromNDBResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool ImportFromNDBResultSpecified) {
            object[] results = this.Invoke("ImportFromNDB", new object[] {
                        project,
                        uploadName,
                        origFileName,
                        mediumType});
            ImportFromNDBResult = ((bool)(results[0]));
            ImportFromNDBResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void ImportFromNDBAsync(ExternalProject project, string uploadName, string origFileName, string mediumType) {
            this.ImportFromNDBAsync(project, uploadName, origFileName, mediumType, null);
        }
        
        /// <remarks/>
        public void ImportFromNDBAsync(ExternalProject project, string uploadName, string origFileName, string mediumType, object userState) {
            if ((this.ImportFromNDBOperationCompleted == null)) {
                this.ImportFromNDBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportFromNDBOperationCompleted);
            }
            this.InvokeAsync("ImportFromNDB", new object[] {
                        project,
                        uploadName,
                        origFileName,
                        mediumType}, this.ImportFromNDBOperationCompleted, userState);
        }
        
        private void OnImportFromNDBOperationCompleted(object arg) {
            if ((this.ImportFromNDBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportFromNDBCompleted(this, new ImportFromNDBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/ImportMeasuredDataFromXMlFile", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ImportMeasuredDataFromXMlFile([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uploadName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string definitionName, out bool ImportMeasuredDataFromXMlFileResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool ImportMeasuredDataFromXMlFileResultSpecified) {
            object[] results = this.Invoke("ImportMeasuredDataFromXMlFile", new object[] {
                        project,
                        uploadName,
                        definitionName});
            ImportMeasuredDataFromXMlFileResult = ((bool)(results[0]));
            ImportMeasuredDataFromXMlFileResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void ImportMeasuredDataFromXMlFileAsync(ExternalProject project, string uploadName, string definitionName) {
            this.ImportMeasuredDataFromXMlFileAsync(project, uploadName, definitionName, null);
        }
        
        /// <remarks/>
        public void ImportMeasuredDataFromXMlFileAsync(ExternalProject project, string uploadName, string definitionName, object userState) {
            if ((this.ImportMeasuredDataFromXMlFileOperationCompleted == null)) {
                this.ImportMeasuredDataFromXMlFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportMeasuredDataFromXMlFileOperationCompleted);
            }
            this.InvokeAsync("ImportMeasuredDataFromXMlFile", new object[] {
                        project,
                        uploadName,
                        definitionName}, this.ImportMeasuredDataFromXMlFileOperationCompleted, userState);
        }
        
        private void OnImportMeasuredDataFromXMlFileOperationCompleted(object arg) {
            if ((this.ImportMeasuredDataFromXMlFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportMeasuredDataFromXMlFileCompleted(this, new ImportMeasuredDataFromXMlFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/ExportProjectToNEP360", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] ExportProjectToNEP360([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string projectName) {
            object[] results = this.Invoke("ExportProjectToNEP360", new object[] {
                        projectName});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void ExportProjectToNEP360Async(string projectName) {
            this.ExportProjectToNEP360Async(projectName, null);
        }
        
        /// <remarks/>
        public void ExportProjectToNEP360Async(string projectName, object userState) {
            if ((this.ExportProjectToNEP360OperationCompleted == null)) {
                this.ExportProjectToNEP360OperationCompleted = new System.Threading.SendOrPostCallback(this.OnExportProjectToNEP360OperationCompleted);
            }
            this.InvokeAsync("ExportProjectToNEP360", new object[] {
                        projectName}, this.ExportProjectToNEP360OperationCompleted, userState);
        }
        
        private void OnExportProjectToNEP360OperationCompleted(object arg) {
            if ((this.ExportProjectToNEP360Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExportProjectToNEP360Completed(this, new ExportProjectToNEP360CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/WriteMessageToLogFile", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void WriteMessageToLogFile([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ExternalProject project, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string text, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string logLvl) {
            this.Invoke("WriteMessageToLogFile", new object[] {
                        project,
                        text,
                        logLvl});
        }
        
        /// <remarks/>
        public void WriteMessageToLogFileAsync(ExternalProject project, string text, string logLvl) {
            this.WriteMessageToLogFileAsync(project, text, logLvl, null);
        }
        
        /// <remarks/>
        public void WriteMessageToLogFileAsync(ExternalProject project, string text, string logLvl, object userState) {
            if ((this.WriteMessageToLogFileOperationCompleted == null)) {
                this.WriteMessageToLogFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWriteMessageToLogFileOperationCompleted);
            }
            this.InvokeAsync("WriteMessageToLogFile", new object[] {
                        project,
                        text,
                        logLvl}, this.WriteMessageToLogFileOperationCompleted, userState);
        }
        
        private void OnWriteMessageToLogFileOperationCompleted(object arg) {
            if ((this.WriteMessageToLogFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WriteMessageToLogFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/DeleteUserLogFile", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteUserLogFile(out bool DeleteUserLogFileResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool DeleteUserLogFileResultSpecified) {
            object[] results = this.Invoke("DeleteUserLogFile", new object[0]);
            DeleteUserLogFileResult = ((bool)(results[0]));
            DeleteUserLogFileResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void DeleteUserLogFileAsync() {
            this.DeleteUserLogFileAsync(null);
        }
        
        /// <remarks/>
        public void DeleteUserLogFileAsync(object userState) {
            if ((this.DeleteUserLogFileOperationCompleted == null)) {
                this.DeleteUserLogFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteUserLogFileOperationCompleted);
            }
            this.InvokeAsync("DeleteUserLogFile", new object[0], this.DeleteUserLogFileOperationCompleted, userState);
        }
        
        private void OnDeleteUserLogFileOperationCompleted(object arg) {
            if ((this.DeleteUserLogFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteUserLogFileCompleted(this, new DeleteUserLogFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/GetLogFileAsString", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetLogFileAsString() {
            object[] results = this.Invoke("GetLogFileAsString", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLogFileAsStringAsync() {
            this.GetLogFileAsStringAsync(null);
        }
        
        /// <remarks/>
        public void GetLogFileAsStringAsync(object userState) {
            if ((this.GetLogFileAsStringOperationCompleted == null)) {
                this.GetLogFileAsStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLogFileAsStringOperationCompleted);
            }
            this.InvokeAsync("GetLogFileAsString", new object[0], this.GetLogFileAsStringOperationCompleted, userState);
        }
        
        private void OnGetLogFileAsStringOperationCompleted(object arg) {
            if ((this.GetLogFileAsStringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLogFileAsStringCompleted(this, new GetLogFileAsStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/GetLogFileAsList", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] GetLogFileAsList() {
            object[] results = this.Invoke("GetLogFileAsList", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLogFileAsListAsync() {
            this.GetLogFileAsListAsync(null);
        }
        
        /// <remarks/>
        public void GetLogFileAsListAsync(object userState) {
            if ((this.GetLogFileAsListOperationCompleted == null)) {
                this.GetLogFileAsListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLogFileAsListOperationCompleted);
            }
            this.InvokeAsync("GetLogFileAsList", new object[0], this.GetLogFileAsListOperationCompleted, userState);
        }
        
        private void OnGetLogFileAsListOperationCompleted(object arg) {
            if ((this.GetLogFileAsListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLogFileAsListCompleted(this, new GetLogFileAsListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/XMLUpload", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string XMLUpload([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] stream) {
            object[] results = this.Invoke("XMLUpload", new object[] {
                        stream});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void XMLUploadAsync(byte[] stream) {
            this.XMLUploadAsync(stream, null);
        }
        
        /// <remarks/>
        public void XMLUploadAsync(byte[] stream, object userState) {
            if ((this.XMLUploadOperationCompleted == null)) {
                this.XMLUploadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnXMLUploadOperationCompleted);
            }
            this.InvokeAsync("XMLUpload", new object[] {
                        stream}, this.XMLUploadOperationCompleted, userState);
        }
        
        private void OnXMLUploadOperationCompleted(object arg) {
            if ((this.XMLUploadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.XMLUploadCompleted(this, new XMLUploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/CDEUpload", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string CDEUpload([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] stream) {
            object[] results = this.Invoke("CDEUpload", new object[] {
                        stream});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CDEUploadAsync(byte[] stream) {
            this.CDEUploadAsync(stream, null);
        }
        
        /// <remarks/>
        public void CDEUploadAsync(byte[] stream, object userState) {
            if ((this.CDEUploadOperationCompleted == null)) {
                this.CDEUploadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCDEUploadOperationCompleted);
            }
            this.InvokeAsync("CDEUpload", new object[] {
                        stream}, this.CDEUploadOperationCompleted, userState);
        }
        
        private void OnCDEUploadOperationCompleted(object arg) {
            if ((this.CDEUploadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CDEUploadCompleted(this, new CDEUploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/NDBUpload", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string NDBUpload([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] stream) {
            object[] results = this.Invoke("NDBUpload", new object[] {
                        stream});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void NDBUploadAsync(byte[] stream) {
            this.NDBUploadAsync(stream, null);
        }
        
        /// <remarks/>
        public void NDBUploadAsync(byte[] stream, object userState) {
            if ((this.NDBUploadOperationCompleted == null)) {
                this.NDBUploadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNDBUploadOperationCompleted);
            }
            this.InvokeAsync("NDBUpload", new object[] {
                        stream}, this.NDBUploadOperationCompleted, userState);
        }
        
        private void OnNDBUploadOperationCompleted(object arg) {
            if ((this.NDBUploadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NDBUploadCompleted(this, new NDBUploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/Nep360Upload", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Nep360Upload([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] stream) {
            object[] results = this.Invoke("Nep360Upload", new object[] {
                        stream});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Nep360UploadAsync(byte[] stream) {
            this.Nep360UploadAsync(stream, null);
        }
        
        /// <remarks/>
        public void Nep360UploadAsync(byte[] stream, object userState) {
            if ((this.Nep360UploadOperationCompleted == null)) {
                this.Nep360UploadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNep360UploadOperationCompleted);
            }
            this.InvokeAsync("Nep360Upload", new object[] {
                        stream}, this.Nep360UploadOperationCompleted, userState);
        }
        
        private void OnNep360UploadOperationCompleted(object arg) {
            if ((this.Nep360UploadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Nep360UploadCompleted(this, new Nep360UploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/ZipUpload", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ZipUpload([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] stream) {
            object[] results = this.Invoke("ZipUpload", new object[] {
                        stream});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ZipUploadAsync(byte[] stream) {
            this.ZipUploadAsync(stream, null);
        }
        
        /// <remarks/>
        public void ZipUploadAsync(byte[] stream, object userState) {
            if ((this.ZipUploadOperationCompleted == null)) {
                this.ZipUploadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnZipUploadOperationCompleted);
            }
            this.InvokeAsync("ZipUpload", new object[] {
                        stream}, this.ZipUploadOperationCompleted, userState);
        }
        
        private void OnZipUploadOperationCompleted(object arg) {
            if ((this.ZipUploadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ZipUploadCompleted(this, new ZipUploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/NepMeasUpload", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string NepMeasUpload([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] stream) {
            object[] results = this.Invoke("NepMeasUpload", new object[] {
                        stream});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void NepMeasUploadAsync(byte[] stream) {
            this.NepMeasUploadAsync(stream, null);
        }
        
        /// <remarks/>
        public void NepMeasUploadAsync(byte[] stream, object userState) {
            if ((this.NepMeasUploadOperationCompleted == null)) {
                this.NepMeasUploadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNepMeasUploadOperationCompleted);
            }
            this.InvokeAsync("NepMeasUpload", new object[] {
                        stream}, this.NepMeasUploadOperationCompleted, userState);
        }
        
        private void OnNepMeasUploadOperationCompleted(object arg) {
            if ((this.NepMeasUploadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NepMeasUploadCompleted(this, new NepMeasUploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/GetUserLogFile", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetUserLogFile() {
            object[] results = this.Invoke("GetUserLogFile", new object[0]);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUserLogFileAsync() {
            this.GetUserLogFileAsync(null);
        }
        
        /// <remarks/>
        public void GetUserLogFileAsync(object userState) {
            if ((this.GetUserLogFileOperationCompleted == null)) {
                this.GetUserLogFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserLogFileOperationCompleted);
            }
            this.InvokeAsync("GetUserLogFile", new object[0], this.GetUserLogFileOperationCompleted, userState);
        }
        
        private void OnGetUserLogFileOperationCompleted(object arg) {
            if ((this.GetUserLogFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserLogFileCompleted(this, new GetUserLogFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/GetAnaylsisLogFile", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetAnaylsisLogFile([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string fileName) {
            object[] results = this.Invoke("GetAnaylsisLogFile", new object[] {
                        fileName});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAnaylsisLogFileAsync(string fileName) {
            this.GetAnaylsisLogFileAsync(fileName, null);
        }
        
        /// <remarks/>
        public void GetAnaylsisLogFileAsync(string fileName, object userState) {
            if ((this.GetAnaylsisLogFileOperationCompleted == null)) {
                this.GetAnaylsisLogFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAnaylsisLogFileOperationCompleted);
            }
            this.InvokeAsync("GetAnaylsisLogFile", new object[] {
                        fileName}, this.GetAnaylsisLogFileOperationCompleted, userState);
        }
        
        private void OnGetAnaylsisLogFileOperationCompleted(object arg) {
            if ((this.GetAnaylsisLogFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAnaylsisLogFileCompleted(this, new GetAnaylsisLogFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/GetAnalysisResultFile", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetAnalysisResultFile([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string fileName) {
            object[] results = this.Invoke("GetAnalysisResultFile", new object[] {
                        fileName});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAnalysisResultFileAsync(string fileName) {
            this.GetAnalysisResultFileAsync(fileName, null);
        }
        
        /// <remarks/>
        public void GetAnalysisResultFileAsync(string fileName, object userState) {
            if ((this.GetAnalysisResultFileOperationCompleted == null)) {
                this.GetAnalysisResultFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAnalysisResultFileOperationCompleted);
            }
            this.InvokeAsync("GetAnalysisResultFile", new object[] {
                        fileName}, this.GetAnalysisResultFileOperationCompleted, userState);
        }
        
        private void OnGetAnalysisResultFileOperationCompleted(object arg) {
            if ((this.GetAnalysisResultFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAnalysisResultFileCompleted(this, new GetAnalysisResultFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/createDailyBackup", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string createDailyBackup(bool isAzure, [System.Xml.Serialization.XmlIgnoreAttribute()] bool isAzureSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string code) {
            object[] results = this.Invoke("createDailyBackup", new object[] {
                        isAzure,
                        isAzureSpecified,
                        code});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void createDailyBackupAsync(bool isAzure, bool isAzureSpecified, string code) {
            this.createDailyBackupAsync(isAzure, isAzureSpecified, code, null);
        }
        
        /// <remarks/>
        public void createDailyBackupAsync(bool isAzure, bool isAzureSpecified, string code, object userState) {
            if ((this.createDailyBackupOperationCompleted == null)) {
                this.createDailyBackupOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateDailyBackupOperationCompleted);
            }
            this.InvokeAsync("createDailyBackup", new object[] {
                        isAzure,
                        isAzureSpecified,
                        code}, this.createDailyBackupOperationCompleted, userState);
        }
        
        private void OncreateDailyBackupOperationCompleted(object arg) {
            if ((this.createDailyBackupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createDailyBackupCompleted(this, new createDailyBackupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/removeAllExpiredProjects", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string removeAllExpiredProjects([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string code) {
            object[] results = this.Invoke("removeAllExpiredProjects", new object[] {
                        code});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void removeAllExpiredProjectsAsync(string code) {
            this.removeAllExpiredProjectsAsync(code, null);
        }
        
        /// <remarks/>
        public void removeAllExpiredProjectsAsync(string code, object userState) {
            if ((this.removeAllExpiredProjectsOperationCompleted == null)) {
                this.removeAllExpiredProjectsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveAllExpiredProjectsOperationCompleted);
            }
            this.InvokeAsync("removeAllExpiredProjects", new object[] {
                        code}, this.removeAllExpiredProjectsOperationCompleted, userState);
        }
        
        private void OnremoveAllExpiredProjectsOperationCompleted(object arg) {
            if ((this.removeAllExpiredProjectsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeAllExpiredProjectsCompleted(this, new removeAllExpiredProjectsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/GetNamesOfElementsByType", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/System.Collections.Generic", IsNullable=false)]
        public KeyValuePairOfstringstring[] GetNamesOfElementsByType([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string projectName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string elementType) {
            object[] results = this.Invoke("GetNamesOfElementsByType", new object[] {
                        projectName,
                        elementType});
            return ((KeyValuePairOfstringstring[])(results[0]));
        }
        
        /// <remarks/>
        public void GetNamesOfElementsByTypeAsync(string projectName, string elementType) {
            this.GetNamesOfElementsByTypeAsync(projectName, elementType, null);
        }
        
        /// <remarks/>
        public void GetNamesOfElementsByTypeAsync(string projectName, string elementType, object userState) {
            if ((this.GetNamesOfElementsByTypeOperationCompleted == null)) {
                this.GetNamesOfElementsByTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNamesOfElementsByTypeOperationCompleted);
            }
            this.InvokeAsync("GetNamesOfElementsByType", new object[] {
                        projectName,
                        elementType}, this.GetNamesOfElementsByTypeOperationCompleted, userState);
        }
        
        private void OnGetNamesOfElementsByTypeOperationCompleted(object arg) {
            if ((this.GetNamesOfElementsByTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNamesOfElementsByTypeCompleted(this, new GetNamesOfElementsByTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/FindSwitchStatusOfElements", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/System.Collections.Generic", IsNullable=false)]
        public KeyValuePairOfstringNeplanServiceConnection_infomHiA0HHi[] FindSwitchStatusOfElements([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string projectName, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] GenLoadNames) {
            object[] results = this.Invoke("FindSwitchStatusOfElements", new object[] {
                        projectName,
                        GenLoadNames});
            return ((KeyValuePairOfstringNeplanServiceConnection_infomHiA0HHi[])(results[0]));
        }
        
        /// <remarks/>
        public void FindSwitchStatusOfElementsAsync(string projectName, string[] GenLoadNames) {
            this.FindSwitchStatusOfElementsAsync(projectName, GenLoadNames, null);
        }
        
        /// <remarks/>
        public void FindSwitchStatusOfElementsAsync(string projectName, string[] GenLoadNames, object userState) {
            if ((this.FindSwitchStatusOfElementsOperationCompleted == null)) {
                this.FindSwitchStatusOfElementsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindSwitchStatusOfElementsOperationCompleted);
            }
            this.InvokeAsync("FindSwitchStatusOfElements", new object[] {
                        projectName,
                        GenLoadNames}, this.FindSwitchStatusOfElementsOperationCompleted, userState);
        }
        
        private void OnFindSwitchStatusOfElementsOperationCompleted(object arg) {
            if ((this.FindSwitchStatusOfElementsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FindSwitchStatusOfElementsCompleted(this, new FindSwitchStatusOfElementsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/Find_Voltage_Level_of_One_Port_El" +
            "ement", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Find_Voltage_Level_of_One_Port_Element([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string projectName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string elementName, ref double Voltage, [System.Xml.Serialization.XmlIgnoreAttribute()] ref bool VoltageSpecified, out bool Find_Voltage_Level_of_One_Port_ElementResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool Find_Voltage_Level_of_One_Port_ElementResultSpecified) {
            object[] results = this.Invoke("Find_Voltage_Level_of_One_Port_Element", new object[] {
                        projectName,
                        elementName,
                        Voltage,
                        VoltageSpecified});
            Voltage = ((double)(results[0]));
            VoltageSpecified = ((bool)(results[1]));
            Find_Voltage_Level_of_One_Port_ElementResult = ((bool)(results[2]));
            Find_Voltage_Level_of_One_Port_ElementResultSpecified = ((bool)(results[3]));
        }
        
        /// <remarks/>
        public void Find_Voltage_Level_of_One_Port_ElementAsync(string projectName, string elementName, double Voltage, bool VoltageSpecified) {
            this.Find_Voltage_Level_of_One_Port_ElementAsync(projectName, elementName, Voltage, VoltageSpecified, null);
        }
        
        /// <remarks/>
        public void Find_Voltage_Level_of_One_Port_ElementAsync(string projectName, string elementName, double Voltage, bool VoltageSpecified, object userState) {
            if ((this.Find_Voltage_Level_of_One_Port_ElementOperationCompleted == null)) {
                this.Find_Voltage_Level_of_One_Port_ElementOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFind_Voltage_Level_of_One_Port_ElementOperationCompleted);
            }
            this.InvokeAsync("Find_Voltage_Level_of_One_Port_Element", new object[] {
                        projectName,
                        elementName,
                        Voltage,
                        VoltageSpecified}, this.Find_Voltage_Level_of_One_Port_ElementOperationCompleted, userState);
        }
        
        private void OnFind_Voltage_Level_of_One_Port_ElementOperationCompleted(object arg) {
            if ((this.Find_Voltage_Level_of_One_Port_ElementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Find_Voltage_Level_of_One_Port_ElementCompleted(this, new Find_Voltage_Level_of_One_Port_ElementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/ChangeSwitchStatusOfElements", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ChangeSwitchStatusOfElements([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string projectName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string GenLoadName, bool connectionstatus, [System.Xml.Serialization.XmlIgnoreAttribute()] bool connectionstatusSpecified, out bool ChangeSwitchStatusOfElementsResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool ChangeSwitchStatusOfElementsResultSpecified) {
            object[] results = this.Invoke("ChangeSwitchStatusOfElements", new object[] {
                        projectName,
                        GenLoadName,
                        connectionstatus,
                        connectionstatusSpecified});
            ChangeSwitchStatusOfElementsResult = ((bool)(results[0]));
            ChangeSwitchStatusOfElementsResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void ChangeSwitchStatusOfElementsAsync(string projectName, string GenLoadName, bool connectionstatus, bool connectionstatusSpecified) {
            this.ChangeSwitchStatusOfElementsAsync(projectName, GenLoadName, connectionstatus, connectionstatusSpecified, null);
        }
        
        /// <remarks/>
        public void ChangeSwitchStatusOfElementsAsync(string projectName, string GenLoadName, bool connectionstatus, bool connectionstatusSpecified, object userState) {
            if ((this.ChangeSwitchStatusOfElementsOperationCompleted == null)) {
                this.ChangeSwitchStatusOfElementsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeSwitchStatusOfElementsOperationCompleted);
            }
            this.InvokeAsync("ChangeSwitchStatusOfElements", new object[] {
                        projectName,
                        GenLoadName,
                        connectionstatus,
                        connectionstatusSpecified}, this.ChangeSwitchStatusOfElementsOperationCompleted, userState);
        }
        
        private void OnChangeSwitchStatusOfElementsOperationCompleted(object arg) {
            if ((this.ChangeSwitchStatusOfElementsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeSwitchStatusOfElementsCompleted(this, new ChangeSwitchStatusOfElementsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/GetPQValuesLdSmAsm", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.External")]
        public NeplanServiceLoadGeneration_info[] GetPQValuesLdSmAsm([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string projectName) {
            object[] results = this.Invoke("GetPQValuesLdSmAsm", new object[] {
                        projectName});
            return ((NeplanServiceLoadGeneration_info[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPQValuesLdSmAsmAsync(string projectName) {
            this.GetPQValuesLdSmAsmAsync(projectName, null);
        }
        
        /// <remarks/>
        public void GetPQValuesLdSmAsmAsync(string projectName, object userState) {
            if ((this.GetPQValuesLdSmAsmOperationCompleted == null)) {
                this.GetPQValuesLdSmAsmOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPQValuesLdSmAsmOperationCompleted);
            }
            this.InvokeAsync("GetPQValuesLdSmAsm", new object[] {
                        projectName}, this.GetPQValuesLdSmAsmOperationCompleted, userState);
        }
        
        private void OnGetPQValuesLdSmAsmOperationCompleted(object arg) {
            if ((this.GetPQValuesLdSmAsmCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPQValuesLdSmAsmCompleted(this, new GetPQValuesLdSmAsmCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/SetPowerofLoadsGenerators", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetPowerofLoadsGenerators([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string projectname, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.External")] NeplanServiceLoadGeneration_info[] loadgens, out bool SetPowerofLoadsGeneratorsResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool SetPowerofLoadsGeneratorsResultSpecified) {
            object[] results = this.Invoke("SetPowerofLoadsGenerators", new object[] {
                        projectname,
                        loadgens});
            SetPowerofLoadsGeneratorsResult = ((bool)(results[0]));
            SetPowerofLoadsGeneratorsResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void SetPowerofLoadsGeneratorsAsync(string projectname, NeplanServiceLoadGeneration_info[] loadgens) {
            this.SetPowerofLoadsGeneratorsAsync(projectname, loadgens, null);
        }
        
        /// <remarks/>
        public void SetPowerofLoadsGeneratorsAsync(string projectname, NeplanServiceLoadGeneration_info[] loadgens, object userState) {
            if ((this.SetPowerofLoadsGeneratorsOperationCompleted == null)) {
                this.SetPowerofLoadsGeneratorsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetPowerofLoadsGeneratorsOperationCompleted);
            }
            this.InvokeAsync("SetPowerofLoadsGenerators", new object[] {
                        projectname,
                        loadgens}, this.SetPowerofLoadsGeneratorsOperationCompleted, userState);
        }
        
        private void OnSetPowerofLoadsGeneratorsOperationCompleted(object arg) {
            if ((this.SetPowerofLoadsGeneratorsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetPowerofLoadsGeneratorsCompleted(this, new SetPowerofLoadsGeneratorsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/ChangeSwitchStatusOfElementList", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ChangeSwitchStatusOfElementList([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string projectName, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute("guid", Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)] string[] elemids, bool connectionstatus, [System.Xml.Serialization.XmlIgnoreAttribute()] bool connectionstatusSpecified, out bool ChangeSwitchStatusOfElementListResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool ChangeSwitchStatusOfElementListResultSpecified) {
            object[] results = this.Invoke("ChangeSwitchStatusOfElementList", new object[] {
                        projectName,
                        elemids,
                        connectionstatus,
                        connectionstatusSpecified});
            ChangeSwitchStatusOfElementListResult = ((bool)(results[0]));
            ChangeSwitchStatusOfElementListResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void ChangeSwitchStatusOfElementListAsync(string projectName, string[] elemids, bool connectionstatus, bool connectionstatusSpecified) {
            this.ChangeSwitchStatusOfElementListAsync(projectName, elemids, connectionstatus, connectionstatusSpecified, null);
        }
        
        /// <remarks/>
        public void ChangeSwitchStatusOfElementListAsync(string projectName, string[] elemids, bool connectionstatus, bool connectionstatusSpecified, object userState) {
            if ((this.ChangeSwitchStatusOfElementListOperationCompleted == null)) {
                this.ChangeSwitchStatusOfElementListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeSwitchStatusOfElementListOperationCompleted);
            }
            this.InvokeAsync("ChangeSwitchStatusOfElementList", new object[] {
                        projectName,
                        elemids,
                        connectionstatus,
                        connectionstatusSpecified}, this.ChangeSwitchStatusOfElementListOperationCompleted, userState);
        }
        
        private void OnChangeSwitchStatusOfElementListOperationCompleted(object arg) {
            if ((this.ChangeSwitchStatusOfElementListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeSwitchStatusOfElementListCompleted(this, new ChangeSwitchStatusOfElementListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/ImportIEC_62325_451_2FilesAndDoCI" +
            "MExport", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public NeplanDomainServiceImportReturnInfo ImportIEC_62325_451_2FilesAndDoCIMExport([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string folderpath, string variantID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string username, bool onlyOneEQ, [System.Xml.Serialization.XmlIgnoreAttribute()] bool onlyOneEQSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string mAS) {
            object[] results = this.Invoke("ImportIEC_62325_451_2FilesAndDoCIMExport", new object[] {
                        folderpath,
                        variantID,
                        username,
                        onlyOneEQ,
                        onlyOneEQSpecified,
                        mAS});
            return ((NeplanDomainServiceImportReturnInfo)(results[0]));
        }
        
        /// <remarks/>
        public void ImportIEC_62325_451_2FilesAndDoCIMExportAsync(string folderpath, string variantID, string username, bool onlyOneEQ, bool onlyOneEQSpecified, string mAS) {
            this.ImportIEC_62325_451_2FilesAndDoCIMExportAsync(folderpath, variantID, username, onlyOneEQ, onlyOneEQSpecified, mAS, null);
        }
        
        /// <remarks/>
        public void ImportIEC_62325_451_2FilesAndDoCIMExportAsync(string folderpath, string variantID, string username, bool onlyOneEQ, bool onlyOneEQSpecified, string mAS, object userState) {
            if ((this.ImportIEC_62325_451_2FilesAndDoCIMExportOperationCompleted == null)) {
                this.ImportIEC_62325_451_2FilesAndDoCIMExportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportIEC_62325_451_2FilesAndDoCIMExportOperationCompleted);
            }
            this.InvokeAsync("ImportIEC_62325_451_2FilesAndDoCIMExport", new object[] {
                        folderpath,
                        variantID,
                        username,
                        onlyOneEQ,
                        onlyOneEQSpecified,
                        mAS}, this.ImportIEC_62325_451_2FilesAndDoCIMExportOperationCompleted, userState);
        }
        
        private void OnImportIEC_62325_451_2FilesAndDoCIMExportOperationCompleted(object arg) {
            if ((this.ImportIEC_62325_451_2FilesAndDoCIMExportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportIEC_62325_451_2FilesAndDoCIMExportCompleted(this, new ImportIEC_62325_451_2FilesAndDoCIMExportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.neplan.ch/Web/External/NeplanService/GetFeederIDByName", RequestNamespace="http://www.neplan.ch/Web/External", ResponseNamespace="http://www.neplan.ch/Web/External", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("guid", Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)]
        public string[] GetFeederIDByName([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ProjectName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string VariantName, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] FeederNames) {
            object[] results = this.Invoke("GetFeederIDByName", new object[] {
                        ProjectName,
                        VariantName,
                        FeederNames});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFeederIDByNameAsync(string ProjectName, string VariantName, string[] FeederNames) {
            this.GetFeederIDByNameAsync(ProjectName, VariantName, FeederNames, null);
        }
        
        /// <remarks/>
        public void GetFeederIDByNameAsync(string ProjectName, string VariantName, string[] FeederNames, object userState) {
            if ((this.GetFeederIDByNameOperationCompleted == null)) {
                this.GetFeederIDByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFeederIDByNameOperationCompleted);
            }
            this.InvokeAsync("GetFeederIDByName", new object[] {
                        ProjectName,
                        VariantName,
                        FeederNames}, this.GetFeederIDByNameOperationCompleted, userState);
        }
        
        private void OnGetFeederIDByNameOperationCompleted(object arg) {
            if ((this.GetFeederIDByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFeederIDByNameCompleted(this, new GetFeederIDByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External")]
    public partial class ExternalProject {
        
        private double angleXYField;
        
        private bool angleXYFieldSpecified;
        
        private string areaIDField;
        
        private string calcNameIDField;
        
        private int coordinateUnitsField;
        
        private bool coordinateUnitsFieldSpecified;
        
        private string diagramIDField;
        
        private bool directionUpYField;
        
        private bool directionUpYFieldSpecified;
        
        private double factorXYField;
        
        private bool factorXYFieldSpecified;
        
        private string graphicLayerIDField;
        
        private string groupIDField;
        
        private bool importWithGraphicField;
        
        private bool importWithGraphicFieldSpecified;
        
        private string infoField;
        
        private double layerMinXField;
        
        private bool layerMinXFieldSpecified;
        
        private double layerMinYField;
        
        private bool layerMinYFieldSpecified;
        
        private short layerUnitXYField;
        
        private bool layerUnitXYFieldSpecified;
        
        private string libraryNameField;
        
        private string librarySubnameField;
        
        private string logNameField;
        
        private int numDiagramField;
        
        private bool numDiagramFieldSpecified;
        
        private int numGraphicField;
        
        private bool numGraphicFieldSpecified;
        
        private string projectIDField;
        
        private string projectNameField;
        
        private int returnCodeField;
        
        private bool returnCodeFieldSpecified;
        
        private string sridIDField;
        
        private string subAreaIDField;
        
        private string variantIDField;
        
        private double versionField;
        
        private bool versionFieldSpecified;
        
        private double worldCoordMaxXField;
        
        private bool worldCoordMaxXFieldSpecified;
        
        private double worldCoordMaxYField;
        
        private bool worldCoordMaxYFieldSpecified;
        
        private double worldCoordMinXField;
        
        private bool worldCoordMinXFieldSpecified;
        
        private double worldCoordMinYField;
        
        private bool worldCoordMinYFieldSpecified;
        
        private string zoneIDField;
        
        /// <remarks/>
        public double AngleXY {
            get {
                return this.angleXYField;
            }
            set {
                this.angleXYField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AngleXYSpecified {
            get {
                return this.angleXYFieldSpecified;
            }
            set {
                this.angleXYFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string AreaID {
            get {
                return this.areaIDField;
            }
            set {
                this.areaIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string CalcNameID {
            get {
                return this.calcNameIDField;
            }
            set {
                this.calcNameIDField = value;
            }
        }
        
        /// <remarks/>
        public int CoordinateUnits {
            get {
                return this.coordinateUnitsField;
            }
            set {
                this.coordinateUnitsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CoordinateUnitsSpecified {
            get {
                return this.coordinateUnitsFieldSpecified;
            }
            set {
                this.coordinateUnitsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string DiagramID {
            get {
                return this.diagramIDField;
            }
            set {
                this.diagramIDField = value;
            }
        }
        
        /// <remarks/>
        public bool DirectionUpY {
            get {
                return this.directionUpYField;
            }
            set {
                this.directionUpYField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DirectionUpYSpecified {
            get {
                return this.directionUpYFieldSpecified;
            }
            set {
                this.directionUpYFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double FactorXY {
            get {
                return this.factorXYField;
            }
            set {
                this.factorXYField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FactorXYSpecified {
            get {
                return this.factorXYFieldSpecified;
            }
            set {
                this.factorXYFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GraphicLayerID {
            get {
                return this.graphicLayerIDField;
            }
            set {
                this.graphicLayerIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GroupID {
            get {
                return this.groupIDField;
            }
            set {
                this.groupIDField = value;
            }
        }
        
        /// <remarks/>
        public bool ImportWithGraphic {
            get {
                return this.importWithGraphicField;
            }
            set {
                this.importWithGraphicField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ImportWithGraphicSpecified {
            get {
                return this.importWithGraphicFieldSpecified;
            }
            set {
                this.importWithGraphicFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Info {
            get {
                return this.infoField;
            }
            set {
                this.infoField = value;
            }
        }
        
        /// <remarks/>
        public double LayerMinX {
            get {
                return this.layerMinXField;
            }
            set {
                this.layerMinXField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LayerMinXSpecified {
            get {
                return this.layerMinXFieldSpecified;
            }
            set {
                this.layerMinXFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double LayerMinY {
            get {
                return this.layerMinYField;
            }
            set {
                this.layerMinYField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LayerMinYSpecified {
            get {
                return this.layerMinYFieldSpecified;
            }
            set {
                this.layerMinYFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public short LayerUnitXY {
            get {
                return this.layerUnitXYField;
            }
            set {
                this.layerUnitXYField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LayerUnitXYSpecified {
            get {
                return this.layerUnitXYFieldSpecified;
            }
            set {
                this.layerUnitXYFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string LibraryName {
            get {
                return this.libraryNameField;
            }
            set {
                this.libraryNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string LibrarySubname {
            get {
                return this.librarySubnameField;
            }
            set {
                this.librarySubnameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string LogName {
            get {
                return this.logNameField;
            }
            set {
                this.logNameField = value;
            }
        }
        
        /// <remarks/>
        public int NumDiagram {
            get {
                return this.numDiagramField;
            }
            set {
                this.numDiagramField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumDiagramSpecified {
            get {
                return this.numDiagramFieldSpecified;
            }
            set {
                this.numDiagramFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int NumGraphic {
            get {
                return this.numGraphicField;
            }
            set {
                this.numGraphicField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumGraphicSpecified {
            get {
                return this.numGraphicFieldSpecified;
            }
            set {
                this.numGraphicFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ProjectID {
            get {
                return this.projectIDField;
            }
            set {
                this.projectIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ProjectName {
            get {
                return this.projectNameField;
            }
            set {
                this.projectNameField = value;
            }
        }
        
        /// <remarks/>
        public int ReturnCode {
            get {
                return this.returnCodeField;
            }
            set {
                this.returnCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ReturnCodeSpecified {
            get {
                return this.returnCodeFieldSpecified;
            }
            set {
                this.returnCodeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string SridID {
            get {
                return this.sridIDField;
            }
            set {
                this.sridIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string SubAreaID {
            get {
                return this.subAreaIDField;
            }
            set {
                this.subAreaIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string VariantID {
            get {
                return this.variantIDField;
            }
            set {
                this.variantIDField = value;
            }
        }
        
        /// <remarks/>
        public double Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VersionSpecified {
            get {
                return this.versionFieldSpecified;
            }
            set {
                this.versionFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double WorldCoordMaxX {
            get {
                return this.worldCoordMaxXField;
            }
            set {
                this.worldCoordMaxXField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WorldCoordMaxXSpecified {
            get {
                return this.worldCoordMaxXFieldSpecified;
            }
            set {
                this.worldCoordMaxXFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double WorldCoordMaxY {
            get {
                return this.worldCoordMaxYField;
            }
            set {
                this.worldCoordMaxYField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WorldCoordMaxYSpecified {
            get {
                return this.worldCoordMaxYFieldSpecified;
            }
            set {
                this.worldCoordMaxYFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double WorldCoordMinX {
            get {
                return this.worldCoordMinXField;
            }
            set {
                this.worldCoordMinXField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WorldCoordMinXSpecified {
            get {
                return this.worldCoordMinXFieldSpecified;
            }
            set {
                this.worldCoordMinXFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double WorldCoordMinY {
            get {
                return this.worldCoordMinYField;
            }
            set {
                this.worldCoordMinYField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WorldCoordMinYSpecified {
            get {
                return this.worldCoordMinYFieldSpecified;
            }
            set {
                this.worldCoordMinYFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ZoneID {
            get {
                return this.zoneIDField;
            }
            set {
                this.zoneIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="NeplanDomainService.ImportReturnInfo", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services")]
    public partial class NeplanDomainServiceImportReturnInfo {
        
        private string[] logInfoField;
        
        private int returnValueField;
        
        private bool returnValueFieldSpecified;
        
        private string actualCreatedProjectIDField;
        
        private string variantIDField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] LogInfo {
            get {
                return this.logInfoField;
            }
            set {
                this.logInfoField = value;
            }
        }
        
        /// <remarks/>
        public int ReturnValue {
            get {
                return this.returnValueField;
            }
            set {
                this.returnValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ReturnValueSpecified {
            get {
                return this.returnValueFieldSpecified;
            }
            set {
                this.returnValueFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string actualCreatedProjectID {
            get {
                return this.actualCreatedProjectIDField;
            }
            set {
                this.actualCreatedProjectIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string variantID {
            get {
                return this.variantIDField;
            }
            set {
                this.variantIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="NeplanService.LoadGeneration_info", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.External")]
    public partial class NeplanServiceLoadGeneration_info {
        
        private double pField;
        
        private bool pFieldSpecified;
        
        private double qField;
        
        private bool qFieldSpecified;
        
        private short unitField;
        
        private bool unitFieldSpecified;
        
        private string elementnameField;
        
        private string elementtypeField;
        
        private string elemidField;
        
        /// <remarks/>
        public double P {
            get {
                return this.pField;
            }
            set {
                this.pField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PSpecified {
            get {
                return this.pFieldSpecified;
            }
            set {
                this.pFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double Q {
            get {
                return this.qField;
            }
            set {
                this.qField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool QSpecified {
            get {
                return this.qFieldSpecified;
            }
            set {
                this.qFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public short Unit {
            get {
                return this.unitField;
            }
            set {
                this.unitField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UnitSpecified {
            get {
                return this.unitFieldSpecified;
            }
            set {
                this.unitFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string elementname {
            get {
                return this.elementnameField;
            }
            set {
                this.elementnameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string elementtype {
            get {
                return this.elementtypeField;
            }
            set {
                this.elementtypeField = value;
            }
        }
        
        /// <remarks/>
        public string elemid {
            get {
                return this.elemidField;
            }
            set {
                this.elemidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="NeplanService.Connection_info", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.External")]
    public partial class NeplanServiceConnection_info {
        
        private string connectionStatusField;
        
        private string coordinateXField;
        
        private string coordinateYField;
        
        private string elem_Connection_IDField;
        
        private string elem_IDField;
        
        private string elem_NameField;
        
        private string elementTypeField;
        
        private string mPRNField;
        
        private string phasesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ConnectionStatus {
            get {
                return this.connectionStatusField;
            }
            set {
                this.connectionStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string CoordinateX {
            get {
                return this.coordinateXField;
            }
            set {
                this.coordinateXField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string CoordinateY {
            get {
                return this.coordinateYField;
            }
            set {
                this.coordinateYField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Elem_Connection_ID {
            get {
                return this.elem_Connection_IDField;
            }
            set {
                this.elem_Connection_IDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Elem_ID {
            get {
                return this.elem_IDField;
            }
            set {
                this.elem_IDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Elem_Name {
            get {
                return this.elem_NameField;
            }
            set {
                this.elem_NameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ElementType {
            get {
                return this.elementTypeField;
            }
            set {
                this.elementTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string MPRN {
            get {
                return this.mPRNField;
            }
            set {
                this.mPRNField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Phases {
            get {
                return this.phasesField;
            }
            set {
                this.phasesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="KeyValuePairOfstringNeplanService.Connection_infomHiA0HHi", Namespace="http://schemas.datacontract.org/2004/07/System.Collections.Generic")]
    public partial class KeyValuePairOfstringNeplanServiceConnection_infomHiA0HHi {
        
        private string keyField;
        
        private NeplanServiceConnection_info valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public NeplanServiceConnection_info value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/System.Collections.Generic")]
    public partial class KeyValuePairOfstringstring {
        
        private string keyField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportFeederItem {
        
        private double ploadFactorField;
        
        private bool ploadFactorFieldSpecified;
        
        private double qloadFactorField;
        
        private bool qloadFactorFieldSpecified;
        
        private string atElementNameField;
        
        private string atNodeNameField;
        
        private string colorField;
        
        private string nameField;
        
        /// <remarks/>
        public double PloadFactor {
            get {
                return this.ploadFactorField;
            }
            set {
                this.ploadFactorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PloadFactorSpecified {
            get {
                return this.ploadFactorFieldSpecified;
            }
            set {
                this.ploadFactorFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double QloadFactor {
            get {
                return this.qloadFactorField;
            }
            set {
                this.qloadFactorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool QloadFactorSpecified {
            get {
                return this.qloadFactorFieldSpecified;
            }
            set {
                this.qloadFactorFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string atElementName {
            get {
                return this.atElementNameField;
            }
            set {
                this.atElementNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string atNodeName {
            get {
                return this.atNodeNameField;
            }
            set {
                this.atNodeNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string color {
            get {
                return this.colorField;
            }
            set {
                this.colorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AnalysisReturnInfo.RelayResultData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External")]
    public partial class AnalysisReturnInfoRelayResultData {
        
        private string elementIdField;
        
        private double factorField;
        
        private bool factorFieldSpecified;
        
        private string faultedNodeIdField;
        
        private double iField;
        
        private bool iFieldSpecified;
        
        private double iangField;
        
        private bool iangFieldSpecified;
        
        private double rField;
        
        private bool rFieldSpecified;
        
        private string relayIdField;
        
        private double tripTimeField;
        
        private bool tripTimeFieldSpecified;
        
        private string typeSCField;
        
        private double uField;
        
        private bool uFieldSpecified;
        
        private double unField;
        
        private bool unFieldSpecified;
        
        private double xField;
        
        private bool xFieldSpecified;
        
        private double zField;
        
        private bool zFieldSpecified;
        
        private double zangField;
        
        private bool zangFieldSpecified;
        
        /// <remarks/>
        public string ElementId {
            get {
                return this.elementIdField;
            }
            set {
                this.elementIdField = value;
            }
        }
        
        /// <remarks/>
        public double Factor {
            get {
                return this.factorField;
            }
            set {
                this.factorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FactorSpecified {
            get {
                return this.factorFieldSpecified;
            }
            set {
                this.factorFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string FaultedNodeId {
            get {
                return this.faultedNodeIdField;
            }
            set {
                this.faultedNodeIdField = value;
            }
        }
        
        /// <remarks/>
        public double I {
            get {
                return this.iField;
            }
            set {
                this.iField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ISpecified {
            get {
                return this.iFieldSpecified;
            }
            set {
                this.iFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double Iang {
            get {
                return this.iangField;
            }
            set {
                this.iangField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IangSpecified {
            get {
                return this.iangFieldSpecified;
            }
            set {
                this.iangFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double R {
            get {
                return this.rField;
            }
            set {
                this.rField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RSpecified {
            get {
                return this.rFieldSpecified;
            }
            set {
                this.rFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string RelayId {
            get {
                return this.relayIdField;
            }
            set {
                this.relayIdField = value;
            }
        }
        
        /// <remarks/>
        public double TripTime {
            get {
                return this.tripTimeField;
            }
            set {
                this.tripTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TripTimeSpecified {
            get {
                return this.tripTimeFieldSpecified;
            }
            set {
                this.tripTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string TypeSC {
            get {
                return this.typeSCField;
            }
            set {
                this.typeSCField = value;
            }
        }
        
        /// <remarks/>
        public double U {
            get {
                return this.uField;
            }
            set {
                this.uField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool USpecified {
            get {
                return this.uFieldSpecified;
            }
            set {
                this.uFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double Un {
            get {
                return this.unField;
            }
            set {
                this.unField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UnSpecified {
            get {
                return this.unFieldSpecified;
            }
            set {
                this.unFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double X {
            get {
                return this.xField;
            }
            set {
                this.xField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool XSpecified {
            get {
                return this.xFieldSpecified;
            }
            set {
                this.xFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double Z {
            get {
                return this.zField;
            }
            set {
                this.zField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ZSpecified {
            get {
                return this.zFieldSpecified;
            }
            set {
                this.zFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double Zang {
            get {
                return this.zangField;
            }
            set {
                this.zangField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ZangSpecified {
            get {
                return this.zangFieldSpecified;
            }
            set {
                this.zangFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AnalysisReturnInfo.CableSizingLineData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External")]
    public partial class AnalysisReturnInfoCableSizingLineData {
        
        private byte[] binaryDataField;
        
        private string libTypeField;
        
        private string lineIDField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)]
        public byte[] BinaryData {
            get {
                return this.binaryDataField;
            }
            set {
                this.binaryDataField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string LibType {
            get {
                return this.libTypeField;
            }
            set {
                this.libTypeField = value;
            }
        }
        
        /// <remarks/>
        public string LineID {
            get {
                return this.lineIDField;
            }
            set {
                this.lineIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External")]
    public partial class AnalysisReturnInfo {
        
        private string adjustedLoadsFileNameField;
        
        private string analysisIDField;
        
        private string analysisModuleField;
        
        private string automaticSettingsResultField;
        
        private AnalysisReturnInfoCableSizingLineData[] cableSizingLineDataResultField;
        
        private string conXMLField;
        
        private string directoryNameField;
        
        private bool faultClearedField;
        
        private bool faultClearedFieldSpecified;
        
        private bool hasConvergedField;
        
        private bool hasConvergedFieldSpecified;
        
        private string loadSummaryField;
        
        private string logFilenameField;
        
        private string networkReductionXMLField;
        
        private string operationalDataNameField;
        
        private byte[] relayDataField;
        
        private string resultFile2ButtonNameField;
        
        private string resultFile2NameField;
        
        private string resultFilenameField;
        
        private int returnInfoField;
        
        private bool returnInfoFieldSpecified;
        
        private bool runAnalysisWithoutSavingToDBField;
        
        private bool runAnalysisWithoutSavingToDBFieldSpecified;
        
        private AnalysisReturnInfoRelayResultData[] selectivityChartResultsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string AdjustedLoadsFileName {
            get {
                return this.adjustedLoadsFileNameField;
            }
            set {
                this.adjustedLoadsFileNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string AnalysisID {
            get {
                return this.analysisIDField;
            }
            set {
                this.analysisIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string AnalysisModule {
            get {
                return this.analysisModuleField;
            }
            set {
                this.analysisModuleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string AutomaticSettingsResult {
            get {
                return this.automaticSettingsResultField;
            }
            set {
                this.automaticSettingsResultField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public AnalysisReturnInfoCableSizingLineData[] CableSizingLineDataResult {
            get {
                return this.cableSizingLineDataResultField;
            }
            set {
                this.cableSizingLineDataResultField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ConXML {
            get {
                return this.conXMLField;
            }
            set {
                this.conXMLField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string DirectoryName {
            get {
                return this.directoryNameField;
            }
            set {
                this.directoryNameField = value;
            }
        }
        
        /// <remarks/>
        public bool FaultCleared {
            get {
                return this.faultClearedField;
            }
            set {
                this.faultClearedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FaultClearedSpecified {
            get {
                return this.faultClearedFieldSpecified;
            }
            set {
                this.faultClearedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool HasConverged {
            get {
                return this.hasConvergedField;
            }
            set {
                this.hasConvergedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HasConvergedSpecified {
            get {
                return this.hasConvergedFieldSpecified;
            }
            set {
                this.hasConvergedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string LoadSummary {
            get {
                return this.loadSummaryField;
            }
            set {
                this.loadSummaryField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string LogFilename {
            get {
                return this.logFilenameField;
            }
            set {
                this.logFilenameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string NetworkReductionXML {
            get {
                return this.networkReductionXMLField;
            }
            set {
                this.networkReductionXMLField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string OperationalDataName {
            get {
                return this.operationalDataNameField;
            }
            set {
                this.operationalDataNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)]
        public byte[] RelayData {
            get {
                return this.relayDataField;
            }
            set {
                this.relayDataField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ResultFile2ButtonName {
            get {
                return this.resultFile2ButtonNameField;
            }
            set {
                this.resultFile2ButtonNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ResultFile2Name {
            get {
                return this.resultFile2NameField;
            }
            set {
                this.resultFile2NameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ResultFilename {
            get {
                return this.resultFilenameField;
            }
            set {
                this.resultFilenameField = value;
            }
        }
        
        /// <remarks/>
        public int ReturnInfo {
            get {
                return this.returnInfoField;
            }
            set {
                this.returnInfoField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ReturnInfoSpecified {
            get {
                return this.returnInfoFieldSpecified;
            }
            set {
                this.returnInfoFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool RunAnalysisWithoutSavingToDB {
            get {
                return this.runAnalysisWithoutSavingToDBField;
            }
            set {
                this.runAnalysisWithoutSavingToDBField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RunAnalysisWithoutSavingToDBSpecified {
            get {
                return this.runAnalysisWithoutSavingToDBFieldSpecified;
            }
            set {
                this.runAnalysisWithoutSavingToDBFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public AnalysisReturnInfoRelayResultData[] SelectivityChartResults {
            get {
                return this.selectivityChartResultsField;
            }
            set {
                this.selectivityChartResultsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External")]
    public partial class AnalysisParameterSettings {
        
        private string anschlKnIDField;
        
        private bool calcOnlyLoadedDataField;
        
        private bool calcOnlyLoadedDataFieldSpecified;
        
        private string conXMLField;
        
        private bool doRecondResizingField;
        
        private bool doRecondResizingFieldSpecified;
        
        private string eleIDField;
        
        private bool excludeElementsInMaintField;
        
        private bool excludeElementsInMaintFieldSpecified;
        
        private bool excludeElementsInstalledField;
        
        private bool excludeElementsInstalledFieldSpecified;
        
        private bool excludeOutOfOperElementsField;
        
        private bool excludeOutOfOperElementsFieldSpecified;
        
        private bool excludeProjectedElementsField;
        
        private bool excludeProjectedElementsFieldSpecified;
        
        private string exclutionDateForInstalledField;
        
        private string exclutionDateForOutOfOperField;
        
        private bool includeBoundaryElementsInCalculationField;
        
        private bool includeBoundaryElementsInCalculationFieldSpecified;
        
        private string itemTypeNameForRecondResizingFieldField;
        
        private string itemlibNameForRecondResizingField;
        
        private string itemlibSubNameForRecondResizingField;
        
        private string libItemTypeNameForRecondResizingField;
        
        private string libNameForRecondResizingField;
        
        private string libSubNameForRecondResizingField;
        
        private string[] listOfRelayIDsField;
        
        private string[] listOfSelectedFeederIDsField;
        
        private string[] listOfSelectedPartNetwIDsField;
        
        private string[] listOfShortCircuitLocationIDsField;
        
        private string logNameField;
        
        private string mediumTypeField;
        
        private int nCalcField;
        
        private bool nCalcFieldSpecified;
        
        private string relayIDField;
        
        private string[] selectedRecondResizElementsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string AnschlKnID {
            get {
                return this.anschlKnIDField;
            }
            set {
                this.anschlKnIDField = value;
            }
        }
        
        /// <remarks/>
        public bool CalcOnlyLoadedData {
            get {
                return this.calcOnlyLoadedDataField;
            }
            set {
                this.calcOnlyLoadedDataField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CalcOnlyLoadedDataSpecified {
            get {
                return this.calcOnlyLoadedDataFieldSpecified;
            }
            set {
                this.calcOnlyLoadedDataFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ConXML {
            get {
                return this.conXMLField;
            }
            set {
                this.conXMLField = value;
            }
        }
        
        /// <remarks/>
        public bool DoRecondResizing {
            get {
                return this.doRecondResizingField;
            }
            set {
                this.doRecondResizingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DoRecondResizingSpecified {
            get {
                return this.doRecondResizingFieldSpecified;
            }
            set {
                this.doRecondResizingFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string EleID {
            get {
                return this.eleIDField;
            }
            set {
                this.eleIDField = value;
            }
        }
        
        /// <remarks/>
        public bool ExcludeElementsInMaint {
            get {
                return this.excludeElementsInMaintField;
            }
            set {
                this.excludeElementsInMaintField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExcludeElementsInMaintSpecified {
            get {
                return this.excludeElementsInMaintFieldSpecified;
            }
            set {
                this.excludeElementsInMaintFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool ExcludeElementsInstalled {
            get {
                return this.excludeElementsInstalledField;
            }
            set {
                this.excludeElementsInstalledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExcludeElementsInstalledSpecified {
            get {
                return this.excludeElementsInstalledFieldSpecified;
            }
            set {
                this.excludeElementsInstalledFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool ExcludeOutOfOperElements {
            get {
                return this.excludeOutOfOperElementsField;
            }
            set {
                this.excludeOutOfOperElementsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExcludeOutOfOperElementsSpecified {
            get {
                return this.excludeOutOfOperElementsFieldSpecified;
            }
            set {
                this.excludeOutOfOperElementsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool ExcludeProjectedElements {
            get {
                return this.excludeProjectedElementsField;
            }
            set {
                this.excludeProjectedElementsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExcludeProjectedElementsSpecified {
            get {
                return this.excludeProjectedElementsFieldSpecified;
            }
            set {
                this.excludeProjectedElementsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ExclutionDateForInstalled {
            get {
                return this.exclutionDateForInstalledField;
            }
            set {
                this.exclutionDateForInstalledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ExclutionDateForOutOfOper {
            get {
                return this.exclutionDateForOutOfOperField;
            }
            set {
                this.exclutionDateForOutOfOperField = value;
            }
        }
        
        /// <remarks/>
        public bool IncludeBoundaryElementsInCalculation {
            get {
                return this.includeBoundaryElementsInCalculationField;
            }
            set {
                this.includeBoundaryElementsInCalculationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IncludeBoundaryElementsInCalculationSpecified {
            get {
                return this.includeBoundaryElementsInCalculationFieldSpecified;
            }
            set {
                this.includeBoundaryElementsInCalculationFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ItemTypeNameForRecondResizingField {
            get {
                return this.itemTypeNameForRecondResizingFieldField;
            }
            set {
                this.itemTypeNameForRecondResizingFieldField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ItemlibNameForRecondResizing {
            get {
                return this.itemlibNameForRecondResizingField;
            }
            set {
                this.itemlibNameForRecondResizingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ItemlibSubNameForRecondResizing {
            get {
                return this.itemlibSubNameForRecondResizingField;
            }
            set {
                this.itemlibSubNameForRecondResizingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string LibItemTypeNameForRecondResizing {
            get {
                return this.libItemTypeNameForRecondResizingField;
            }
            set {
                this.libItemTypeNameForRecondResizingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string LibNameForRecondResizing {
            get {
                return this.libNameForRecondResizingField;
            }
            set {
                this.libNameForRecondResizingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string LibSubNameForRecondResizing {
            get {
                return this.libSubNameForRecondResizingField;
            }
            set {
                this.libSubNameForRecondResizingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("guid", Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)]
        public string[] ListOfRelayIDs {
            get {
                return this.listOfRelayIDsField;
            }
            set {
                this.listOfRelayIDsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("guid", Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)]
        public string[] ListOfSelectedFeederIDs {
            get {
                return this.listOfSelectedFeederIDsField;
            }
            set {
                this.listOfSelectedFeederIDsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("guid", Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)]
        public string[] ListOfSelectedPartNetwIDs {
            get {
                return this.listOfSelectedPartNetwIDsField;
            }
            set {
                this.listOfSelectedPartNetwIDsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("guid", Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)]
        public string[] ListOfShortCircuitLocationIDs {
            get {
                return this.listOfShortCircuitLocationIDsField;
            }
            set {
                this.listOfShortCircuitLocationIDsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string LogName {
            get {
                return this.logNameField;
            }
            set {
                this.logNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string MediumType {
            get {
                return this.mediumTypeField;
            }
            set {
                this.mediumTypeField = value;
            }
        }
        
        /// <remarks/>
        public int NCalc {
            get {
                return this.nCalcField;
            }
            set {
                this.nCalcField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NCalcSpecified {
            get {
                return this.nCalcFieldSpecified;
            }
            set {
                this.nCalcFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string RelayID {
            get {
                return this.relayIDField;
            }
            set {
                this.relayIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("guid", Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)]
        public string[] SelectedRecondResizElements {
            get {
                return this.selectedRecondResizElementsField;
            }
            set {
                this.selectedRecondResizElementsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="NeplanService.ElementResult", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.External")]
    public partial class NeplanServiceElementResult {
        
        private string elementIDField;
        
        private string nameField;
        
        private string xMLdataField;
        
        private short portNrField;
        
        private bool portNrFieldSpecified;
        
        /// <remarks/>
        public string ElementID {
            get {
                return this.elementIDField;
            }
            set {
                this.elementIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string XMLdata {
            get {
                return this.xMLdataField;
            }
            set {
                this.xMLdataField = value;
            }
        }
        
        /// <remarks/>
        public short portNr {
            get {
                return this.portNrField;
            }
            set {
                this.portNrField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool portNrSpecified {
            get {
                return this.portNrFieldSpecified;
            }
            set {
                this.portNrFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External")]
    public partial class LineSectionData {
        
        private short cableOrOHLField;
        
        private bool cableOrOHLFieldSpecified;
        
        private string descriptionField;
        
        private double diameterField;
        
        private bool diameterFieldSpecified;
        
        private int installationYearField;
        
        private bool installationYearFieldSpecified;
        
        private short layoutField;
        
        private bool layoutFieldSpecified;
        
        private double lengthField;
        
        private bool lengthFieldSpecified;
        
        private string libraryTypeField;
        
        private short materialField;
        
        private bool materialFieldSpecified;
        
        private string nameField;
        
        /// <remarks/>
        public short CableOrOHL {
            get {
                return this.cableOrOHLField;
            }
            set {
                this.cableOrOHLField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CableOrOHLSpecified {
            get {
                return this.cableOrOHLFieldSpecified;
            }
            set {
                this.cableOrOHLFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public double Diameter {
            get {
                return this.diameterField;
            }
            set {
                this.diameterField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DiameterSpecified {
            get {
                return this.diameterFieldSpecified;
            }
            set {
                this.diameterFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int InstallationYear {
            get {
                return this.installationYearField;
            }
            set {
                this.installationYearField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InstallationYearSpecified {
            get {
                return this.installationYearFieldSpecified;
            }
            set {
                this.installationYearFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public short Layout {
            get {
                return this.layoutField;
            }
            set {
                this.layoutField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LayoutSpecified {
            get {
                return this.layoutFieldSpecified;
            }
            set {
                this.layoutFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double Length {
            get {
                return this.lengthField;
            }
            set {
                this.lengthField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LengthSpecified {
            get {
                return this.lengthFieldSpecified;
            }
            set {
                this.lengthFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string LibraryType {
            get {
                return this.libraryTypeField;
            }
            set {
                this.libraryTypeField = value;
            }
        }
        
        /// <remarks/>
        public short Material {
            get {
                return this.materialField;
            }
            set {
                this.materialField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MaterialSpecified {
            get {
                return this.materialFieldSpecified;
            }
            set {
                this.materialFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External")]
    public partial class WaterLoadData {
        
        private string loadTypeField;
        
        private double qDemandField;
        
        private bool qDemandFieldSpecified;
        
        private short qunitField;
        
        private bool qunitFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string LoadType {
            get {
                return this.loadTypeField;
            }
            set {
                this.loadTypeField = value;
            }
        }
        
        /// <remarks/>
        public double QDemand {
            get {
                return this.qDemandField;
            }
            set {
                this.qDemandField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool QDemandSpecified {
            get {
                return this.qDemandFieldSpecified;
            }
            set {
                this.qDemandFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public short Qunit {
            get {
                return this.qunitField;
            }
            set {
                this.qunitField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool QunitSpecified {
            get {
                return this.qunitFieldSpecified;
            }
            set {
                this.qunitFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TechDataValue {
        
        private string valueField;
        
        private string variableNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string VariableName {
            get {
                return this.variableNameField;
            }
            set {
                this.variableNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportElementItem {
        
        private string areaNameField;
        
        private string bayField;
        
        private string[] bayesInStationField;
        
        private short cableOrOHLField;
        
        private bool cableOrOHLFieldSpecified;
        
        private double[] coordinatesLabel1Field;
        
        private double[] coordinatesLabel2Field;
        
        private double[] coordinatesLabel3Field;
        
        private double[] coordinatesLabel4Field;
        
        private double[] coordinatesLink1Field;
        
        private double[] coordinatesLink2Field;
        
        private double[] coordinatesLink3Field;
        
        private double[] coordinatesSymbolField;
        
        private double diameterField;
        
        private bool diameterFieldSpecified;
        
        private string elementInfoField;
        
        private double elevationField;
        
        private bool elevationFieldSpecified;
        
        private int installationYearField;
        
        private bool installationYearFieldSpecified;
        
        private bool isForwardNetworkField;
        
        private bool isForwardNetworkFieldSpecified;
        
        private bool isInMaintenanceField;
        
        private bool isInMaintenanceFieldSpecified;
        
        private bool isProjectedField;
        
        private bool isProjectedFieldSpecified;
        
        private short layoutField;
        
        private bool layoutFieldSpecified;
        
        private LoadData loadField;
        
        private int logicalSwitchField;
        
        private bool logicalSwitchFieldSpecified;
        
        private short materialField;
        
        private bool materialFieldSpecified;
        
        private string nodeName1Field;
        
        private string nodeName2Field;
        
        private string nodeName3Field;
        
        private string nodeName4Field;
        
        private string onGraphicLayerField;
        
        private short onPortNrField;
        
        private bool onPortNrFieldSpecified;
        
        private string subAreaNameField;
        
        private string substationField;
        
        private double symbolAngleField;
        
        private bool symbolAngleFieldSpecified;
        
        private string symbolNameField;
        
        private double symbolSizeField;
        
        private bool symbolSizeFieldSpecified;
        
        private TechDataValue[] techDataValuesField;
        
        private short typeField;
        
        private bool typeFieldSpecified;
        
        private WaterLoadData waterLoadDataField;
        
        private System.Nullable<int> zOrderNumField;
        
        private bool zOrderNumFieldSpecified;
        
        private string zoneNameField;
        
        private string aliasName1Field;
        
        private string aliasName2Field;
        
        private byte[] binaryDataField;
        
        private string descriptionField;
        
        private string elementTypeField;
        
        private double lengthField;
        
        private bool lengthFieldSpecified;
        
        private string libraryNameField;
        
        private string librarySubnameField;
        
        private string libraryTypeField;
        
        private string librayTypeField;
        
        private LineSectionData[] listLineSectionsField;
        
        private LoadData[] listSubLoadsField;
        
        private string nameField;
        
        private short numConnectionsField;
        
        private bool numConnectionsFieldSpecified;
        
        private short phaseField;
        
        private bool phaseFieldSpecified;
        
        private bool removeField;
        
        private bool removeFieldSpecified;
        
        private double unField;
        
        private bool unFieldSpecified;
        
        private string xmlDataField;
        
        private string xmlInvestField;
        
        private string xmlItemListField;
        
        private System.Nullable<float> yLocationField;
        
        private bool yLocationFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string AreaName {
            get {
                return this.areaNameField;
            }
            set {
                this.areaNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Bay {
            get {
                return this.bayField;
            }
            set {
                this.bayField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] BayesInStation {
            get {
                return this.bayesInStationField;
            }
            set {
                this.bayesInStationField = value;
            }
        }
        
        /// <remarks/>
        public short CableOrOHL {
            get {
                return this.cableOrOHLField;
            }
            set {
                this.cableOrOHLField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CableOrOHLSpecified {
            get {
                return this.cableOrOHLFieldSpecified;
            }
            set {
                this.cableOrOHLFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)]
        public double[] CoordinatesLabel1 {
            get {
                return this.coordinatesLabel1Field;
            }
            set {
                this.coordinatesLabel1Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)]
        public double[] CoordinatesLabel2 {
            get {
                return this.coordinatesLabel2Field;
            }
            set {
                this.coordinatesLabel2Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)]
        public double[] CoordinatesLabel3 {
            get {
                return this.coordinatesLabel3Field;
            }
            set {
                this.coordinatesLabel3Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)]
        public double[] CoordinatesLabel4 {
            get {
                return this.coordinatesLabel4Field;
            }
            set {
                this.coordinatesLabel4Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)]
        public double[] CoordinatesLink1 {
            get {
                return this.coordinatesLink1Field;
            }
            set {
                this.coordinatesLink1Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)]
        public double[] CoordinatesLink2 {
            get {
                return this.coordinatesLink2Field;
            }
            set {
                this.coordinatesLink2Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)]
        public double[] CoordinatesLink3 {
            get {
                return this.coordinatesLink3Field;
            }
            set {
                this.coordinatesLink3Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)]
        public double[] CoordinatesSymbol {
            get {
                return this.coordinatesSymbolField;
            }
            set {
                this.coordinatesSymbolField = value;
            }
        }
        
        /// <remarks/>
        public double Diameter {
            get {
                return this.diameterField;
            }
            set {
                this.diameterField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DiameterSpecified {
            get {
                return this.diameterFieldSpecified;
            }
            set {
                this.diameterFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ElementInfo {
            get {
                return this.elementInfoField;
            }
            set {
                this.elementInfoField = value;
            }
        }
        
        /// <remarks/>
        public double Elevation {
            get {
                return this.elevationField;
            }
            set {
                this.elevationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ElevationSpecified {
            get {
                return this.elevationFieldSpecified;
            }
            set {
                this.elevationFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int InstallationYear {
            get {
                return this.installationYearField;
            }
            set {
                this.installationYearField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InstallationYearSpecified {
            get {
                return this.installationYearFieldSpecified;
            }
            set {
                this.installationYearFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool IsForwardNetwork {
            get {
                return this.isForwardNetworkField;
            }
            set {
                this.isForwardNetworkField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsForwardNetworkSpecified {
            get {
                return this.isForwardNetworkFieldSpecified;
            }
            set {
                this.isForwardNetworkFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool IsInMaintenance {
            get {
                return this.isInMaintenanceField;
            }
            set {
                this.isInMaintenanceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsInMaintenanceSpecified {
            get {
                return this.isInMaintenanceFieldSpecified;
            }
            set {
                this.isInMaintenanceFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool IsProjected {
            get {
                return this.isProjectedField;
            }
            set {
                this.isProjectedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsProjectedSpecified {
            get {
                return this.isProjectedFieldSpecified;
            }
            set {
                this.isProjectedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public short Layout {
            get {
                return this.layoutField;
            }
            set {
                this.layoutField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LayoutSpecified {
            get {
                return this.layoutFieldSpecified;
            }
            set {
                this.layoutFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public LoadData Load {
            get {
                return this.loadField;
            }
            set {
                this.loadField = value;
            }
        }
        
        /// <remarks/>
        public int LogicalSwitch {
            get {
                return this.logicalSwitchField;
            }
            set {
                this.logicalSwitchField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LogicalSwitchSpecified {
            get {
                return this.logicalSwitchFieldSpecified;
            }
            set {
                this.logicalSwitchFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public short Material {
            get {
                return this.materialField;
            }
            set {
                this.materialField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MaterialSpecified {
            get {
                return this.materialFieldSpecified;
            }
            set {
                this.materialFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string NodeName1 {
            get {
                return this.nodeName1Field;
            }
            set {
                this.nodeName1Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string NodeName2 {
            get {
                return this.nodeName2Field;
            }
            set {
                this.nodeName2Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string NodeName3 {
            get {
                return this.nodeName3Field;
            }
            set {
                this.nodeName3Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string NodeName4 {
            get {
                return this.nodeName4Field;
            }
            set {
                this.nodeName4Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string OnGraphicLayer {
            get {
                return this.onGraphicLayerField;
            }
            set {
                this.onGraphicLayerField = value;
            }
        }
        
        /// <remarks/>
        public short OnPortNr {
            get {
                return this.onPortNrField;
            }
            set {
                this.onPortNrField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OnPortNrSpecified {
            get {
                return this.onPortNrFieldSpecified;
            }
            set {
                this.onPortNrFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string SubAreaName {
            get {
                return this.subAreaNameField;
            }
            set {
                this.subAreaNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Substation {
            get {
                return this.substationField;
            }
            set {
                this.substationField = value;
            }
        }
        
        /// <remarks/>
        public double SymbolAngle {
            get {
                return this.symbolAngleField;
            }
            set {
                this.symbolAngleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SymbolAngleSpecified {
            get {
                return this.symbolAngleFieldSpecified;
            }
            set {
                this.symbolAngleFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string SymbolName {
            get {
                return this.symbolNameField;
            }
            set {
                this.symbolNameField = value;
            }
        }
        
        /// <remarks/>
        public double SymbolSize {
            get {
                return this.symbolSizeField;
            }
            set {
                this.symbolSizeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SymbolSizeSpecified {
            get {
                return this.symbolSizeFieldSpecified;
            }
            set {
                this.symbolSizeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public TechDataValue[] TechDataValues {
            get {
                return this.techDataValuesField;
            }
            set {
                this.techDataValuesField = value;
            }
        }
        
        /// <remarks/>
        public short Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeSpecified {
            get {
                return this.typeFieldSpecified;
            }
            set {
                this.typeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public WaterLoadData WaterLoadData {
            get {
                return this.waterLoadDataField;
            }
            set {
                this.waterLoadDataField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> ZOrderNum {
            get {
                return this.zOrderNumField;
            }
            set {
                this.zOrderNumField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ZOrderNumSpecified {
            get {
                return this.zOrderNumFieldSpecified;
            }
            set {
                this.zOrderNumFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ZoneName {
            get {
                return this.zoneNameField;
            }
            set {
                this.zoneNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string aliasName1 {
            get {
                return this.aliasName1Field;
            }
            set {
                this.aliasName1Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string aliasName2 {
            get {
                return this.aliasName2Field;
            }
            set {
                this.aliasName2Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)]
        public byte[] binaryData {
            get {
                return this.binaryDataField;
            }
            set {
                this.binaryDataField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string elementType {
            get {
                return this.elementTypeField;
            }
            set {
                this.elementTypeField = value;
            }
        }
        
        /// <remarks/>
        public double length {
            get {
                return this.lengthField;
            }
            set {
                this.lengthField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lengthSpecified {
            get {
                return this.lengthFieldSpecified;
            }
            set {
                this.lengthFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string libraryName {
            get {
                return this.libraryNameField;
            }
            set {
                this.libraryNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string librarySubname {
            get {
                return this.librarySubnameField;
            }
            set {
                this.librarySubnameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string libraryType {
            get {
                return this.libraryTypeField;
            }
            set {
                this.libraryTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string librayType {
            get {
                return this.librayTypeField;
            }
            set {
                this.librayTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External")]
        public LineSectionData[] listLineSections {
            get {
                return this.listLineSectionsField;
            }
            set {
                this.listLineSectionsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External")]
        public LoadData[] listSubLoads {
            get {
                return this.listSubLoadsField;
            }
            set {
                this.listSubLoadsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public short numConnections {
            get {
                return this.numConnectionsField;
            }
            set {
                this.numConnectionsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool numConnectionsSpecified {
            get {
                return this.numConnectionsFieldSpecified;
            }
            set {
                this.numConnectionsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public short phase {
            get {
                return this.phaseField;
            }
            set {
                this.phaseField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool phaseSpecified {
            get {
                return this.phaseFieldSpecified;
            }
            set {
                this.phaseFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool remove {
            get {
                return this.removeField;
            }
            set {
                this.removeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool removeSpecified {
            get {
                return this.removeFieldSpecified;
            }
            set {
                this.removeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double un {
            get {
                return this.unField;
            }
            set {
                this.unField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unSpecified {
            get {
                return this.unFieldSpecified;
            }
            set {
                this.unFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string xmlData {
            get {
                return this.xmlDataField;
            }
            set {
                this.xmlDataField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string xmlInvest {
            get {
                return this.xmlInvestField;
            }
            set {
                this.xmlInvestField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string xmlItemList {
            get {
                return this.xmlItemListField;
            }
            set {
                this.xmlItemListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<float> yLocation {
            get {
                return this.yLocationField;
            }
            set {
                this.yLocationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool yLocationSpecified {
            get {
                return this.yLocationFieldSpecified;
            }
            set {
                this.yLocationFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External")]
    public partial class LoadData {
        
        private short connectionTypeField;
        
        private bool connectionTypeFieldSpecified;
        
        private short lfTypeField;
        
        private bool lfTypeFieldSpecified;
        
        private string nameField;
        
        private int numCustomersField;
        
        private bool numCustomersFieldSpecified;
        
        private short phaseField;
        
        private bool phaseFieldSpecified;
        
        private string scalingTypeField;
        
        private short unitField;
        
        private bool unitFieldSpecified;
        
        private double value1Field;
        
        private bool value1FieldSpecified;
        
        private double value2Field;
        
        private bool value2FieldSpecified;
        
        /// <remarks/>
        public short ConnectionType {
            get {
                return this.connectionTypeField;
            }
            set {
                this.connectionTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ConnectionTypeSpecified {
            get {
                return this.connectionTypeFieldSpecified;
            }
            set {
                this.connectionTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public short LfType {
            get {
                return this.lfTypeField;
            }
            set {
                this.lfTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LfTypeSpecified {
            get {
                return this.lfTypeFieldSpecified;
            }
            set {
                this.lfTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public int NumCustomers {
            get {
                return this.numCustomersField;
            }
            set {
                this.numCustomersField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumCustomersSpecified {
            get {
                return this.numCustomersFieldSpecified;
            }
            set {
                this.numCustomersFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public short Phase {
            get {
                return this.phaseField;
            }
            set {
                this.phaseField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PhaseSpecified {
            get {
                return this.phaseFieldSpecified;
            }
            set {
                this.phaseFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ScalingType {
            get {
                return this.scalingTypeField;
            }
            set {
                this.scalingTypeField = value;
            }
        }
        
        /// <remarks/>
        public short Unit {
            get {
                return this.unitField;
            }
            set {
                this.unitField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UnitSpecified {
            get {
                return this.unitFieldSpecified;
            }
            set {
                this.unitFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double Value1 {
            get {
                return this.value1Field;
            }
            set {
                this.value1Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool Value1Specified {
            get {
                return this.value1FieldSpecified;
            }
            set {
                this.value1FieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double Value2 {
            get {
                return this.value2Field;
            }
            set {
                this.value2Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool Value2Specified {
            get {
                return this.value2FieldSpecified;
            }
            set {
                this.value2FieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void CreateProjectCompletedEventHandler(object sender, CreateProjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExternalProject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExternalProject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetProjectCompletedEventHandler(object sender, GetProjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExternalProject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExternalProject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetLogOnUrlWithProjectCompletedEventHandler(object sender, GetLogOnUrlWithProjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLogOnUrlWithProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLogOnUrlWithProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetLogOnUrlCompletedEventHandler(object sender, GetLogOnUrlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLogOnUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLogOnUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetLogOnSessionIDCompletedEventHandler(object sender, GetLogOnSessionIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLogOnSessionIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLogOnSessionIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void InsertNodeCompletedEventHandler(object sender, InsertNodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertNodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertNodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ExternalProject project {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExternalProject)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void InsertNodeWithoutGraphicCompletedEventHandler(object sender, InsertNodeWithoutGraphicCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertNodeWithoutGraphicCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertNodeWithoutGraphicCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ExternalProject project {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExternalProject)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void InsertBusbarCompletedEventHandler(object sender, InsertBusbarCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertBusbarCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertBusbarCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ExternalProject project {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExternalProject)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void InsertLineCompletedEventHandler(object sender, InsertLineCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertLineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertLineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void InsertLineByNodeIDCompletedEventHandler(object sender, InsertLineByNodeIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertLineByNodeIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertLineByNodeIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void InsertLineAsymCompletedEventHandler(object sender, InsertLineAsymCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertLineAsymCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertLineAsymCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void Insert2PortElementCompletedEventHandler(object sender, Insert2PortElementCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Insert2PortElementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Insert2PortElementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void Insert1PortElementCompletedEventHandler(object sender, Insert1PortElementCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Insert1PortElementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Insert1PortElementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ExternalProject project {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExternalProject)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void InsertProtectionElementCompletedEventHandler(object sender, InsertProtectionElementCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertProtectionElementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertProtectionElementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void InsertFeederCompletedEventHandler(object sender, InsertFeederCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertFeederCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertFeederCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void InsertAreaCompletedEventHandler(object sender, InsertAreaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertAreaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertAreaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void InsertZoneCompletedEventHandler(object sender, InsertZoneCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertZoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertZoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void InsertMeasurementCompletedEventHandler(object sender, InsertMeasurementCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertMeasurementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertMeasurementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void InsertMeasurementByElementIDCompletedEventHandler(object sender, InsertMeasurementByElementIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertMeasurementByElementIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertMeasurementByElementIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void InsertDiagramCompletedEventHandler(object sender, InsertDiagramCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertDiagramCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertDiagramCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void InsertGraphicLayerCompletedEventHandler(object sender, InsertGraphicLayerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertGraphicLayerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertGraphicLayerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ExternalProject project {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExternalProject)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void AddSubLoadCompletedEventHandler(object sender, AddSubLoadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddSubLoadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddSubLoadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool AddSubLoadResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool AddSubLoadResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void AssignPowerTo1PortCompletedEventHandler(object sender, AssignPowerTo1PortCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AssignPowerTo1PortCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AssignPowerTo1PortCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool AssignPowerTo1PortResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool AssignPowerTo1PortResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void AssignPowerTo1PortByIDCompletedEventHandler(object sender, AssignPowerTo1PortByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AssignPowerTo1PortByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AssignPowerTo1PortByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool AssignPowerTo1PortByIDResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool AssignPowerTo1PortByIDResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SwitchElementAtPortByIDCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SwitchElementAtPortCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetElementDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetElementDataByIDCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetElementDataByNameandTypeCompletedEventHandler(object sender, GetElementDataByNameandTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetElementDataByNameandTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetElementDataByNameandTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string elementID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string aliasName1 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string aliasName2 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string description {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public bool isInMaintenance {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public bool isInMaintenanceSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public bool IsProjected {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public bool IsProjectedSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public string zoneGuid {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[8]));
            }
        }
        
        /// <remarks/>
        public string subAreaGuid {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[9]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetElementDataByIDandTypeCompletedEventHandler(object sender, GetElementDataByIDandTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetElementDataByIDandTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetElementDataByIDandTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string elementName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string aliasName1 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string aliasName2 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string description {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public bool isInMaintenance {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public bool isInMaintenanceSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public bool IsProjected {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public bool IsProjectedSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public string zoneGuid {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[8]));
            }
        }
        
        /// <remarks/>
        public string subAreaGuid {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[9]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetElementAttributeCompletedEventHandler(object sender, SetElementAttributeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetElementAttributeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetElementAttributeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool SetElementAttributeResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool SetElementAttributeResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetElementAttributeByIDCompletedEventHandler(object sender, SetElementAttributeByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetElementAttributeByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetElementAttributeByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool SetElementAttributeByIDResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool SetElementAttributeByIDResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetElementAttributeByIDCompletedEventHandler(object sender, GetElementAttributeByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetElementAttributeByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetElementAttributeByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string attributeValue {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool GetElementAttributeByIDResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public bool GetElementAttributeByIDResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetElementAttributeByNameCompletedEventHandler(object sender, GetElementAttributeByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetElementAttributeByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetElementAttributeByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string attributeValue {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool GetElementAttributeByNameResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public bool GetElementAttributeByNameResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void AddReadAllRoleToProjectCompletedEventHandler(object sender, AddReadAllRoleToProjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddReadAllRoleToProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddReadAllRoleToProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool AddReadAllRoleToProjectResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool AddReadAllRoleToProjectResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void AddVoltageLevelCompletedEventHandler(object sender, AddVoltageLevelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddVoltageLevelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddVoltageLevelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetDiagramMinValuesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetLineStyleCompletedEventHandler(object sender, SetLineStyleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetLineStyleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetLineStyleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool SetLineStyleResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool SetLineStyleResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetDefaultValuesCompletedEventHandler(object sender, SetDefaultValuesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetDefaultValuesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetDefaultValuesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExternalProject project {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExternalProject)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool SetDefaultValuesResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public bool SetDefaultValuesResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetDiagramParameterAttributeCompletedEventHandler(object sender, SetDiagramParameterAttributeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetDiagramParameterAttributeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetDiagramParameterAttributeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool SetDiagramParameterAttributeResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool SetDiagramParameterAttributeResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetCalcParameterAttributeCompletedEventHandler(object sender, SetCalcParameterAttributeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetCalcParameterAttributeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetCalcParameterAttributeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool SetCalcParameterAttributeResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool SetCalcParameterAttributeResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetGraphicLayerWorldCoordinatesCompletedEventHandler(object sender, SetGraphicLayerWorldCoordinatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetGraphicLayerWorldCoordinatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetGraphicLayerWorldCoordinatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool SetGraphicLayerWorldCoordinatesResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool SetGraphicLayerWorldCoordinatesResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void AddNodesFromListCompletedEventHandler(object sender, AddNodesFromListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddNodesFromListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddNodesFromListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExternalProject project {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExternalProject)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool AddNodesFromListResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public bool AddNodesFromListResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void AddElementsFromListCompletedEventHandler(object sender, AddElementsFromListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddElementsFromListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddElementsFromListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExternalProject project {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExternalProject)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool AddElementsFromListResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public bool AddElementsFromListResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void AddSubLoadsFromListCompletedEventHandler(object sender, AddSubLoadsFromListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddSubLoadsFromListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddSubLoadsFromListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExternalProject project {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExternalProject)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool AddSubLoadsFromListResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public bool AddSubLoadsFromListResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetDateTimeLastSaveCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetResultSummaryCompletedEventHandler(object sender, GetResultSummaryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResultSummaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetResultSummaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetListResultSummaryCompletedEventHandler(object sender, GetListResultSummaryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListResultSummaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListResultSummaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetAllElementResultsCompletedEventHandler(object sender, GetAllElementResultsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllElementResultsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllElementResultsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NeplanServiceElementResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NeplanServiceElementResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetCalculationSettingsCompletedEventHandler(object sender, GetCalculationSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCalculationSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCalculationSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetResultElementByIDCompletedEventHandler(object sender, GetResultElementByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResultElementByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetResultElementByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetResultsElementsByIDCompletedEventHandler(object sender, GetResultsElementsByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResultsElementsByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetResultsElementsByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NeplanServiceElementResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NeplanServiceElementResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetResultElementByNameCompletedEventHandler(object sender, GetResultElementByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResultElementByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetResultElementByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void AnalyseVariantWithAnalysisSettingsCompletedEventHandler(object sender, AnalyseVariantWithAnalysisSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AnalyseVariantWithAnalysisSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AnalyseVariantWithAnalysisSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AnalysisReturnInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AnalysisReturnInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void AnalyseVariantCompletedEventHandler(object sender, AnalyseVariantCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AnalyseVariantCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AnalyseVariantCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AnalysisReturnInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AnalysisReturnInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void IsAnalysisDoneCompletedEventHandler(object sender, IsAnalysisDoneCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsAnalysisDoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsAnalysisDoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool IsAnalysisDoneResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool IsAnalysisDoneResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void AnalyseWithListFileWithoutSavingCompletedEventHandler(object sender, AnalyseWithListFileWithoutSavingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AnalyseWithListFileWithoutSavingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AnalyseWithListFileWithoutSavingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AnalysisReturnInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AnalysisReturnInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void AnalyseWithProjectFileWithoutSavingCompletedEventHandler(object sender, AnalyseWithProjectFileWithoutSavingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AnalyseWithProjectFileWithoutSavingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AnalyseWithProjectFileWithoutSavingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AnalysisReturnInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AnalysisReturnInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void AnalyseWithCDEFileWithoutSavingCompletedEventHandler(object sender, AnalyseWithCDEFileWithoutSavingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AnalyseWithCDEFileWithoutSavingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AnalyseWithCDEFileWithoutSavingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AnalysisReturnInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AnalysisReturnInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void DoAnalysisFromFilesCompletedEventHandler(object sender, DoAnalysisFromFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoAnalysisFromFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoAnalysisFromFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AnalysisReturnInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AnalysisReturnInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void EnergyCalculationFromFilesCompletedEventHandler(object sender, EnergyCalculationFromFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EnergyCalculationFromFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EnergyCalculationFromFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AnalysisReturnInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AnalysisReturnInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void LoadAllocationFromDBCompletedEventHandler(object sender, LoadAllocationFromDBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadAllocationFromDBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadAllocationFromDBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AnalysisReturnInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AnalysisReturnInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void LoadAllocationFromMeasurmentFileAndProjectNameCompletedEventHandler(object sender, LoadAllocationFromMeasurmentFileAndProjectNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadAllocationFromMeasurmentFileAndProjectNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadAllocationFromMeasurmentFileAndProjectNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AnalysisReturnInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AnalysisReturnInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void LoadAllocationFromMeasurmentFileCompletedEventHandler(object sender, LoadAllocationFromMeasurmentFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadAllocationFromMeasurmentFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadAllocationFromMeasurmentFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AnalysisReturnInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AnalysisReturnInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void ImportFromListFileAndDoLoadAllocationCompletedEventHandler(object sender, ImportFromListFileAndDoLoadAllocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportFromListFileAndDoLoadAllocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportFromListFileAndDoLoadAllocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExternalProject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExternalProject)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public AnalysisReturnInfo analysisReturnInfo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AnalysisReturnInfo)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void DeleteAnaylsisLogFileCompletedEventHandler(object sender, DeleteAnaylsisLogFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteAnaylsisLogFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteAnaylsisLogFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool DeleteAnaylsisLogFileResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool DeleteAnaylsisLogFileResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void DeleteAnalysisResultFileCompletedEventHandler(object sender, DeleteAnalysisResultFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteAnalysisResultFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteAnalysisResultFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool DeleteAnalysisResultFileResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool DeleteAnalysisResultFileResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void DeleteProjectCompletedEventHandler(object sender, DeleteProjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool DeleteProjectResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool DeleteProjectResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void MarkedProjectAsDeletedCompletedEventHandler(object sender, MarkedProjectAsDeletedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MarkedProjectAsDeletedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MarkedProjectAsDeletedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool MarkedProjectAsDeletedResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool MarkedProjectAsDeletedResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void ImportFromFileCompletedEventHandler(object sender, ImportFromFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportFromFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportFromFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int ImportFromFileResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool ImportFromFileResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void AddFeederFromListCompletedEventHandler(object sender, AddFeederFromListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddFeederFromListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddFeederFromListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool AddFeederFromListResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool AddFeederFromListResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void ImportFromListCompletedEventHandler(object sender, ImportFromListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportFromListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportFromListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExternalProject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExternalProject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void ImportFromListFileCompletedEventHandler(object sender, ImportFromListFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportFromListFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportFromListFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExternalProject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExternalProject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void MergeProjectFromListFileCompletedEventHandler(object sender, MergeProjectFromListFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MergeProjectFromListFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MergeProjectFromListFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExternalProject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExternalProject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void ImportFromCDECompletedEventHandler(object sender, ImportFromCDECompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportFromCDECompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportFromCDECompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExternalProject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExternalProject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void ImportFromCDEFilesCompletedEventHandler(object sender, ImportFromCDEFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportFromCDEFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportFromCDEFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExternalProject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExternalProject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void ImportFromCDEZipFileCompletedEventHandler(object sender, ImportFromCDEZipFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportFromCDEZipFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportFromCDEZipFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExternalProject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExternalProject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void ImportFromPSSEFilesCompletedEventHandler(object sender, ImportFromPSSEFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportFromPSSEFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportFromPSSEFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExternalProject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExternalProject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void ImportFromPSSEZipFileCompletedEventHandler(object sender, ImportFromPSSEZipFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportFromPSSEZipFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportFromPSSEZipFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExternalProject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExternalProject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void ImportFromShapeFileCompletedEventHandler(object sender, ImportFromShapeFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportFromShapeFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportFromShapeFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int ImportFromShapeFileResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool ImportFromShapeFileResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void ImportFromNDBCompletedEventHandler(object sender, ImportFromNDBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportFromNDBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportFromNDBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool ImportFromNDBResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool ImportFromNDBResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void ImportMeasuredDataFromXMlFileCompletedEventHandler(object sender, ImportMeasuredDataFromXMlFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportMeasuredDataFromXMlFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportMeasuredDataFromXMlFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool ImportMeasuredDataFromXMlFileResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool ImportMeasuredDataFromXMlFileResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void ExportProjectToNEP360CompletedEventHandler(object sender, ExportProjectToNEP360CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExportProjectToNEP360CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExportProjectToNEP360CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void WriteMessageToLogFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void DeleteUserLogFileCompletedEventHandler(object sender, DeleteUserLogFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteUserLogFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteUserLogFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool DeleteUserLogFileResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool DeleteUserLogFileResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetLogFileAsStringCompletedEventHandler(object sender, GetLogFileAsStringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLogFileAsStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLogFileAsStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetLogFileAsListCompletedEventHandler(object sender, GetLogFileAsListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLogFileAsListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLogFileAsListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void XMLUploadCompletedEventHandler(object sender, XMLUploadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class XMLUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal XMLUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void CDEUploadCompletedEventHandler(object sender, CDEUploadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CDEUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CDEUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void NDBUploadCompletedEventHandler(object sender, NDBUploadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NDBUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NDBUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void Nep360UploadCompletedEventHandler(object sender, Nep360UploadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Nep360UploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Nep360UploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void ZipUploadCompletedEventHandler(object sender, ZipUploadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ZipUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ZipUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void NepMeasUploadCompletedEventHandler(object sender, NepMeasUploadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NepMeasUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NepMeasUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetUserLogFileCompletedEventHandler(object sender, GetUserLogFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserLogFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserLogFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetAnaylsisLogFileCompletedEventHandler(object sender, GetAnaylsisLogFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAnaylsisLogFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAnaylsisLogFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetAnalysisResultFileCompletedEventHandler(object sender, GetAnalysisResultFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAnalysisResultFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAnalysisResultFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void createDailyBackupCompletedEventHandler(object sender, createDailyBackupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createDailyBackupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal createDailyBackupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void removeAllExpiredProjectsCompletedEventHandler(object sender, removeAllExpiredProjectsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeAllExpiredProjectsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeAllExpiredProjectsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetNamesOfElementsByTypeCompletedEventHandler(object sender, GetNamesOfElementsByTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNamesOfElementsByTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNamesOfElementsByTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public KeyValuePairOfstringstring[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((KeyValuePairOfstringstring[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void FindSwitchStatusOfElementsCompletedEventHandler(object sender, FindSwitchStatusOfElementsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FindSwitchStatusOfElementsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FindSwitchStatusOfElementsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public KeyValuePairOfstringNeplanServiceConnection_infomHiA0HHi[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((KeyValuePairOfstringNeplanServiceConnection_infomHiA0HHi[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void Find_Voltage_Level_of_One_Port_ElementCompletedEventHandler(object sender, Find_Voltage_Level_of_One_Port_ElementCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Find_Voltage_Level_of_One_Port_ElementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Find_Voltage_Level_of_One_Port_ElementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public double Voltage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool VoltageSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public bool Find_Voltage_Level_of_One_Port_ElementResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public bool Find_Voltage_Level_of_One_Port_ElementResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void ChangeSwitchStatusOfElementsCompletedEventHandler(object sender, ChangeSwitchStatusOfElementsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeSwitchStatusOfElementsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeSwitchStatusOfElementsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool ChangeSwitchStatusOfElementsResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool ChangeSwitchStatusOfElementsResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetPQValuesLdSmAsmCompletedEventHandler(object sender, GetPQValuesLdSmAsmCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPQValuesLdSmAsmCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPQValuesLdSmAsmCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NeplanServiceLoadGeneration_info[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NeplanServiceLoadGeneration_info[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetPowerofLoadsGeneratorsCompletedEventHandler(object sender, SetPowerofLoadsGeneratorsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetPowerofLoadsGeneratorsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetPowerofLoadsGeneratorsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool SetPowerofLoadsGeneratorsResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool SetPowerofLoadsGeneratorsResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void ChangeSwitchStatusOfElementListCompletedEventHandler(object sender, ChangeSwitchStatusOfElementListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeSwitchStatusOfElementListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeSwitchStatusOfElementListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool ChangeSwitchStatusOfElementListResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool ChangeSwitchStatusOfElementListResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void ImportIEC_62325_451_2FilesAndDoCIMExportCompletedEventHandler(object sender, ImportIEC_62325_451_2FilesAndDoCIMExportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportIEC_62325_451_2FilesAndDoCIMExportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportIEC_62325_451_2FilesAndDoCIMExportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NeplanDomainServiceImportReturnInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NeplanDomainServiceImportReturnInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetFeederIDByNameCompletedEventHandler(object sender, GetFeederIDByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFeederIDByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFeederIDByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591
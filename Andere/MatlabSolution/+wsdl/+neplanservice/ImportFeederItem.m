classdef ImportFeederItem < matlab.wsdl.internal.WsdlObject
    % ImportFeederItem(PloadFactor,QloadFactor,atElementName,atNodeName,color,name)  ImportFeederItem object for use with <a href="matlab:doc NeplanService">NeplanService</a> web client
    %
    %     PloadFactor - numeric scalar (XML double)
    %     QloadFactor - numeric scalar (XML double)
    %     atElementName - string
    %     atNodeName - string
    %     color - string
    %     name - string
    %
    % To create a ImportFeederItem, use <a href="matlab:doc NeplanService.getImportFeederItem">NeplanService.getImportFeederItem</a>.
    %
    %
    % See also <a href="matlab:doc NeplanService">NeplanService</a>.
    
    % This file generated by matlab.wsdl.createWSDLClient at 07-Jan-2018 16:39:55
    % from https://demo.neplan.ch/NEPLAN360_Demo/Services/External/NeplanService.svc?singleWsdl.  
    % Please do not alter this file.
    properties 
        PloadFactor
        QloadFactor
        atElementName
        atNodeName
        color
        name
    end
    
    methods
        function obj = ImportFeederItem(PloadFactor,QloadFactor,atElementName,atNodeName,color,name)
            if nargin == 0, return, end
            if nargin > 0
                obj.PloadFactor = PloadFactor;
            end
            if nargin > 1
                obj.QloadFactor = QloadFactor;
            end
            if nargin > 2
                obj.atElementName = atElementName;
            end
            if nargin > 3
                obj.atNodeName = atNodeName;
            end
            if nargin > 4
                obj.color = color;
            end
            if nargin > 5
                obj.name = name;
            end
        end
        function obj = set.PloadFactor(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportFeederItem','PloadFactor'},value,'double',true,false);
            obj.PloadFactor = value;
        end        

        function obj = set.QloadFactor(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportFeederItem','QloadFactor'},value,'double',true,false);
            obj.QloadFactor = value;
        end        

        function obj = set.atElementName(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportFeederItem','atElementName'},value,'string',true,false);
            obj.atElementName = value;
        end        

        function obj = set.atNodeName(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportFeederItem','atNodeName'},value,'string',true,false);
            obj.atNodeName = value;
        end        

        function obj = set.color(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportFeederItem','color'},value,'string',true,false);
            obj.color = value;
        end        

        function obj = set.name(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportFeederItem','name'},value,'string',true,false);
            obj.name = value;
        end
    end

    methods (Hidden, Access = {?matlab.wsdl.internal.WsdlObject,?NeplanService,?matlab.wsdl.internal.WsdlObject,?wsdl.neplanservice.ExternalProject,?wsdl.neplanservice.ArrayOfdouble,?wsdl.neplanservice.LoadData,?wsdl.neplanservice.string,?wsdl.neplanservice.ArrayOfImportElementItem,?wsdl.neplanservice.ArrayOfLoadData,?wsdl.neplanservice.ArrayOfstring,?wsdl.neplanservice.ArrayOfNeplanServiceElementResult,?wsdl.neplanservice.AnalysisParameterSettings,?wsdl.neplanservice.AnalysisReturnInfo,?wsdl.neplanservice.ArrayOfImportFeederItem,?wsdl.neplanservice.base64Binary,?wsdl.neplanservice.ArrayOfKeyValuePairOfstringstring,?wsdl.neplanservice.ArrayOfKeyValuePairOfstringNeplanServiceConnectionInfomHiA0HHi,?wsdl.neplanservice.ArrayOfNeplanServiceLoadGenerationInfo,?wsdl.neplanservice.ArrayOfguid,?wsdl.neplanservice.NeplanDomainServiceImportReturnInfo,?wsdl.neplanservice.ImportElementItem,?wsdl.neplanservice.ArrayOfTechDataValue,?wsdl.neplanservice.WaterLoadData,?wsdl.neplanservice.ArrayOfLineSectionData,?wsdl.neplanservice.TechDataValue,?wsdl.neplanservice.ImportFeederItem,?wsdl.neplanservice.NeplanServiceElementResult,?wsdl.neplanservice.NeplanServiceLoadGenerationInfo,?wsdl.neplanservice.KeyValuePairOfstringstring,?wsdl.neplanservice.KeyValuePairOfstringNeplanServiceConnectionInfomHiA0HHi,?wsdl.neplanservice.NeplanServiceConnectionInfo,?wsdl.neplanservice.LineSectionData,?wsdl.neplanservice.ArrayOfAnalysisReturnInfoCableSizingLineData,?wsdl.neplanservice.ArrayOfAnalysisReturnInfoRelayResultData,?wsdl.neplanservice.AnalysisReturnInfoCableSizingLineData,?wsdl.neplanservice.AnalysisReturnInfoRelayResultData})
        function validate(obj)
        % Test for required fields
            arrayfun(@(x) x.checkFields({},{},{}), obj);
        end
    end

    methods (Hidden, Access = protected)
        function jobj = getOneObj(obj)
        % Return the Java object corresponding to this object.  Intended
        % to be invoked from superclass.
            obj.validate
            import matlab.wsdl.internal.fromMATLAB
            jobj = neplanservice.ImportFeederItem;  % create empty Java object
            % populate fields of object
            jobj.setPloadFactor(fromMATLAB({'ImportFeederItem','PloadFactor'},obj.PloadFactor,'double',true));
            jobj.setQloadFactor(fromMATLAB({'ImportFeederItem','QloadFactor'},obj.QloadFactor,'double',true));
            jobj.setAtElementName(fromMATLAB({'ImportFeederItem','atElementName'},obj.atElementName,'string',true));
            jobj.setAtNodeName(fromMATLAB({'ImportFeederItem','atNodeName'},obj.atNodeName,'string',true));
            jobj.setColor(fromMATLAB({'ImportFeederItem','color'},obj.color,'string',true));
            jobj.setName(fromMATLAB({'ImportFeederItem','name'},obj.name,'string',true));
        end
    end

    methods (Static, Hidden, Access = {?NeplanService,?matlab.wsdl.internal.WsdlObject,?wsdl.neplanservice.ExternalProject,?wsdl.neplanservice.ArrayOfdouble,?wsdl.neplanservice.LoadData,?wsdl.neplanservice.string,?wsdl.neplanservice.ArrayOfImportElementItem,?wsdl.neplanservice.ArrayOfLoadData,?wsdl.neplanservice.ArrayOfstring,?wsdl.neplanservice.ArrayOfNeplanServiceElementResult,?wsdl.neplanservice.AnalysisParameterSettings,?wsdl.neplanservice.AnalysisReturnInfo,?wsdl.neplanservice.ArrayOfImportFeederItem,?wsdl.neplanservice.base64Binary,?wsdl.neplanservice.ArrayOfKeyValuePairOfstringstring,?wsdl.neplanservice.ArrayOfKeyValuePairOfstringNeplanServiceConnectionInfomHiA0HHi,?wsdl.neplanservice.ArrayOfNeplanServiceLoadGenerationInfo,?wsdl.neplanservice.ArrayOfguid,?wsdl.neplanservice.NeplanDomainServiceImportReturnInfo,?wsdl.neplanservice.ImportElementItem,?wsdl.neplanservice.ArrayOfTechDataValue,?wsdl.neplanservice.WaterLoadData,?wsdl.neplanservice.ArrayOfLineSectionData,?wsdl.neplanservice.TechDataValue,?wsdl.neplanservice.ImportFeederItem,?wsdl.neplanservice.NeplanServiceElementResult,?wsdl.neplanservice.NeplanServiceLoadGenerationInfo,?wsdl.neplanservice.KeyValuePairOfstringstring,?wsdl.neplanservice.KeyValuePairOfstringNeplanServiceConnectionInfomHiA0HHi,?wsdl.neplanservice.NeplanServiceConnectionInfo,?wsdl.neplanservice.LineSectionData,?wsdl.neplanservice.ArrayOfAnalysisReturnInfoCableSizingLineData,?wsdl.neplanservice.ArrayOfAnalysisReturnInfoRelayResultData,?wsdl.neplanservice.AnalysisReturnInfoCableSizingLineData,?wsdl.neplanservice.AnalysisReturnInfoRelayResultData})
        function obj = getInstance(jobj, isArray) 
        % Return a ImportFeederItem object constructed from the Java object jobj.
        % If isArray, jobj is java.util.List of objects and we'll return array.
            if nargin == 0 || isempty(jobj)
                obj = [];
                return
            end
            if nargin > 1 && isArray
                for i = jobj.size : -1 : 1
                    value = wsdl.neplanservice.ImportFeederItem.getInstance(jobj.get(i-1));
                    if ~isempty(value) 
                        obj(i,1) = value;
                    end
                end
                if ~exist('obj','var')
                    obj = [];
                end
            else
                import matlab.wsdl.internal.toMATLAB
                obj = wsdl.neplanservice.ImportFeederItem( ...
                    toMATLAB(jobj.getPloadFactor,'double',false), ...
                    toMATLAB(jobj.getQloadFactor,'double',false), ...
                    toMATLAB(jobj.getAtElementName,'string',false), ...
                    toMATLAB(jobj.getAtNodeName,'string',false), ...
                    toMATLAB(jobj.getColor,'string',false), ...
                    toMATLAB(jobj.getName,'string',false));
            end
        end
    end
end

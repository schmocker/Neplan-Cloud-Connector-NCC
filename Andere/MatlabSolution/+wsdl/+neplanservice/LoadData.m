classdef LoadData < matlab.wsdl.internal.WsdlObject
    % LoadData(ConnectionType,LfType,Name,NumCustomers,Phase,ScalingType,Unit,Value1,Value2)  LoadData object for use with <a href="matlab:doc NeplanService">NeplanService</a> web client
    %
    %     ConnectionType - numeric scalar (XML short)
    %     LfType - numeric scalar (XML short)
    %     Name - string
    %     NumCustomers - numeric scalar (XML int)
    %     Phase - numeric scalar (XML short)
    %     ScalingType - string
    %     Unit - numeric scalar (XML short)
    %     Value1 - numeric scalar (XML double)
    %     Value2 - numeric scalar (XML double)
    %
    % To create a LoadData, use <a href="matlab:doc NeplanService.getLoadData">NeplanService.getLoadData</a>.
    %
    %
    % See also <a href="matlab:doc NeplanService">NeplanService</a>.
    
    % This file generated by matlab.wsdl.createWSDLClient at 07-Jan-2018 16:39:55
    % from https://demo.neplan.ch/NEPLAN360_Demo/Services/External/NeplanService.svc?singleWsdl.  
    % Please do not alter this file.
    properties 
        ConnectionType
        LfType
        Name
        NumCustomers
        Phase
        ScalingType
        Unit
        Value1
        Value2
    end
    
    methods
        function obj = LoadData(ConnectionType,LfType,Name,NumCustomers,Phase,ScalingType,Unit,Value1,Value2)
            if nargin == 0, return, end
            if nargin > 0
                obj.ConnectionType = ConnectionType;
            end
            if nargin > 1
                obj.LfType = LfType;
            end
            if nargin > 2
                obj.Name = Name;
            end
            if nargin > 3
                obj.NumCustomers = NumCustomers;
            end
            if nargin > 4
                obj.Phase = Phase;
            end
            if nargin > 5
                obj.ScalingType = ScalingType;
            end
            if nargin > 6
                obj.Unit = Unit;
            end
            if nargin > 7
                obj.Value1 = Value1;
            end
            if nargin > 8
                obj.Value2 = Value2;
            end
        end
        function obj = set.ConnectionType(obj, value)
            matlab.wsdl.internal.fromMATLAB({'LoadData','ConnectionType'},value,'short',true,false);
            obj.ConnectionType = value;
        end        

        function obj = set.LfType(obj, value)
            matlab.wsdl.internal.fromMATLAB({'LoadData','LfType'},value,'short',true,false);
            obj.LfType = value;
        end        

        function obj = set.Name(obj, value)
            matlab.wsdl.internal.fromMATLAB({'LoadData','Name'},value,'string',true,false);
            obj.Name = value;
        end        

        function obj = set.NumCustomers(obj, value)
            matlab.wsdl.internal.fromMATLAB({'LoadData','NumCustomers'},value,'int',true,false);
            obj.NumCustomers = value;
        end        

        function obj = set.Phase(obj, value)
            matlab.wsdl.internal.fromMATLAB({'LoadData','Phase'},value,'short',true,false);
            obj.Phase = value;
        end        

        function obj = set.ScalingType(obj, value)
            matlab.wsdl.internal.fromMATLAB({'LoadData','ScalingType'},value,'string',true,false);
            obj.ScalingType = value;
        end        

        function obj = set.Unit(obj, value)
            matlab.wsdl.internal.fromMATLAB({'LoadData','Unit'},value,'short',true,false);
            obj.Unit = value;
        end        

        function obj = set.Value1(obj, value)
            matlab.wsdl.internal.fromMATLAB({'LoadData','Value1'},value,'double',true,false);
            obj.Value1 = value;
        end        

        function obj = set.Value2(obj, value)
            matlab.wsdl.internal.fromMATLAB({'LoadData','Value2'},value,'double',true,false);
            obj.Value2 = value;
        end
    end

    methods (Hidden, Access = {?matlab.wsdl.internal.WsdlObject,?NeplanService,?matlab.wsdl.internal.WsdlObject,?wsdl.neplanservice.ExternalProject,?wsdl.neplanservice.ArrayOfdouble,?wsdl.neplanservice.LoadData,?wsdl.neplanservice.string,?wsdl.neplanservice.ArrayOfImportElementItem,?wsdl.neplanservice.ArrayOfLoadData,?wsdl.neplanservice.ArrayOfstring,?wsdl.neplanservice.ArrayOfNeplanServiceElementResult,?wsdl.neplanservice.AnalysisParameterSettings,?wsdl.neplanservice.AnalysisReturnInfo,?wsdl.neplanservice.ArrayOfImportFeederItem,?wsdl.neplanservice.base64Binary,?wsdl.neplanservice.ArrayOfKeyValuePairOfstringstring,?wsdl.neplanservice.ArrayOfKeyValuePairOfstringNeplanServiceConnectionInfomHiA0HHi,?wsdl.neplanservice.ArrayOfNeplanServiceLoadGenerationInfo,?wsdl.neplanservice.ArrayOfguid,?wsdl.neplanservice.NeplanDomainServiceImportReturnInfo,?wsdl.neplanservice.ImportElementItem,?wsdl.neplanservice.ArrayOfTechDataValue,?wsdl.neplanservice.WaterLoadData,?wsdl.neplanservice.ArrayOfLineSectionData,?wsdl.neplanservice.TechDataValue,?wsdl.neplanservice.ImportFeederItem,?wsdl.neplanservice.NeplanServiceElementResult,?wsdl.neplanservice.NeplanServiceLoadGenerationInfo,?wsdl.neplanservice.KeyValuePairOfstringstring,?wsdl.neplanservice.KeyValuePairOfstringNeplanServiceConnectionInfomHiA0HHi,?wsdl.neplanservice.NeplanServiceConnectionInfo,?wsdl.neplanservice.LineSectionData,?wsdl.neplanservice.ArrayOfAnalysisReturnInfoCableSizingLineData,?wsdl.neplanservice.ArrayOfAnalysisReturnInfoRelayResultData,?wsdl.neplanservice.AnalysisReturnInfoCableSizingLineData,?wsdl.neplanservice.AnalysisReturnInfoRelayResultData})
        function validate(obj)
        % Test for required fields
            arrayfun(@(x) x.checkFields({},{},{}), obj);
        end
    end

    methods (Hidden, Access = protected)
        function jobj = getOneObj(obj)
        % Return the Java object corresponding to this object.  Intended
        % to be invoked from superclass.
            obj.validate
            import matlab.wsdl.internal.fromMATLAB
            jobj = neplanservice.LoadData;  % create empty Java object
            % populate fields of object
            jobj.setConnectionType(fromMATLAB({'LoadData','ConnectionType'},obj.ConnectionType,'short',true));
            jobj.setLfType(fromMATLAB({'LoadData','LfType'},obj.LfType,'short',true));
            jobj.setName(fromMATLAB({'LoadData','Name'},obj.Name,'string',true));
            jobj.setNumCustomers(fromMATLAB({'LoadData','NumCustomers'},obj.NumCustomers,'int',true));
            jobj.setPhase(fromMATLAB({'LoadData','Phase'},obj.Phase,'short',true));
            jobj.setScalingType(fromMATLAB({'LoadData','ScalingType'},obj.ScalingType,'string',true));
            jobj.setUnit(fromMATLAB({'LoadData','Unit'},obj.Unit,'short',true));
            jobj.setValue1(fromMATLAB({'LoadData','Value1'},obj.Value1,'double',true));
            jobj.setValue2(fromMATLAB({'LoadData','Value2'},obj.Value2,'double',true));
        end
    end

    methods (Static, Hidden, Access = {?NeplanService,?matlab.wsdl.internal.WsdlObject,?wsdl.neplanservice.ExternalProject,?wsdl.neplanservice.ArrayOfdouble,?wsdl.neplanservice.LoadData,?wsdl.neplanservice.string,?wsdl.neplanservice.ArrayOfImportElementItem,?wsdl.neplanservice.ArrayOfLoadData,?wsdl.neplanservice.ArrayOfstring,?wsdl.neplanservice.ArrayOfNeplanServiceElementResult,?wsdl.neplanservice.AnalysisParameterSettings,?wsdl.neplanservice.AnalysisReturnInfo,?wsdl.neplanservice.ArrayOfImportFeederItem,?wsdl.neplanservice.base64Binary,?wsdl.neplanservice.ArrayOfKeyValuePairOfstringstring,?wsdl.neplanservice.ArrayOfKeyValuePairOfstringNeplanServiceConnectionInfomHiA0HHi,?wsdl.neplanservice.ArrayOfNeplanServiceLoadGenerationInfo,?wsdl.neplanservice.ArrayOfguid,?wsdl.neplanservice.NeplanDomainServiceImportReturnInfo,?wsdl.neplanservice.ImportElementItem,?wsdl.neplanservice.ArrayOfTechDataValue,?wsdl.neplanservice.WaterLoadData,?wsdl.neplanservice.ArrayOfLineSectionData,?wsdl.neplanservice.TechDataValue,?wsdl.neplanservice.ImportFeederItem,?wsdl.neplanservice.NeplanServiceElementResult,?wsdl.neplanservice.NeplanServiceLoadGenerationInfo,?wsdl.neplanservice.KeyValuePairOfstringstring,?wsdl.neplanservice.KeyValuePairOfstringNeplanServiceConnectionInfomHiA0HHi,?wsdl.neplanservice.NeplanServiceConnectionInfo,?wsdl.neplanservice.LineSectionData,?wsdl.neplanservice.ArrayOfAnalysisReturnInfoCableSizingLineData,?wsdl.neplanservice.ArrayOfAnalysisReturnInfoRelayResultData,?wsdl.neplanservice.AnalysisReturnInfoCableSizingLineData,?wsdl.neplanservice.AnalysisReturnInfoRelayResultData})
        function obj = getInstance(jobj, isArray) 
        % Return a LoadData object constructed from the Java object jobj.
        % If isArray, jobj is java.util.List of objects and we'll return array.
            if nargin == 0 || isempty(jobj)
                obj = [];
                return
            end
            if nargin > 1 && isArray
                for i = jobj.size : -1 : 1
                    value = wsdl.neplanservice.LoadData.getInstance(jobj.get(i-1));
                    if ~isempty(value) 
                        obj(i,1) = value;
                    end
                end
                if ~exist('obj','var')
                    obj = [];
                end
            else
                import matlab.wsdl.internal.toMATLAB
                obj = wsdl.neplanservice.LoadData( ...
                    toMATLAB(jobj.getConnectionType,'short',false), ...
                    toMATLAB(jobj.getLfType,'short',false), ...
                    toMATLAB(jobj.getName,'string',false), ...
                    toMATLAB(jobj.getNumCustomers,'int',false), ...
                    toMATLAB(jobj.getPhase,'short',false), ...
                    toMATLAB(jobj.getScalingType,'string',false), ...
                    toMATLAB(jobj.getUnit,'short',false), ...
                    toMATLAB(jobj.getValue1,'double',false), ...
                    toMATLAB(jobj.getValue2,'double',false));
            end
        end
    end
end

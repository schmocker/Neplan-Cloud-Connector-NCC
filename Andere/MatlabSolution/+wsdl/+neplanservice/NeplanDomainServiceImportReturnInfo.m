classdef NeplanDomainServiceImportReturnInfo < matlab.wsdl.internal.WsdlObject
    % NeplanDomainServiceImportReturnInfo(LogInfo,ReturnValue,actualCreatedProjectID,variantID)  NeplanDomainServiceImportReturnInfo object for use with <a href="matlab:doc NeplanService">NeplanService</a> web client
    %
    %     LogInfo - <a href="matlab:doc wsdl.neplanservice.ArrayOfstring">ArrayOfstring</a>
    %     ReturnValue - numeric scalar (XML int)
    %     actualCreatedProjectID - string
    %     variantID - string
    %
    % 
    %
    % See also <a href="matlab:doc NeplanService">NeplanService</a>.
    
    % This file generated by matlab.wsdl.createWSDLClient at 07-Jan-2018 16:39:55
    % from https://demo.neplan.ch/NEPLAN360_Demo/Services/External/NeplanService.svc?singleWsdl.  
    % Please do not alter this file.
    properties 
        LogInfo
        ReturnValue
        actualCreatedProjectID
        variantID
    end
    
    methods
        function obj = NeplanDomainServiceImportReturnInfo(LogInfo,ReturnValue,actualCreatedProjectID,variantID)
            if nargin == 0, return, end
            if nargin > 0
                obj.LogInfo = LogInfo;
            end
            if nargin > 1
                obj.ReturnValue = ReturnValue;
            end
            if nargin > 2
                obj.actualCreatedProjectID = actualCreatedProjectID;
            end
            if nargin > 3
                obj.variantID = variantID;
            end
        end
        function obj = set.LogInfo(obj, value)
            if ~isempty(value) && ~isa(value,'wsdl.neplanservice.ArrayOfstring')
                error(message('MATLAB:webservices:VarShouldBeAType','LogInfo', 'wsdl.neplanservice.ArrayOfstring', 'ArrayOfstring'))
            end
            obj.LogInfo = value;
        end        

        function obj = set.ReturnValue(obj, value)
            matlab.wsdl.internal.fromMATLAB({'NeplanDomainServiceImportReturnInfo','ReturnValue'},value,'int',true,false);
            obj.ReturnValue = value;
        end        

        function obj = set.actualCreatedProjectID(obj, value)
            matlab.wsdl.internal.fromMATLAB({'NeplanDomainServiceImportReturnInfo','actualCreatedProjectID'},value,'string',true,false);
            obj.actualCreatedProjectID = value;
        end        

        function obj = set.variantID(obj, value)
            matlab.wsdl.internal.fromMATLAB({'NeplanDomainServiceImportReturnInfo','variantID'},value,'string',true,false);
            obj.variantID = value;
        end
    end

    methods (Hidden, Access = {?matlab.wsdl.internal.WsdlObject,?NeplanService,?matlab.wsdl.internal.WsdlObject,?wsdl.neplanservice.ExternalProject,?wsdl.neplanservice.ArrayOfdouble,?wsdl.neplanservice.LoadData,?wsdl.neplanservice.string,?wsdl.neplanservice.ArrayOfImportElementItem,?wsdl.neplanservice.ArrayOfLoadData,?wsdl.neplanservice.ArrayOfstring,?wsdl.neplanservice.ArrayOfNeplanServiceElementResult,?wsdl.neplanservice.AnalysisParameterSettings,?wsdl.neplanservice.AnalysisReturnInfo,?wsdl.neplanservice.ArrayOfImportFeederItem,?wsdl.neplanservice.base64Binary,?wsdl.neplanservice.ArrayOfKeyValuePairOfstringstring,?wsdl.neplanservice.ArrayOfKeyValuePairOfstringNeplanServiceConnectionInfomHiA0HHi,?wsdl.neplanservice.ArrayOfNeplanServiceLoadGenerationInfo,?wsdl.neplanservice.ArrayOfguid,?wsdl.neplanservice.NeplanDomainServiceImportReturnInfo,?wsdl.neplanservice.ImportElementItem,?wsdl.neplanservice.ArrayOfTechDataValue,?wsdl.neplanservice.WaterLoadData,?wsdl.neplanservice.ArrayOfLineSectionData,?wsdl.neplanservice.TechDataValue,?wsdl.neplanservice.ImportFeederItem,?wsdl.neplanservice.NeplanServiceElementResult,?wsdl.neplanservice.NeplanServiceLoadGenerationInfo,?wsdl.neplanservice.KeyValuePairOfstringstring,?wsdl.neplanservice.KeyValuePairOfstringNeplanServiceConnectionInfomHiA0HHi,?wsdl.neplanservice.NeplanServiceConnectionInfo,?wsdl.neplanservice.LineSectionData,?wsdl.neplanservice.ArrayOfAnalysisReturnInfoCableSizingLineData,?wsdl.neplanservice.ArrayOfAnalysisReturnInfoRelayResultData,?wsdl.neplanservice.AnalysisReturnInfoCableSizingLineData,?wsdl.neplanservice.AnalysisReturnInfoRelayResultData})
        function validate(obj)
        % Test for required fields
            arrayfun(@(x) x.checkFields({},{},{x.LogInfo}), obj);
        end
    end

    methods (Hidden, Access = protected)
        function jobj = getOneObj(obj)
        % Return the Java object corresponding to this object.  Intended
        % to be invoked from superclass.
            obj.validate
            import matlab.wsdl.internal.fromMATLAB
            jobj = neplanservice.NeplanDomainServiceImportReturnInfo;  % create empty Java object
            % populate fields of object
            if ~isempty(obj.LogInfo)
                jobj.setLogInfo(obj.LogInfo.getObj);
            end
            jobj.setReturnValue(fromMATLAB({'NeplanDomainServiceImportReturnInfo','ReturnValue'},obj.ReturnValue,'int',true));
            jobj.setActualCreatedProjectID(fromMATLAB({'NeplanDomainServiceImportReturnInfo','actualCreatedProjectID'},obj.actualCreatedProjectID,'string',true));
            jobj.setVariantID(fromMATLAB({'NeplanDomainServiceImportReturnInfo','variantID'},obj.variantID,'string',true));
        end
    end

    methods (Static, Hidden, Access = {?NeplanService,?matlab.wsdl.internal.WsdlObject,?wsdl.neplanservice.ExternalProject,?wsdl.neplanservice.ArrayOfdouble,?wsdl.neplanservice.LoadData,?wsdl.neplanservice.string,?wsdl.neplanservice.ArrayOfImportElementItem,?wsdl.neplanservice.ArrayOfLoadData,?wsdl.neplanservice.ArrayOfstring,?wsdl.neplanservice.ArrayOfNeplanServiceElementResult,?wsdl.neplanservice.AnalysisParameterSettings,?wsdl.neplanservice.AnalysisReturnInfo,?wsdl.neplanservice.ArrayOfImportFeederItem,?wsdl.neplanservice.base64Binary,?wsdl.neplanservice.ArrayOfKeyValuePairOfstringstring,?wsdl.neplanservice.ArrayOfKeyValuePairOfstringNeplanServiceConnectionInfomHiA0HHi,?wsdl.neplanservice.ArrayOfNeplanServiceLoadGenerationInfo,?wsdl.neplanservice.ArrayOfguid,?wsdl.neplanservice.NeplanDomainServiceImportReturnInfo,?wsdl.neplanservice.ImportElementItem,?wsdl.neplanservice.ArrayOfTechDataValue,?wsdl.neplanservice.WaterLoadData,?wsdl.neplanservice.ArrayOfLineSectionData,?wsdl.neplanservice.TechDataValue,?wsdl.neplanservice.ImportFeederItem,?wsdl.neplanservice.NeplanServiceElementResult,?wsdl.neplanservice.NeplanServiceLoadGenerationInfo,?wsdl.neplanservice.KeyValuePairOfstringstring,?wsdl.neplanservice.KeyValuePairOfstringNeplanServiceConnectionInfomHiA0HHi,?wsdl.neplanservice.NeplanServiceConnectionInfo,?wsdl.neplanservice.LineSectionData,?wsdl.neplanservice.ArrayOfAnalysisReturnInfoCableSizingLineData,?wsdl.neplanservice.ArrayOfAnalysisReturnInfoRelayResultData,?wsdl.neplanservice.AnalysisReturnInfoCableSizingLineData,?wsdl.neplanservice.AnalysisReturnInfoRelayResultData})
        function obj = getInstance(jobj, isArray) 
        % Return a NeplanDomainServiceImportReturnInfo object constructed from the Java object jobj.
        % If isArray, jobj is java.util.List of objects and we'll return array.
            if nargin == 0 || isempty(jobj)
                obj = [];
                return
            end
            if nargin > 1 && isArray
                for i = jobj.size : -1 : 1
                    value = wsdl.neplanservice.NeplanDomainServiceImportReturnInfo.getInstance(jobj.get(i-1));
                    if ~isempty(value) 
                        obj(i,1) = value;
                    end
                end
                if ~exist('obj','var')
                    obj = [];
                end
            else
                import matlab.wsdl.internal.toMATLAB
                obj = wsdl.neplanservice.NeplanDomainServiceImportReturnInfo( ...
                    wsdl.neplanservice.ArrayOfstring.getInstance(jobj.getLogInfo,false), ...
                    toMATLAB(jobj.getReturnValue,'int',false), ...
                    toMATLAB(jobj.getActualCreatedProjectID,'string',false), ...
                    toMATLAB(jobj.getVariantID,'string',false));
            end
        end
    end
end

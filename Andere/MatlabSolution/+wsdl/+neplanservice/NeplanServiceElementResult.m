classdef NeplanServiceElementResult < matlab.wsdl.internal.WsdlObject
    % NeplanServiceElementResult(ElementID,Name,XMLdata,portNr)  NeplanServiceElementResult object for use with <a href="matlab:doc NeplanService">NeplanService</a> web client
    %
    %     ElementID - string
    %     Name - string
    %     XMLdata - string
    %     portNr - numeric scalar (XML short)
    %
    % 
    %
    % See also <a href="matlab:doc NeplanService">NeplanService</a>.
    
    % This file generated by matlab.wsdl.createWSDLClient at 07-Jan-2018 16:39:55
    % from https://demo.neplan.ch/NEPLAN360_Demo/Services/External/NeplanService.svc?singleWsdl.  
    % Please do not alter this file.
    properties 
        ElementID
        Name
        XMLdata
        portNr
    end
    
    methods
        function obj = NeplanServiceElementResult(ElementID,Name,XMLdata,portNr)
            if nargin == 0, return, end
            if nargin > 0
                obj.ElementID = ElementID;
            end
            if nargin > 1
                obj.Name = Name;
            end
            if nargin > 2
                obj.XMLdata = XMLdata;
            end
            if nargin > 3
                obj.portNr = portNr;
            end
        end
        function obj = set.ElementID(obj, value)
            matlab.wsdl.internal.fromMATLAB({'NeplanServiceElementResult','ElementID'},value,'string',true,false);
            obj.ElementID = value;
        end        

        function obj = set.Name(obj, value)
            matlab.wsdl.internal.fromMATLAB({'NeplanServiceElementResult','Name'},value,'string',true,false);
            obj.Name = value;
        end        

        function obj = set.XMLdata(obj, value)
            matlab.wsdl.internal.fromMATLAB({'NeplanServiceElementResult','XMLdata'},value,'string',true,false);
            obj.XMLdata = value;
        end        

        function obj = set.portNr(obj, value)
            matlab.wsdl.internal.fromMATLAB({'NeplanServiceElementResult','portNr'},value,'short',true,false);
            obj.portNr = value;
        end
    end

    methods (Hidden, Access = {?matlab.wsdl.internal.WsdlObject,?NeplanService,?matlab.wsdl.internal.WsdlObject,?wsdl.neplanservice.ExternalProject,?wsdl.neplanservice.ArrayOfdouble,?wsdl.neplanservice.LoadData,?wsdl.neplanservice.string,?wsdl.neplanservice.ArrayOfImportElementItem,?wsdl.neplanservice.ArrayOfLoadData,?wsdl.neplanservice.ArrayOfstring,?wsdl.neplanservice.ArrayOfNeplanServiceElementResult,?wsdl.neplanservice.AnalysisParameterSettings,?wsdl.neplanservice.AnalysisReturnInfo,?wsdl.neplanservice.ArrayOfImportFeederItem,?wsdl.neplanservice.base64Binary,?wsdl.neplanservice.ArrayOfKeyValuePairOfstringstring,?wsdl.neplanservice.ArrayOfKeyValuePairOfstringNeplanServiceConnectionInfomHiA0HHi,?wsdl.neplanservice.ArrayOfNeplanServiceLoadGenerationInfo,?wsdl.neplanservice.ArrayOfguid,?wsdl.neplanservice.NeplanDomainServiceImportReturnInfo,?wsdl.neplanservice.ImportElementItem,?wsdl.neplanservice.ArrayOfTechDataValue,?wsdl.neplanservice.WaterLoadData,?wsdl.neplanservice.ArrayOfLineSectionData,?wsdl.neplanservice.TechDataValue,?wsdl.neplanservice.ImportFeederItem,?wsdl.neplanservice.NeplanServiceElementResult,?wsdl.neplanservice.NeplanServiceLoadGenerationInfo,?wsdl.neplanservice.KeyValuePairOfstringstring,?wsdl.neplanservice.KeyValuePairOfstringNeplanServiceConnectionInfomHiA0HHi,?wsdl.neplanservice.NeplanServiceConnectionInfo,?wsdl.neplanservice.LineSectionData,?wsdl.neplanservice.ArrayOfAnalysisReturnInfoCableSizingLineData,?wsdl.neplanservice.ArrayOfAnalysisReturnInfoRelayResultData,?wsdl.neplanservice.AnalysisReturnInfoCableSizingLineData,?wsdl.neplanservice.AnalysisReturnInfoRelayResultData})
        function validate(obj)
        % Test for required fields
            arrayfun(@(x) x.checkFields({},{},{}), obj);
        end
    end

    methods (Hidden, Access = protected)
        function jobj = getOneObj(obj)
        % Return the Java object corresponding to this object.  Intended
        % to be invoked from superclass.
            obj.validate
            import matlab.wsdl.internal.fromMATLAB
            jobj = neplanservice.NeplanServiceElementResult;  % create empty Java object
            % populate fields of object
            jobj.setElementID(fromMATLAB({'NeplanServiceElementResult','ElementID'},obj.ElementID,'string',true));
            jobj.setName(fromMATLAB({'NeplanServiceElementResult','Name'},obj.Name,'string',true));
            jobj.setXMLdata(fromMATLAB({'NeplanServiceElementResult','XMLdata'},obj.XMLdata,'string',true));
            jobj.setPortNr(fromMATLAB({'NeplanServiceElementResult','portNr'},obj.portNr,'short',true));
        end
    end

    methods (Static, Hidden, Access = {?NeplanService,?matlab.wsdl.internal.WsdlObject,?wsdl.neplanservice.ExternalProject,?wsdl.neplanservice.ArrayOfdouble,?wsdl.neplanservice.LoadData,?wsdl.neplanservice.string,?wsdl.neplanservice.ArrayOfImportElementItem,?wsdl.neplanservice.ArrayOfLoadData,?wsdl.neplanservice.ArrayOfstring,?wsdl.neplanservice.ArrayOfNeplanServiceElementResult,?wsdl.neplanservice.AnalysisParameterSettings,?wsdl.neplanservice.AnalysisReturnInfo,?wsdl.neplanservice.ArrayOfImportFeederItem,?wsdl.neplanservice.base64Binary,?wsdl.neplanservice.ArrayOfKeyValuePairOfstringstring,?wsdl.neplanservice.ArrayOfKeyValuePairOfstringNeplanServiceConnectionInfomHiA0HHi,?wsdl.neplanservice.ArrayOfNeplanServiceLoadGenerationInfo,?wsdl.neplanservice.ArrayOfguid,?wsdl.neplanservice.NeplanDomainServiceImportReturnInfo,?wsdl.neplanservice.ImportElementItem,?wsdl.neplanservice.ArrayOfTechDataValue,?wsdl.neplanservice.WaterLoadData,?wsdl.neplanservice.ArrayOfLineSectionData,?wsdl.neplanservice.TechDataValue,?wsdl.neplanservice.ImportFeederItem,?wsdl.neplanservice.NeplanServiceElementResult,?wsdl.neplanservice.NeplanServiceLoadGenerationInfo,?wsdl.neplanservice.KeyValuePairOfstringstring,?wsdl.neplanservice.KeyValuePairOfstringNeplanServiceConnectionInfomHiA0HHi,?wsdl.neplanservice.NeplanServiceConnectionInfo,?wsdl.neplanservice.LineSectionData,?wsdl.neplanservice.ArrayOfAnalysisReturnInfoCableSizingLineData,?wsdl.neplanservice.ArrayOfAnalysisReturnInfoRelayResultData,?wsdl.neplanservice.AnalysisReturnInfoCableSizingLineData,?wsdl.neplanservice.AnalysisReturnInfoRelayResultData})
        function obj = getInstance(jobj, isArray) 
        % Return a NeplanServiceElementResult object constructed from the Java object jobj.
        % If isArray, jobj is java.util.List of objects and we'll return array.
            if nargin == 0 || isempty(jobj)
                obj = [];
                return
            end
            if nargin > 1 && isArray
                for i = jobj.size : -1 : 1
                    value = wsdl.neplanservice.NeplanServiceElementResult.getInstance(jobj.get(i-1));
                    if ~isempty(value) 
                        obj(i,1) = value;
                    end
                end
                if ~exist('obj','var')
                    obj = [];
                end
            else
                import matlab.wsdl.internal.toMATLAB
                obj = wsdl.neplanservice.NeplanServiceElementResult( ...
                    toMATLAB(jobj.getElementID,'string',false), ...
                    toMATLAB(jobj.getName,'string',false), ...
                    toMATLAB(jobj.getXMLdata,'string',false), ...
                    toMATLAB(jobj.getPortNr,'short',false));
            end
        end
    end
end

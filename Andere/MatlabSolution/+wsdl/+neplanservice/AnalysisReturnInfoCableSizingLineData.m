classdef AnalysisReturnInfoCableSizingLineData < matlab.wsdl.internal.WsdlObject
    % AnalysisReturnInfoCableSizingLineData(BinaryData,LibType,LineID)  AnalysisReturnInfoCableSizingLineData object for use with <a href="matlab:doc NeplanService">NeplanService</a> web client
    %
    %     BinaryData - vector of numbers 0-255 (XML base64Binary)
    %     LibType - string
    %     LineID - string
    %
    % To create a AnalysisReturnInfoCableSizingLineData, use <a href="matlab:doc NeplanService.getAnalysisReturnInfoCableSizingLineData">NeplanService.getAnalysisReturnInfoCableSizingLineData</a>.
    %
    %
    % See also <a href="matlab:doc NeplanService">NeplanService</a>.
    
    % This file generated by matlab.wsdl.createWSDLClient at 07-Jan-2018 16:39:55
    % from https://demo.neplan.ch/NEPLAN360_Demo/Services/External/NeplanService.svc?singleWsdl.  
    % Please do not alter this file.
    properties 
        BinaryData
        LibType
        LineID
    end
    
    methods
        function obj = AnalysisReturnInfoCableSizingLineData(BinaryData,LibType,LineID)
            if nargin == 0, return, end
            if nargin > 0
                obj.BinaryData = BinaryData;
            end
            if nargin > 1
                obj.LibType = LibType;
            end
            if nargin > 2
                obj.LineID = LineID;
            end
        end
        function obj = set.BinaryData(obj, value)
            matlab.wsdl.internal.fromMATLAB({'AnalysisReturnInfoCableSizingLineData','BinaryData'},value,'base64Binary',true,false);
            obj.BinaryData = value;
        end        

        function obj = set.LibType(obj, value)
            matlab.wsdl.internal.fromMATLAB({'AnalysisReturnInfoCableSizingLineData','LibType'},value,'string',true,false);
            obj.LibType = value;
        end        

        function obj = set.LineID(obj, value)
            matlab.wsdl.internal.fromMATLAB({'AnalysisReturnInfoCableSizingLineData','LineID'},value,'string',true,false);
            obj.LineID = value;
        end
    end

    methods (Hidden, Access = {?matlab.wsdl.internal.WsdlObject,?NeplanService,?matlab.wsdl.internal.WsdlObject,?wsdl.neplanservice.ExternalProject,?wsdl.neplanservice.ArrayOfdouble,?wsdl.neplanservice.LoadData,?wsdl.neplanservice.string,?wsdl.neplanservice.ArrayOfImportElementItem,?wsdl.neplanservice.ArrayOfLoadData,?wsdl.neplanservice.ArrayOfstring,?wsdl.neplanservice.ArrayOfNeplanServiceElementResult,?wsdl.neplanservice.AnalysisParameterSettings,?wsdl.neplanservice.AnalysisReturnInfo,?wsdl.neplanservice.ArrayOfImportFeederItem,?wsdl.neplanservice.base64Binary,?wsdl.neplanservice.ArrayOfKeyValuePairOfstringstring,?wsdl.neplanservice.ArrayOfKeyValuePairOfstringNeplanServiceConnectionInfomHiA0HHi,?wsdl.neplanservice.ArrayOfNeplanServiceLoadGenerationInfo,?wsdl.neplanservice.ArrayOfguid,?wsdl.neplanservice.NeplanDomainServiceImportReturnInfo,?wsdl.neplanservice.ImportElementItem,?wsdl.neplanservice.ArrayOfTechDataValue,?wsdl.neplanservice.WaterLoadData,?wsdl.neplanservice.ArrayOfLineSectionData,?wsdl.neplanservice.TechDataValue,?wsdl.neplanservice.ImportFeederItem,?wsdl.neplanservice.NeplanServiceElementResult,?wsdl.neplanservice.NeplanServiceLoadGenerationInfo,?wsdl.neplanservice.KeyValuePairOfstringstring,?wsdl.neplanservice.KeyValuePairOfstringNeplanServiceConnectionInfomHiA0HHi,?wsdl.neplanservice.NeplanServiceConnectionInfo,?wsdl.neplanservice.LineSectionData,?wsdl.neplanservice.ArrayOfAnalysisReturnInfoCableSizingLineData,?wsdl.neplanservice.ArrayOfAnalysisReturnInfoRelayResultData,?wsdl.neplanservice.AnalysisReturnInfoCableSizingLineData,?wsdl.neplanservice.AnalysisReturnInfoRelayResultData})
        function validate(obj)
        % Test for required fields
            arrayfun(@(x) x.checkFields({},{},{}), obj);
        end
    end

    methods (Hidden, Access = protected)
        function jobj = getOneObj(obj)
        % Return the Java object corresponding to this object.  Intended
        % to be invoked from superclass.
            obj.validate
            import matlab.wsdl.internal.fromMATLAB
            jobj = neplanservice.AnalysisReturnInfoCableSizingLineData;  % create empty Java object
            % populate fields of object
            jobj.setBinaryData(fromMATLAB({'AnalysisReturnInfoCableSizingLineData','BinaryData'},obj.BinaryData,'base64Binary',true));
            jobj.setLibType(fromMATLAB({'AnalysisReturnInfoCableSizingLineData','LibType'},obj.LibType,'string',true));
            jobj.setLineID(fromMATLAB({'AnalysisReturnInfoCableSizingLineData','LineID'},obj.LineID,'string',true));
        end
    end

    methods (Static, Hidden, Access = {?NeplanService,?matlab.wsdl.internal.WsdlObject,?wsdl.neplanservice.ExternalProject,?wsdl.neplanservice.ArrayOfdouble,?wsdl.neplanservice.LoadData,?wsdl.neplanservice.string,?wsdl.neplanservice.ArrayOfImportElementItem,?wsdl.neplanservice.ArrayOfLoadData,?wsdl.neplanservice.ArrayOfstring,?wsdl.neplanservice.ArrayOfNeplanServiceElementResult,?wsdl.neplanservice.AnalysisParameterSettings,?wsdl.neplanservice.AnalysisReturnInfo,?wsdl.neplanservice.ArrayOfImportFeederItem,?wsdl.neplanservice.base64Binary,?wsdl.neplanservice.ArrayOfKeyValuePairOfstringstring,?wsdl.neplanservice.ArrayOfKeyValuePairOfstringNeplanServiceConnectionInfomHiA0HHi,?wsdl.neplanservice.ArrayOfNeplanServiceLoadGenerationInfo,?wsdl.neplanservice.ArrayOfguid,?wsdl.neplanservice.NeplanDomainServiceImportReturnInfo,?wsdl.neplanservice.ImportElementItem,?wsdl.neplanservice.ArrayOfTechDataValue,?wsdl.neplanservice.WaterLoadData,?wsdl.neplanservice.ArrayOfLineSectionData,?wsdl.neplanservice.TechDataValue,?wsdl.neplanservice.ImportFeederItem,?wsdl.neplanservice.NeplanServiceElementResult,?wsdl.neplanservice.NeplanServiceLoadGenerationInfo,?wsdl.neplanservice.KeyValuePairOfstringstring,?wsdl.neplanservice.KeyValuePairOfstringNeplanServiceConnectionInfomHiA0HHi,?wsdl.neplanservice.NeplanServiceConnectionInfo,?wsdl.neplanservice.LineSectionData,?wsdl.neplanservice.ArrayOfAnalysisReturnInfoCableSizingLineData,?wsdl.neplanservice.ArrayOfAnalysisReturnInfoRelayResultData,?wsdl.neplanservice.AnalysisReturnInfoCableSizingLineData,?wsdl.neplanservice.AnalysisReturnInfoRelayResultData})
        function obj = getInstance(jobj, isArray) 
        % Return a AnalysisReturnInfoCableSizingLineData object constructed from the Java object jobj.
        % If isArray, jobj is java.util.List of objects and we'll return array.
            if nargin == 0 || isempty(jobj)
                obj = [];
                return
            end
            if nargin > 1 && isArray
                for i = jobj.size : -1 : 1
                    value = wsdl.neplanservice.AnalysisReturnInfoCableSizingLineData.getInstance(jobj.get(i-1));
                    if ~isempty(value) 
                        obj(i,1) = value;
                    end
                end
                if ~exist('obj','var')
                    obj = [];
                end
            else
                import matlab.wsdl.internal.toMATLAB
                obj = wsdl.neplanservice.AnalysisReturnInfoCableSizingLineData( ...
                    toMATLAB(jobj.getBinaryData,'base64Binary',false), ...
                    toMATLAB(jobj.getLibType,'string',false), ...
                    toMATLAB(jobj.getLineID,'string',false));
            end
        end
    end
end

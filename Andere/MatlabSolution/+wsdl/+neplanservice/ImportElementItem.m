classdef ImportElementItem < matlab.wsdl.internal.WsdlObject
    % ImportElementItem(AreaName,Bay,BayesInStation,CableOrOHL,CoordinatesLabel1,CoordinatesLabel2,CoordinatesLabel3,CoordinatesLabel4,CoordinatesLink1,CoordinatesLink2,CoordinatesLink3,CoordinatesSymbol,Diameter,ElementInfo,Elevation,InstallationYear,IsForwardNetwork,IsInMaintenance,IsProjected,Layout,Load,LogicalSwitch,Material,NodeName1,NodeName2,NodeName3,NodeName4,OnGraphicLayer,OnPortNr,SubAreaName,Substation,SymbolAngle,SymbolName,SymbolSize,TechDataValues,Type,WaterLoadData,ZOrderNum,ZoneName,aliasName1,aliasName2,binaryData,description,elementType,length,libraryName,librarySubname,libraryType,librayType,listLineSections,listSubLoads,name,numConnections,phase,remove,un,xmlData,xmlInvest,xmlItemList,yLocation)  ImportElementItem object for use with <a href="matlab:doc NeplanService">NeplanService</a> web client
    %
    %     AreaName - string
    %     Bay - string
    %     BayesInStation - <a href="matlab:doc wsdl.neplanservice.ArrayOfstring">ArrayOfstring</a>
    %     CableOrOHL - numeric scalar (XML short)
    %     CoordinatesLabel1 - <a href="matlab:doc wsdl.neplanservice.ArrayOfdouble">ArrayOfdouble</a>
    %     CoordinatesLabel2 - <a href="matlab:doc wsdl.neplanservice.ArrayOfdouble">ArrayOfdouble</a>
    %     CoordinatesLabel3 - <a href="matlab:doc wsdl.neplanservice.ArrayOfdouble">ArrayOfdouble</a>
    %     CoordinatesLabel4 - <a href="matlab:doc wsdl.neplanservice.ArrayOfdouble">ArrayOfdouble</a>
    %     CoordinatesLink1 - <a href="matlab:doc wsdl.neplanservice.ArrayOfdouble">ArrayOfdouble</a>
    %     CoordinatesLink2 - <a href="matlab:doc wsdl.neplanservice.ArrayOfdouble">ArrayOfdouble</a>
    %     CoordinatesLink3 - <a href="matlab:doc wsdl.neplanservice.ArrayOfdouble">ArrayOfdouble</a>
    %     CoordinatesSymbol - <a href="matlab:doc wsdl.neplanservice.ArrayOfdouble">ArrayOfdouble</a>
    %     Diameter - numeric scalar (XML double)
    %     ElementInfo - string
    %     Elevation - numeric scalar (XML double)
    %     InstallationYear - numeric scalar (XML int)
    %     IsForwardNetwork - logical or numeric scalar (XML boolean)
    %     IsInMaintenance - logical or numeric scalar (XML boolean)
    %     IsProjected - logical or numeric scalar (XML boolean)
    %     Layout - numeric scalar (XML short)
    %     Load - <a href="matlab:doc wsdl.neplanservice.LoadData">LoadData</a>
    %     LogicalSwitch - numeric scalar (XML int)
    %     Material - numeric scalar (XML short)
    %     NodeName1 - string
    %     NodeName2 - string
    %     NodeName3 - string
    %     NodeName4 - string
    %     OnGraphicLayer - string
    %     OnPortNr - numeric scalar (XML short)
    %     SubAreaName - string
    %     Substation - string
    %     SymbolAngle - numeric scalar (XML double)
    %     SymbolName - string
    %     SymbolSize - numeric scalar (XML double)
    %     TechDataValues - <a href="matlab:doc wsdl.neplanservice.ArrayOfTechDataValue">ArrayOfTechDataValue</a>
    %     Type - numeric scalar (XML short)
    %     WaterLoadData - <a href="matlab:doc wsdl.neplanservice.WaterLoadData">WaterLoadData</a>
    %     ZOrderNum - numeric scalar (XML int)
    %     ZoneName - string
    %     aliasName1 - string
    %     aliasName2 - string
    %     binaryData - vector of numbers 0-255 (XML base64Binary)
    %     description - string
    %     elementType - string
    %     length - numeric scalar (XML double)
    %     libraryName - string
    %     librarySubname - string
    %     libraryType - string
    %     librayType - string
    %     listLineSections - <a href="matlab:doc wsdl.neplanservice.ArrayOfLineSectionData">ArrayOfLineSectionData</a>
    %     listSubLoads - <a href="matlab:doc wsdl.neplanservice.ArrayOfLoadData">ArrayOfLoadData</a>
    %     name - string
    %     numConnections - numeric scalar (XML short)
    %     phase - numeric scalar (XML short)
    %     remove - logical or numeric scalar (XML boolean)
    %     un - numeric scalar (XML double)
    %     xmlData - string
    %     xmlInvest - string
    %     xmlItemList - string
    %     yLocation - numeric scalar (XML float)
    %
    % To create a ImportElementItem, use <a href="matlab:doc NeplanService.getImportElementItem">NeplanService.getImportElementItem</a>.
    %
    %
    % See also <a href="matlab:doc NeplanService">NeplanService</a>.
    
    % This file generated by matlab.wsdl.createWSDLClient at 07-Jan-2018 16:39:55
    % from https://demo.neplan.ch/NEPLAN360_Demo/Services/External/NeplanService.svc?singleWsdl.  
    % Please do not alter this file.
    properties 
        AreaName
        Bay
        BayesInStation
        CableOrOHL
        CoordinatesLabel1
        CoordinatesLabel2
        CoordinatesLabel3
        CoordinatesLabel4
        CoordinatesLink1
        CoordinatesLink2
        CoordinatesLink3
        CoordinatesSymbol
        Diameter
        ElementInfo
        Elevation
        InstallationYear
        IsForwardNetwork
        IsInMaintenance
        IsProjected
        Layout
        Load
        LogicalSwitch
        Material
        NodeName1
        NodeName2
        NodeName3
        NodeName4
        OnGraphicLayer
        OnPortNr
        SubAreaName
        Substation
        SymbolAngle
        SymbolName
        SymbolSize
        TechDataValues
        Type
        WaterLoadData
        ZOrderNum
        ZoneName
        aliasName1
        aliasName2
        binaryData
        description
        elementType
        length
        libraryName
        librarySubname
        libraryType
        librayType
        listLineSections
        listSubLoads
        name
        numConnections
        phase
        remove
        un
        xmlData
        xmlInvest
        xmlItemList
        yLocation
    end
    
    methods
        function obj = ImportElementItem(AreaName,Bay,BayesInStation,CableOrOHL,CoordinatesLabel1,CoordinatesLabel2,CoordinatesLabel3,CoordinatesLabel4,CoordinatesLink1,CoordinatesLink2,CoordinatesLink3,CoordinatesSymbol,Diameter,ElementInfo,Elevation,InstallationYear,IsForwardNetwork,IsInMaintenance,IsProjected,Layout,Load,LogicalSwitch,Material,NodeName1,NodeName2,NodeName3,NodeName4,OnGraphicLayer,OnPortNr,SubAreaName,Substation,SymbolAngle,SymbolName,SymbolSize,TechDataValues,Type,WaterLoadData,ZOrderNum,ZoneName,aliasName1,aliasName2,binaryData,description,elementType,length,libraryName,librarySubname,libraryType,librayType,listLineSections,listSubLoads,name,numConnections,phase,remove,un,xmlData,xmlInvest,xmlItemList,yLocation)
            if nargin == 0, return, end
            if nargin > 0
                obj.AreaName = AreaName;
            end
            if nargin > 1
                obj.Bay = Bay;
            end
            if nargin > 2
                obj.BayesInStation = BayesInStation;
            end
            if nargin > 3
                obj.CableOrOHL = CableOrOHL;
            end
            if nargin > 4
                obj.CoordinatesLabel1 = CoordinatesLabel1;
            end
            if nargin > 5
                obj.CoordinatesLabel2 = CoordinatesLabel2;
            end
            if nargin > 6
                obj.CoordinatesLabel3 = CoordinatesLabel3;
            end
            if nargin > 7
                obj.CoordinatesLabel4 = CoordinatesLabel4;
            end
            if nargin > 8
                obj.CoordinatesLink1 = CoordinatesLink1;
            end
            if nargin > 9
                obj.CoordinatesLink2 = CoordinatesLink2;
            end
            if nargin > 10
                obj.CoordinatesLink3 = CoordinatesLink3;
            end
            if nargin > 11
                obj.CoordinatesSymbol = CoordinatesSymbol;
            end
            if nargin > 12
                obj.Diameter = Diameter;
            end
            if nargin > 13
                obj.ElementInfo = ElementInfo;
            end
            if nargin > 14
                obj.Elevation = Elevation;
            end
            if nargin > 15
                obj.InstallationYear = InstallationYear;
            end
            if nargin > 16
                obj.IsForwardNetwork = IsForwardNetwork;
            end
            if nargin > 17
                obj.IsInMaintenance = IsInMaintenance;
            end
            if nargin > 18
                obj.IsProjected = IsProjected;
            end
            if nargin > 19
                obj.Layout = Layout;
            end
            if nargin > 20
                obj.Load = Load;
            end
            if nargin > 21
                obj.LogicalSwitch = LogicalSwitch;
            end
            if nargin > 22
                obj.Material = Material;
            end
            if nargin > 23
                obj.NodeName1 = NodeName1;
            end
            if nargin > 24
                obj.NodeName2 = NodeName2;
            end
            if nargin > 25
                obj.NodeName3 = NodeName3;
            end
            if nargin > 26
                obj.NodeName4 = NodeName4;
            end
            if nargin > 27
                obj.OnGraphicLayer = OnGraphicLayer;
            end
            if nargin > 28
                obj.OnPortNr = OnPortNr;
            end
            if nargin > 29
                obj.SubAreaName = SubAreaName;
            end
            if nargin > 30
                obj.Substation = Substation;
            end
            if nargin > 31
                obj.SymbolAngle = SymbolAngle;
            end
            if nargin > 32
                obj.SymbolName = SymbolName;
            end
            if nargin > 33
                obj.SymbolSize = SymbolSize;
            end
            if nargin > 34
                obj.TechDataValues = TechDataValues;
            end
            if nargin > 35
                obj.Type = Type;
            end
            if nargin > 36
                obj.WaterLoadData = WaterLoadData;
            end
            if nargin > 37
                obj.ZOrderNum = ZOrderNum;
            end
            if nargin > 38
                obj.ZoneName = ZoneName;
            end
            if nargin > 39
                obj.aliasName1 = aliasName1;
            end
            if nargin > 40
                obj.aliasName2 = aliasName2;
            end
            if nargin > 41
                obj.binaryData = binaryData;
            end
            if nargin > 42
                obj.description = description;
            end
            if nargin > 43
                obj.elementType = elementType;
            end
            if nargin > 44
                obj.length = length;
            end
            if nargin > 45
                obj.libraryName = libraryName;
            end
            if nargin > 46
                obj.librarySubname = librarySubname;
            end
            if nargin > 47
                obj.libraryType = libraryType;
            end
            if nargin > 48
                obj.librayType = librayType;
            end
            if nargin > 49
                obj.listLineSections = listLineSections;
            end
            if nargin > 50
                obj.listSubLoads = listSubLoads;
            end
            if nargin > 51
                obj.name = name;
            end
            if nargin > 52
                obj.numConnections = numConnections;
            end
            if nargin > 53
                obj.phase = phase;
            end
            if nargin > 54
                obj.remove = remove;
            end
            if nargin > 55
                obj.un = un;
            end
            if nargin > 56
                obj.xmlData = xmlData;
            end
            if nargin > 57
                obj.xmlInvest = xmlInvest;
            end
            if nargin > 58
                obj.xmlItemList = xmlItemList;
            end
            if nargin > 59
                obj.yLocation = yLocation;
            end
        end
        function obj = set.AreaName(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','AreaName'},value,'string',true,false);
            obj.AreaName = value;
        end        

        function obj = set.Bay(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','Bay'},value,'string',true,false);
            obj.Bay = value;
        end        

        function obj = set.BayesInStation(obj, value)
            if ~isempty(value) && ~isa(value,'wsdl.neplanservice.ArrayOfstring')
                error(message('MATLAB:webservices:VarShouldBeAType','BayesInStation', 'wsdl.neplanservice.ArrayOfstring', 'ArrayOfstring'))
            end
            obj.BayesInStation = value;
        end        

        function obj = set.CableOrOHL(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','CableOrOHL'},value,'short',true,false);
            obj.CableOrOHL = value;
        end        

        function obj = set.CoordinatesLabel1(obj, value)
            if ~isempty(value) && ~isa(value,'wsdl.neplanservice.ArrayOfdouble')
                error(message('MATLAB:webservices:VarShouldBeAType','CoordinatesLabel1', 'wsdl.neplanservice.ArrayOfdouble', 'ArrayOfdouble'))
            end
            obj.CoordinatesLabel1 = value;
        end        

        function obj = set.CoordinatesLabel2(obj, value)
            if ~isempty(value) && ~isa(value,'wsdl.neplanservice.ArrayOfdouble')
                error(message('MATLAB:webservices:VarShouldBeAType','CoordinatesLabel2', 'wsdl.neplanservice.ArrayOfdouble', 'ArrayOfdouble'))
            end
            obj.CoordinatesLabel2 = value;
        end        

        function obj = set.CoordinatesLabel3(obj, value)
            if ~isempty(value) && ~isa(value,'wsdl.neplanservice.ArrayOfdouble')
                error(message('MATLAB:webservices:VarShouldBeAType','CoordinatesLabel3', 'wsdl.neplanservice.ArrayOfdouble', 'ArrayOfdouble'))
            end
            obj.CoordinatesLabel3 = value;
        end        

        function obj = set.CoordinatesLabel4(obj, value)
            if ~isempty(value) && ~isa(value,'wsdl.neplanservice.ArrayOfdouble')
                error(message('MATLAB:webservices:VarShouldBeAType','CoordinatesLabel4', 'wsdl.neplanservice.ArrayOfdouble', 'ArrayOfdouble'))
            end
            obj.CoordinatesLabel4 = value;
        end        

        function obj = set.CoordinatesLink1(obj, value)
            if ~isempty(value) && ~isa(value,'wsdl.neplanservice.ArrayOfdouble')
                error(message('MATLAB:webservices:VarShouldBeAType','CoordinatesLink1', 'wsdl.neplanservice.ArrayOfdouble', 'ArrayOfdouble'))
            end
            obj.CoordinatesLink1 = value;
        end        

        function obj = set.CoordinatesLink2(obj, value)
            if ~isempty(value) && ~isa(value,'wsdl.neplanservice.ArrayOfdouble')
                error(message('MATLAB:webservices:VarShouldBeAType','CoordinatesLink2', 'wsdl.neplanservice.ArrayOfdouble', 'ArrayOfdouble'))
            end
            obj.CoordinatesLink2 = value;
        end        

        function obj = set.CoordinatesLink3(obj, value)
            if ~isempty(value) && ~isa(value,'wsdl.neplanservice.ArrayOfdouble')
                error(message('MATLAB:webservices:VarShouldBeAType','CoordinatesLink3', 'wsdl.neplanservice.ArrayOfdouble', 'ArrayOfdouble'))
            end
            obj.CoordinatesLink3 = value;
        end        

        function obj = set.CoordinatesSymbol(obj, value)
            if ~isempty(value) && ~isa(value,'wsdl.neplanservice.ArrayOfdouble')
                error(message('MATLAB:webservices:VarShouldBeAType','CoordinatesSymbol', 'wsdl.neplanservice.ArrayOfdouble', 'ArrayOfdouble'))
            end
            obj.CoordinatesSymbol = value;
        end        

        function obj = set.Diameter(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','Diameter'},value,'double',true,false);
            obj.Diameter = value;
        end        

        function obj = set.ElementInfo(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','ElementInfo'},value,'string',true,false);
            obj.ElementInfo = value;
        end        

        function obj = set.Elevation(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','Elevation'},value,'double',true,false);
            obj.Elevation = value;
        end        

        function obj = set.InstallationYear(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','InstallationYear'},value,'int',true,false);
            obj.InstallationYear = value;
        end        

        function obj = set.IsForwardNetwork(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','IsForwardNetwork'},value,'boolean',true,false);
            obj.IsForwardNetwork = value;
        end        

        function obj = set.IsInMaintenance(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','IsInMaintenance'},value,'boolean',true,false);
            obj.IsInMaintenance = value;
        end        

        function obj = set.IsProjected(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','IsProjected'},value,'boolean',true,false);
            obj.IsProjected = value;
        end        

        function obj = set.Layout(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','Layout'},value,'short',true,false);
            obj.Layout = value;
        end        

        function obj = set.Load(obj, value)
            if ~isempty(value) && ~isa(value,'wsdl.neplanservice.LoadData')
                error(message('MATLAB:webservices:VarShouldBeAType','Load', 'wsdl.neplanservice.LoadData', 'LoadData'))
            end
            obj.Load = value;
        end        

        function obj = set.LogicalSwitch(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','LogicalSwitch'},value,'int',true,false);
            obj.LogicalSwitch = value;
        end        

        function obj = set.Material(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','Material'},value,'short',true,false);
            obj.Material = value;
        end        

        function obj = set.NodeName1(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','NodeName1'},value,'string',true,false);
            obj.NodeName1 = value;
        end        

        function obj = set.NodeName2(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','NodeName2'},value,'string',true,false);
            obj.NodeName2 = value;
        end        

        function obj = set.NodeName3(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','NodeName3'},value,'string',true,false);
            obj.NodeName3 = value;
        end        

        function obj = set.NodeName4(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','NodeName4'},value,'string',true,false);
            obj.NodeName4 = value;
        end        

        function obj = set.OnGraphicLayer(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','OnGraphicLayer'},value,'string',true,false);
            obj.OnGraphicLayer = value;
        end        

        function obj = set.OnPortNr(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','OnPortNr'},value,'short',true,false);
            obj.OnPortNr = value;
        end        

        function obj = set.SubAreaName(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','SubAreaName'},value,'string',true,false);
            obj.SubAreaName = value;
        end        

        function obj = set.Substation(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','Substation'},value,'string',true,false);
            obj.Substation = value;
        end        

        function obj = set.SymbolAngle(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','SymbolAngle'},value,'double',true,false);
            obj.SymbolAngle = value;
        end        

        function obj = set.SymbolName(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','SymbolName'},value,'string',true,false);
            obj.SymbolName = value;
        end        

        function obj = set.SymbolSize(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','SymbolSize'},value,'double',true,false);
            obj.SymbolSize = value;
        end        

        function obj = set.TechDataValues(obj, value)
            if ~isempty(value) && ~isa(value,'wsdl.neplanservice.ArrayOfTechDataValue')
                error(message('MATLAB:webservices:VarShouldBeAType','TechDataValues', 'wsdl.neplanservice.ArrayOfTechDataValue', 'ArrayOfTechDataValue'))
            end
            obj.TechDataValues = value;
        end        

        function obj = set.Type(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','Type'},value,'short',true,false);
            obj.Type = value;
        end        

        function obj = set.WaterLoadData(obj, value)
            if ~isempty(value) && ~isa(value,'wsdl.neplanservice.WaterLoadData')
                error(message('MATLAB:webservices:VarShouldBeAType','WaterLoadData', 'wsdl.neplanservice.WaterLoadData', 'WaterLoadData'))
            end
            obj.WaterLoadData = value;
        end        

        function obj = set.ZOrderNum(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','ZOrderNum'},value,'int',true,false);
            obj.ZOrderNum = value;
        end        

        function obj = set.ZoneName(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','ZoneName'},value,'string',true,false);
            obj.ZoneName = value;
        end        

        function obj = set.aliasName1(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','aliasName1'},value,'string',true,false);
            obj.aliasName1 = value;
        end        

        function obj = set.aliasName2(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','aliasName2'},value,'string',true,false);
            obj.aliasName2 = value;
        end        

        function obj = set.binaryData(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','binaryData'},value,'base64Binary',true,false);
            obj.binaryData = value;
        end        

        function obj = set.description(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','description'},value,'string',true,false);
            obj.description = value;
        end        

        function obj = set.elementType(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','elementType'},value,'string',true,false);
            obj.elementType = value;
        end        

        function obj = set.length(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','length'},value,'double',true,false);
            obj.length = value;
        end        

        function obj = set.libraryName(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','libraryName'},value,'string',true,false);
            obj.libraryName = value;
        end        

        function obj = set.librarySubname(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','librarySubname'},value,'string',true,false);
            obj.librarySubname = value;
        end        

        function obj = set.libraryType(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','libraryType'},value,'string',true,false);
            obj.libraryType = value;
        end        

        function obj = set.librayType(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','librayType'},value,'string',true,false);
            obj.librayType = value;
        end        

        function obj = set.listLineSections(obj, value)
            if ~isempty(value) && ~isa(value,'wsdl.neplanservice.ArrayOfLineSectionData')
                error(message('MATLAB:webservices:VarShouldBeAType','listLineSections', 'wsdl.neplanservice.ArrayOfLineSectionData', 'ArrayOfLineSectionData'))
            end
            obj.listLineSections = value;
        end        

        function obj = set.listSubLoads(obj, value)
            if ~isempty(value) && ~isa(value,'wsdl.neplanservice.ArrayOfLoadData')
                error(message('MATLAB:webservices:VarShouldBeAType','listSubLoads', 'wsdl.neplanservice.ArrayOfLoadData', 'ArrayOfLoadData'))
            end
            obj.listSubLoads = value;
        end        

        function obj = set.name(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','name'},value,'string',true,false);
            obj.name = value;
        end        

        function obj = set.numConnections(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','numConnections'},value,'short',true,false);
            obj.numConnections = value;
        end        

        function obj = set.phase(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','phase'},value,'short',true,false);
            obj.phase = value;
        end        

        function obj = set.remove(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','remove'},value,'boolean',true,false);
            obj.remove = value;
        end        

        function obj = set.un(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','un'},value,'double',true,false);
            obj.un = value;
        end        

        function obj = set.xmlData(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','xmlData'},value,'string',true,false);
            obj.xmlData = value;
        end        

        function obj = set.xmlInvest(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','xmlInvest'},value,'string',true,false);
            obj.xmlInvest = value;
        end        

        function obj = set.xmlItemList(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','xmlItemList'},value,'string',true,false);
            obj.xmlItemList = value;
        end        

        function obj = set.yLocation(obj, value)
            matlab.wsdl.internal.fromMATLAB({'ImportElementItem','yLocation'},value,'float',true,false);
            obj.yLocation = value;
        end
    end

    methods (Hidden, Access = {?matlab.wsdl.internal.WsdlObject,?NeplanService,?matlab.wsdl.internal.WsdlObject,?wsdl.neplanservice.ExternalProject,?wsdl.neplanservice.ArrayOfdouble,?wsdl.neplanservice.LoadData,?wsdl.neplanservice.string,?wsdl.neplanservice.ArrayOfImportElementItem,?wsdl.neplanservice.ArrayOfLoadData,?wsdl.neplanservice.ArrayOfstring,?wsdl.neplanservice.ArrayOfNeplanServiceElementResult,?wsdl.neplanservice.AnalysisParameterSettings,?wsdl.neplanservice.AnalysisReturnInfo,?wsdl.neplanservice.ArrayOfImportFeederItem,?wsdl.neplanservice.base64Binary,?wsdl.neplanservice.ArrayOfKeyValuePairOfstringstring,?wsdl.neplanservice.ArrayOfKeyValuePairOfstringNeplanServiceConnectionInfomHiA0HHi,?wsdl.neplanservice.ArrayOfNeplanServiceLoadGenerationInfo,?wsdl.neplanservice.ArrayOfguid,?wsdl.neplanservice.NeplanDomainServiceImportReturnInfo,?wsdl.neplanservice.ImportElementItem,?wsdl.neplanservice.ArrayOfTechDataValue,?wsdl.neplanservice.WaterLoadData,?wsdl.neplanservice.ArrayOfLineSectionData,?wsdl.neplanservice.TechDataValue,?wsdl.neplanservice.ImportFeederItem,?wsdl.neplanservice.NeplanServiceElementResult,?wsdl.neplanservice.NeplanServiceLoadGenerationInfo,?wsdl.neplanservice.KeyValuePairOfstringstring,?wsdl.neplanservice.KeyValuePairOfstringNeplanServiceConnectionInfomHiA0HHi,?wsdl.neplanservice.NeplanServiceConnectionInfo,?wsdl.neplanservice.LineSectionData,?wsdl.neplanservice.ArrayOfAnalysisReturnInfoCableSizingLineData,?wsdl.neplanservice.ArrayOfAnalysisReturnInfoRelayResultData,?wsdl.neplanservice.AnalysisReturnInfoCableSizingLineData,?wsdl.neplanservice.AnalysisReturnInfoRelayResultData})
        function validate(obj)
        % Test for required fields
            arrayfun(@(x) x.checkFields({},{},{x.BayesInStation,x.CoordinatesLabel1,x.CoordinatesLabel2,x.CoordinatesLabel3,x.CoordinatesLabel4,x.CoordinatesLink1,x.CoordinatesLink2,x.CoordinatesLink3,x.CoordinatesSymbol,x.Load,x.TechDataValues,x.WaterLoadData,x.listLineSections,x.listSubLoads}), obj);
        end
    end

    methods (Hidden, Access = protected)
        function jobj = getOneObj(obj)
        % Return the Java object corresponding to this object.  Intended
        % to be invoked from superclass.
            obj.validate
            import matlab.wsdl.internal.fromMATLAB
            jobj = neplanservice.ImportElementItem;  % create empty Java object
            % populate fields of object
            jobj.setAreaName(fromMATLAB({'ImportElementItem','AreaName'},obj.AreaName,'string',true));
            jobj.setBay(fromMATLAB({'ImportElementItem','Bay'},obj.Bay,'string',true));
            if ~isempty(obj.BayesInStation)
                jobj.setBayesInStation(obj.BayesInStation.getObj);
            end
            jobj.setCableOrOHL(fromMATLAB({'ImportElementItem','CableOrOHL'},obj.CableOrOHL,'short',true));
            if ~isempty(obj.CoordinatesLabel1)
                jobj.setCoordinatesLabel1(obj.CoordinatesLabel1.getObj);
            end
            if ~isempty(obj.CoordinatesLabel2)
                jobj.setCoordinatesLabel2(obj.CoordinatesLabel2.getObj);
            end
            if ~isempty(obj.CoordinatesLabel3)
                jobj.setCoordinatesLabel3(obj.CoordinatesLabel3.getObj);
            end
            if ~isempty(obj.CoordinatesLabel4)
                jobj.setCoordinatesLabel4(obj.CoordinatesLabel4.getObj);
            end
            if ~isempty(obj.CoordinatesLink1)
                jobj.setCoordinatesLink1(obj.CoordinatesLink1.getObj);
            end
            if ~isempty(obj.CoordinatesLink2)
                jobj.setCoordinatesLink2(obj.CoordinatesLink2.getObj);
            end
            if ~isempty(obj.CoordinatesLink3)
                jobj.setCoordinatesLink3(obj.CoordinatesLink3.getObj);
            end
            if ~isempty(obj.CoordinatesSymbol)
                jobj.setCoordinatesSymbol(obj.CoordinatesSymbol.getObj);
            end
            jobj.setDiameter(fromMATLAB({'ImportElementItem','Diameter'},obj.Diameter,'double',true));
            jobj.setElementInfo(fromMATLAB({'ImportElementItem','ElementInfo'},obj.ElementInfo,'string',true));
            jobj.setElevation(fromMATLAB({'ImportElementItem','Elevation'},obj.Elevation,'double',true));
            jobj.setInstallationYear(fromMATLAB({'ImportElementItem','InstallationYear'},obj.InstallationYear,'int',true));
            jobj.setIsForwardNetwork(fromMATLAB({'ImportElementItem','IsForwardNetwork'},obj.IsForwardNetwork,'boolean',true));
            jobj.setIsInMaintenance(fromMATLAB({'ImportElementItem','IsInMaintenance'},obj.IsInMaintenance,'boolean',true));
            jobj.setIsProjected(fromMATLAB({'ImportElementItem','IsProjected'},obj.IsProjected,'boolean',true));
            jobj.setLayout(fromMATLAB({'ImportElementItem','Layout'},obj.Layout,'short',true));
            if ~isempty(obj.Load)
                jobj.setLoad(obj.Load.getObj);
            end
            jobj.setLogicalSwitch(fromMATLAB({'ImportElementItem','LogicalSwitch'},obj.LogicalSwitch,'int',true));
            jobj.setMaterial(fromMATLAB({'ImportElementItem','Material'},obj.Material,'short',true));
            jobj.setNodeName1(fromMATLAB({'ImportElementItem','NodeName1'},obj.NodeName1,'string',true));
            jobj.setNodeName2(fromMATLAB({'ImportElementItem','NodeName2'},obj.NodeName2,'string',true));
            jobj.setNodeName3(fromMATLAB({'ImportElementItem','NodeName3'},obj.NodeName3,'string',true));
            jobj.setNodeName4(fromMATLAB({'ImportElementItem','NodeName4'},obj.NodeName4,'string',true));
            jobj.setOnGraphicLayer(fromMATLAB({'ImportElementItem','OnGraphicLayer'},obj.OnGraphicLayer,'string',true));
            jobj.setOnPortNr(fromMATLAB({'ImportElementItem','OnPortNr'},obj.OnPortNr,'short',true));
            jobj.setSubAreaName(fromMATLAB({'ImportElementItem','SubAreaName'},obj.SubAreaName,'string',true));
            jobj.setSubstation(fromMATLAB({'ImportElementItem','Substation'},obj.Substation,'string',true));
            jobj.setSymbolAngle(fromMATLAB({'ImportElementItem','SymbolAngle'},obj.SymbolAngle,'double',true));
            jobj.setSymbolName(fromMATLAB({'ImportElementItem','SymbolName'},obj.SymbolName,'string',true));
            jobj.setSymbolSize(fromMATLAB({'ImportElementItem','SymbolSize'},obj.SymbolSize,'double',true));
            if ~isempty(obj.TechDataValues)
                jobj.setTechDataValues(obj.TechDataValues.getObj);
            end
            jobj.setType(fromMATLAB({'ImportElementItem','Type'},obj.Type,'short',true));
            if ~isempty(obj.WaterLoadData)
                jobj.setWaterLoadData(obj.WaterLoadData.getObj);
            end
            jobj.setZOrderNum(fromMATLAB({'ImportElementItem','ZOrderNum'},obj.ZOrderNum,'int',true));
            jobj.setZoneName(fromMATLAB({'ImportElementItem','ZoneName'},obj.ZoneName,'string',true));
            jobj.setAliasName1(fromMATLAB({'ImportElementItem','aliasName1'},obj.aliasName1,'string',true));
            jobj.setAliasName2(fromMATLAB({'ImportElementItem','aliasName2'},obj.aliasName2,'string',true));
            jobj.setBinaryData(fromMATLAB({'ImportElementItem','binaryData'},obj.binaryData,'base64Binary',true));
            jobj.setDescription(fromMATLAB({'ImportElementItem','description'},obj.description,'string',true));
            jobj.setElementType(fromMATLAB({'ImportElementItem','elementType'},obj.elementType,'string',true));
            jobj.setLength(fromMATLAB({'ImportElementItem','length'},obj.length,'double',true));
            jobj.setLibraryName(fromMATLAB({'ImportElementItem','libraryName'},obj.libraryName,'string',true));
            jobj.setLibrarySubname(fromMATLAB({'ImportElementItem','librarySubname'},obj.librarySubname,'string',true));
            jobj.setLibraryType(fromMATLAB({'ImportElementItem','libraryType'},obj.libraryType,'string',true));
            jobj.setLibrayType(fromMATLAB({'ImportElementItem','librayType'},obj.librayType,'string',true));
            if ~isempty(obj.listLineSections)
                jobj.setListLineSections(obj.listLineSections.getObj);
            end
            if ~isempty(obj.listSubLoads)
                jobj.setListSubLoads(obj.listSubLoads.getObj);
            end
            jobj.setName(fromMATLAB({'ImportElementItem','name'},obj.name,'string',true));
            jobj.setNumConnections(fromMATLAB({'ImportElementItem','numConnections'},obj.numConnections,'short',true));
            jobj.setPhase(fromMATLAB({'ImportElementItem','phase'},obj.phase,'short',true));
            jobj.setRemove(fromMATLAB({'ImportElementItem','remove'},obj.remove,'boolean',true));
            jobj.setUn(fromMATLAB({'ImportElementItem','un'},obj.un,'double',true));
            jobj.setXmlData(fromMATLAB({'ImportElementItem','xmlData'},obj.xmlData,'string',true));
            jobj.setXmlInvest(fromMATLAB({'ImportElementItem','xmlInvest'},obj.xmlInvest,'string',true));
            jobj.setXmlItemList(fromMATLAB({'ImportElementItem','xmlItemList'},obj.xmlItemList,'string',true));
            jobj.setYLocation(fromMATLAB({'ImportElementItem','yLocation'},obj.yLocation,'float',true));
        end
    end

    methods (Static, Hidden, Access = {?NeplanService,?matlab.wsdl.internal.WsdlObject,?wsdl.neplanservice.ExternalProject,?wsdl.neplanservice.ArrayOfdouble,?wsdl.neplanservice.LoadData,?wsdl.neplanservice.string,?wsdl.neplanservice.ArrayOfImportElementItem,?wsdl.neplanservice.ArrayOfLoadData,?wsdl.neplanservice.ArrayOfstring,?wsdl.neplanservice.ArrayOfNeplanServiceElementResult,?wsdl.neplanservice.AnalysisParameterSettings,?wsdl.neplanservice.AnalysisReturnInfo,?wsdl.neplanservice.ArrayOfImportFeederItem,?wsdl.neplanservice.base64Binary,?wsdl.neplanservice.ArrayOfKeyValuePairOfstringstring,?wsdl.neplanservice.ArrayOfKeyValuePairOfstringNeplanServiceConnectionInfomHiA0HHi,?wsdl.neplanservice.ArrayOfNeplanServiceLoadGenerationInfo,?wsdl.neplanservice.ArrayOfguid,?wsdl.neplanservice.NeplanDomainServiceImportReturnInfo,?wsdl.neplanservice.ImportElementItem,?wsdl.neplanservice.ArrayOfTechDataValue,?wsdl.neplanservice.WaterLoadData,?wsdl.neplanservice.ArrayOfLineSectionData,?wsdl.neplanservice.TechDataValue,?wsdl.neplanservice.ImportFeederItem,?wsdl.neplanservice.NeplanServiceElementResult,?wsdl.neplanservice.NeplanServiceLoadGenerationInfo,?wsdl.neplanservice.KeyValuePairOfstringstring,?wsdl.neplanservice.KeyValuePairOfstringNeplanServiceConnectionInfomHiA0HHi,?wsdl.neplanservice.NeplanServiceConnectionInfo,?wsdl.neplanservice.LineSectionData,?wsdl.neplanservice.ArrayOfAnalysisReturnInfoCableSizingLineData,?wsdl.neplanservice.ArrayOfAnalysisReturnInfoRelayResultData,?wsdl.neplanservice.AnalysisReturnInfoCableSizingLineData,?wsdl.neplanservice.AnalysisReturnInfoRelayResultData})
        function obj = getInstance(jobj, isArray) 
        % Return a ImportElementItem object constructed from the Java object jobj.
        % If isArray, jobj is java.util.List of objects and we'll return array.
            if nargin == 0 || isempty(jobj)
                obj = [];
                return
            end
            if nargin > 1 && isArray
                for i = jobj.size : -1 : 1
                    value = wsdl.neplanservice.ImportElementItem.getInstance(jobj.get(i-1));
                    if ~isempty(value) 
                        obj(i,1) = value;
                    end
                end
                if ~exist('obj','var')
                    obj = [];
                end
            else
                import matlab.wsdl.internal.toMATLAB
                obj = wsdl.neplanservice.ImportElementItem( ...
                    toMATLAB(jobj.getAreaName,'string',false), ...
                    toMATLAB(jobj.getBay,'string',false), ...
                    wsdl.neplanservice.ArrayOfstring.getInstance(jobj.getBayesInStation,false), ...
                    toMATLAB(jobj.getCableOrOHL,'short',false), ...
                    wsdl.neplanservice.ArrayOfdouble.getInstance(jobj.getCoordinatesLabel1,false), ...
                    wsdl.neplanservice.ArrayOfdouble.getInstance(jobj.getCoordinatesLabel2,false), ...
                    wsdl.neplanservice.ArrayOfdouble.getInstance(jobj.getCoordinatesLabel3,false), ...
                    wsdl.neplanservice.ArrayOfdouble.getInstance(jobj.getCoordinatesLabel4,false), ...
                    wsdl.neplanservice.ArrayOfdouble.getInstance(jobj.getCoordinatesLink1,false), ...
                    wsdl.neplanservice.ArrayOfdouble.getInstance(jobj.getCoordinatesLink2,false), ...
                    wsdl.neplanservice.ArrayOfdouble.getInstance(jobj.getCoordinatesLink3,false), ...
                    wsdl.neplanservice.ArrayOfdouble.getInstance(jobj.getCoordinatesSymbol,false), ...
                    toMATLAB(jobj.getDiameter,'double',false), ...
                    toMATLAB(jobj.getElementInfo,'string',false), ...
                    toMATLAB(jobj.getElevation,'double',false), ...
                    toMATLAB(jobj.getInstallationYear,'int',false), ...
                    toMATLAB(jobj.isIsForwardNetwork,'boolean',false), ...
                    toMATLAB(jobj.isIsInMaintenance,'boolean',false), ...
                    toMATLAB(jobj.isIsProjected,'boolean',false), ...
                    toMATLAB(jobj.getLayout,'short',false), ...
                    wsdl.neplanservice.LoadData.getInstance(jobj.getLoad,false), ...
                    toMATLAB(jobj.getLogicalSwitch,'int',false), ...
                    toMATLAB(jobj.getMaterial,'short',false), ...
                    toMATLAB(jobj.getNodeName1,'string',false), ...
                    toMATLAB(jobj.getNodeName2,'string',false), ...
                    toMATLAB(jobj.getNodeName3,'string',false), ...
                    toMATLAB(jobj.getNodeName4,'string',false), ...
                    toMATLAB(jobj.getOnGraphicLayer,'string',false), ...
                    toMATLAB(jobj.getOnPortNr,'short',false), ...
                    toMATLAB(jobj.getSubAreaName,'string',false), ...
                    toMATLAB(jobj.getSubstation,'string',false), ...
                    toMATLAB(jobj.getSymbolAngle,'double',false), ...
                    toMATLAB(jobj.getSymbolName,'string',false), ...
                    toMATLAB(jobj.getSymbolSize,'double',false), ...
                    wsdl.neplanservice.ArrayOfTechDataValue.getInstance(jobj.getTechDataValues,false), ...
                    toMATLAB(jobj.getType,'short',false), ...
                    wsdl.neplanservice.WaterLoadData.getInstance(jobj.getWaterLoadData,false), ...
                    toMATLAB(jobj.getZOrderNum,'int',false), ...
                    toMATLAB(jobj.getZoneName,'string',false), ...
                    toMATLAB(jobj.getAliasName1,'string',false), ...
                    toMATLAB(jobj.getAliasName2,'string',false), ...
                    toMATLAB(jobj.getBinaryData,'base64Binary',false), ...
                    toMATLAB(jobj.getDescription,'string',false), ...
                    toMATLAB(jobj.getElementType,'string',false), ...
                    toMATLAB(jobj.getLength,'double',false), ...
                    toMATLAB(jobj.getLibraryName,'string',false), ...
                    toMATLAB(jobj.getLibrarySubname,'string',false), ...
                    toMATLAB(jobj.getLibraryType,'string',false), ...
                    toMATLAB(jobj.getLibrayType,'string',false), ...
                    wsdl.neplanservice.ArrayOfLineSectionData.getInstance(jobj.getListLineSections,false), ...
                    wsdl.neplanservice.ArrayOfLoadData.getInstance(jobj.getListSubLoads,false), ...
                    toMATLAB(jobj.getName,'string',false), ...
                    toMATLAB(jobj.getNumConnections,'short',false), ...
                    toMATLAB(jobj.getPhase,'short',false), ...
                    toMATLAB(jobj.isRemove,'boolean',false), ...
                    toMATLAB(jobj.getUn,'double',false), ...
                    toMATLAB(jobj.getXmlData,'string',false), ...
                    toMATLAB(jobj.getXmlInvest,'string',false), ...
                    toMATLAB(jobj.getXmlItemList,'string',false), ...
                    toMATLAB(jobj.getYLocation,'float',false));
            end
        end
    end
end

classdef NeplanService
    % NeplanService   A client to connect to the NeplanService service
    %    SERVICE = NeplanService  connects to https://demo.neplan.ch/NEPLAN360_Demo/Services/External/NeplanService.svc and returns a SERVICE.
    %    
    %    To communicate with the service, call a function on the SERVICE:
    %
    %       [...] = FUNCTION(SERVICE,arg,...) 
    %
    %    See <a href="matlab:doc NeplanService">doc NeplanService</a> for a list of functions.
         
    % This file generated by matlab.wsdl.createWSDLClient at 07-Jan-2018 16:39:55
    % from https://demo.neplan.ch/NEPLAN360_Demo/Services/External/NeplanService.svc?singleWsdl.  
    % Please do not alter this file.

    properties (SetAccess = immutable)
        Endpoint;  % service endpoint 
        WSDLFile;  % URI of WSDL
    end
    properties (Hidden)
        PortObj;   % the Java object implementing this client's methods
    end

    methods
        function obj = NeplanService
            obj.WSDLFile = 'https://demo.neplan.ch/NEPLAN360_Demo/Services/External/NeplanService.svc?singleWsdl'; 
            try
                wsdlService = neplanservice.NeplanService_Service();
                obj.PortObj = wsdlService.getWSHttpBindingNeplanService; 
                obj.Endpoint = char(wsdlService.getServiceName().toString);
            catch e
                if strcmp(e.identifier,'MATLAB:undefinedVarOrClass')
                    % if we couldn't find the service, see if expected jar is on classpath
                    dir = fileparts(mfilename('fullpath'));
                    % We expect this service's jar file to be in +wsdl subdirectory in 
                    % the same directory as this class file.
                    jpath = java.io.File(fullfile(dir, '+wsdl', 'neplanservice.jar')).getCanonicalFile;
                    cp = javaclasspath('-all');
                    if ~any(cellfun(@(x)jpath.equals(java.io.File(x).getCanonicalFile), cp))
                        thePath = char(jpath.toString);
                        error(message('MATLAB:webservices:AddClasspath', 'NeplanService', thePath, thePath));
                    else
                        error(message('MATLAB:webservices:CannotFindClass', 'neplanservice.NeplanService_Service'));
                    end
                else
                    rethrow(e);
                end
            end
        end

        function CreateProjectResult = CreateProject(obj,projectName,variantName,diagram,layerName,mediumType,srid,copySettingsFromProjectName)
        %CreateProject  
        %  CreateProjectResult = CreateProject(obj,projectName,variantName,diagram,layerName,mediumType,srid,copySettingsFromProjectName)  
        %    Inputs:
        %      obj - NeplanService object
        %      projectName - string
        %      variantName - string
        %      diagram - string
        %      layerName - string
        %      mediumType - string
        %      srid - numeric scalar (XML int)
        %      copySettingsFromProjectName - string
        %    Output:
        %      CreateProjectResult - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, projectName = []; end
            if nargin < 3, variantName = []; end
            if nargin < 4, diagram = []; end
            if nargin < 5, layerName = []; end
            if nargin < 6, mediumType = []; end
            if nargin < 7, srid = []; end
            if nargin < 8, copySettingsFromProjectName = []; end
            ret = matlab.internal.callJava('createProject',obj.PortObj,fromMATLAB({'CreateProject','projectName'}, projectName,'string',true,false),...
                fromMATLAB({'CreateProject','variantName'}, variantName,'string',true,false),...
                fromMATLAB({'CreateProject','diagram'}, diagram,'string',true,false),...
                fromMATLAB({'CreateProject','layerName'}, layerName,'string',true,false),...
                fromMATLAB({'CreateProject','mediumType'}, mediumType,'string',true,false),...
                fromMATLAB({'CreateProject','srid'}, srid,'int',true,false),...
                fromMATLAB({'CreateProject','copySettingsFromProjectName'}, copySettingsFromProjectName,'string',true,false));
            CreateProjectResult = wsdl.neplanservice.ExternalProject.getInstance(ret,false);

        end

        function GetProjectResult = GetProject(obj,projectName,variantName,diagramName,layerName)
        %GetProject  
        %  GetProjectResult = GetProject(obj,projectName,variantName,diagramName,layerName)  
        %    Inputs:
        %      obj - NeplanService object
        %      projectName - string
        %      variantName - string
        %      diagramName - string
        %      layerName - string
        %    Output:
        %      GetProjectResult - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, projectName = []; end
            if nargin < 3, variantName = []; end
            if nargin < 4, diagramName = []; end
            if nargin < 5, layerName = []; end
            ret = matlab.internal.callJava('getProject',obj.PortObj,fromMATLAB({'GetProject','projectName'}, projectName,'string',true,false),...
                fromMATLAB({'GetProject','variantName'}, variantName,'string',true,false),...
                fromMATLAB({'GetProject','diagramName'}, diagramName,'string',true,false),...
                fromMATLAB({'GetProject','layerName'}, layerName,'string',true,false));
            GetProjectResult = wsdl.neplanservice.ExternalProject.getInstance(ret,false);

        end

        function GetLogOnUrlWithProjectResult = GetLogOnUrlWithProject(obj,project)
        %GetLogOnUrlWithProject  
        %  GetLogOnUrlWithProjectResult = GetLogOnUrlWithProject(obj,project)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %    Output:
        %      GetLogOnUrlWithProjectResult - string
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            ret = matlab.internal.callJava('getLogOnUrlWithProject',obj.PortObj,project);
            GetLogOnUrlWithProjectResult = toMATLAB(ret,'string',false);

        end

        function GetLogOnUrlResult = GetLogOnUrl(obj)
        %GetLogOnUrl  
        %  GetLogOnUrlResult = GetLogOnUrl(obj)  
        %    Inputs:
        %      obj - NeplanService object
        %    Output:
        %      GetLogOnUrlResult - string
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            ret = matlab.internal.callJava('getLogOnUrl',obj.PortObj);
            GetLogOnUrlResult = toMATLAB(ret,'string',false);

        end

        function GetLogOnSessionIDResult = GetLogOnSessionID(obj,project)
        %GetLogOnSessionID  
        %  GetLogOnSessionIDResult = GetLogOnSessionID(obj,project)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %    Output:
        %      GetLogOnSessionIDResult - string
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            ret = matlab.internal.callJava('getLogOnSessionID',obj.PortObj,project);
            GetLogOnSessionIDResult = toMATLAB(ret,'string',false);

        end

        function [InsertNodeResult,project] = InsertNode(obj,project,name,un,fn,libraryType,xmlData,x,y,symbolName)
        %InsertNode  
        %  [InsertNodeResult,project] = InsertNode(obj,project,name,un,fn,libraryType,xmlData,x,y,symbolName)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      name - string
        %      un - numeric scalar (XML double)
        %      fn - numeric scalar (XML double)
        %      libraryType - string
        %      xmlData - string
        %      x - numeric scalar (XML double)
        %      y - numeric scalar (XML double)
        %      symbolName - string
        %    Outputs:
        %      InsertNodeResult - string
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, name = []; end
            if nargin < 4, un = []; end
            if nargin < 5, fn = []; end
            if nargin < 6, libraryType = []; end
            if nargin < 7, xmlData = []; end
            if nargin < 8, x = []; end
            if nargin < 9, y = []; end
            if nargin < 10, symbolName = []; end
            InsertNodeResult_Holder = javax.xml.ws.Holder;
            if nargin < 2
                project_Holder = javax.xml.ws.Holder;
            else
                project_Holder = javax.xml.ws.Holder(project);
            end
            matlab.internal.callJava('insertNode',obj.PortObj,project_Holder,...
                fromMATLAB({'InsertNode','name'}, name,'string',true,false),...
                fromMATLAB({'InsertNode','un'}, un,'double',true,false),...
                fromMATLAB({'InsertNode','fn'}, fn,'double',true,false),...
                fromMATLAB({'InsertNode','libraryType'}, libraryType,'string',true,false),...
                fromMATLAB({'InsertNode','xmlData'}, xmlData,'string',true,false),...
                fromMATLAB({'InsertNode','x'}, x,'double',true,false),...
                fromMATLAB({'InsertNode','y'}, y,'double',true,false),...
                fromMATLAB({'InsertNode','symbolName'}, symbolName,'string',true,false),...
                InsertNodeResult_Holder);
            ret = InsertNodeResult_Holder.value;
            InsertNodeResult = toMATLAB(ret,'string',false);
            ret = project_Holder.value;
            project = wsdl.neplanservice.ExternalProject.getInstance(ret,false);

        end

        function [InsertNodeWithoutGraphicResult,project] = InsertNodeWithoutGraphic(obj,project,name,un,fn,libraryType,xmlData)
        %InsertNodeWithoutGraphic  
        %  [InsertNodeWithoutGraphicResult,project] = InsertNodeWithoutGraphic(obj,project,name,un,fn,libraryType,xmlData)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      name - string
        %      un - numeric scalar (XML double)
        %      fn - numeric scalar (XML double)
        %      libraryType - string
        %      xmlData - string
        %    Outputs:
        %      InsertNodeWithoutGraphicResult - string
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, name = []; end
            if nargin < 4, un = []; end
            if nargin < 5, fn = []; end
            if nargin < 6, libraryType = []; end
            if nargin < 7, xmlData = []; end
            InsertNodeWithoutGraphicResult_Holder = javax.xml.ws.Holder;
            if nargin < 2
                project_Holder = javax.xml.ws.Holder;
            else
                project_Holder = javax.xml.ws.Holder(project);
            end
            matlab.internal.callJava('insertNodeWithoutGraphic',obj.PortObj,project_Holder,...
                fromMATLAB({'InsertNodeWithoutGraphic','name'}, name,'string',true,false),...
                fromMATLAB({'InsertNodeWithoutGraphic','un'}, un,'double',true,false),...
                fromMATLAB({'InsertNodeWithoutGraphic','fn'}, fn,'double',true,false),...
                fromMATLAB({'InsertNodeWithoutGraphic','libraryType'}, libraryType,'string',true,false),...
                fromMATLAB({'InsertNodeWithoutGraphic','xmlData'}, xmlData,'string',true,false),...
                InsertNodeWithoutGraphicResult_Holder);
            ret = InsertNodeWithoutGraphicResult_Holder.value;
            InsertNodeWithoutGraphicResult = toMATLAB(ret,'string',false);
            ret = project_Holder.value;
            project = wsdl.neplanservice.ExternalProject.getInstance(ret,false);

        end

        function [InsertBusbarResult,project] = InsertBusbar(obj,project,name,un,fn,libraryType,xmlData,coordinates)
        %InsertBusbar  
        %  [InsertBusbarResult,project] = InsertBusbar(obj,project,name,un,fn,libraryType,xmlData,coordinates)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      name - string
        %      un - numeric scalar (XML double)
        %      fn - numeric scalar (XML double)
        %      libraryType - string
        %      xmlData - string
        %      coordinates - <a href="matlab:doc wsdl.neplanservice.ArrayOfdouble">ArrayOfdouble</a> object
        %    Outputs:
        %      InsertBusbarResult - string
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, name = []; end
            if nargin < 4, un = []; end
            if nargin < 5, fn = []; end
            if nargin < 6, libraryType = []; end
            if nargin < 7, xmlData = []; end
            if nargin < 8, coordinates = []; end
            if ~isempty(coordinates), coordinates = coordinates.getObj; end
            InsertBusbarResult_Holder = javax.xml.ws.Holder;
            if nargin < 2
                project_Holder = javax.xml.ws.Holder;
            else
                project_Holder = javax.xml.ws.Holder(project);
            end
            matlab.internal.callJava('insertBusbar',obj.PortObj,project_Holder,...
                fromMATLAB({'InsertBusbar','name'}, name,'string',true,false),...
                fromMATLAB({'InsertBusbar','un'}, un,'double',true,false),...
                fromMATLAB({'InsertBusbar','fn'}, fn,'double',true,false),...
                fromMATLAB({'InsertBusbar','libraryType'}, libraryType,'string',true,false),...
                fromMATLAB({'InsertBusbar','xmlData'}, xmlData,'string',true,false),...
                coordinates,...
                InsertBusbarResult_Holder);
            ret = InsertBusbarResult_Holder.value;
            InsertBusbarResult = toMATLAB(ret,'string',false);
            ret = project_Holder.value;
            project = wsdl.neplanservice.ExternalProject.getInstance(ret,false);

        end

        function InsertLineResult = InsertLine(obj,project,name,fromNode,toNode,length,libraryType,xmlData,coordinates)
        %InsertLine  
        %  InsertLineResult = InsertLine(obj,project,name,fromNode,toNode,length,libraryType,xmlData,coordinates)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      name - string
        %      fromNode - string
        %      toNode - string
        %      length - numeric scalar (XML double)
        %      libraryType - string
        %      xmlData - string
        %      coordinates - <a href="matlab:doc wsdl.neplanservice.ArrayOfdouble">ArrayOfdouble</a> object
        %    Output:
        %      InsertLineResult - string
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, name = []; end
            if nargin < 4, fromNode = []; end
            if nargin < 5, toNode = []; end
            if nargin < 6, length = []; end
            if nargin < 7, libraryType = []; end
            if nargin < 8, xmlData = []; end
            if nargin < 9, coordinates = []; end
            if ~isempty(coordinates), coordinates = coordinates.getObj; end
            ret = matlab.internal.callJava('insertLine',obj.PortObj,project,...
                fromMATLAB({'InsertLine','name'}, name,'string',true,false),...
                fromMATLAB({'InsertLine','fromNode'}, fromNode,'string',true,false),...
                fromMATLAB({'InsertLine','toNode'}, toNode,'string',true,false),...
                fromMATLAB({'InsertLine','length'}, length,'double',true,false),...
                fromMATLAB({'InsertLine','libraryType'}, libraryType,'string',true,false),...
                fromMATLAB({'InsertLine','xmlData'}, xmlData,'string',true,false),...
                coordinates);
            InsertLineResult = toMATLAB(ret,'string',false);

        end

        function InsertLineByNodeIDResult = InsertLineByNodeID(obj,project,name,fromNodeID,toNodeID,length,libraryType,xmlData,coordinates)
        %InsertLineByNodeID  
        %  InsertLineByNodeIDResult = InsertLineByNodeID(obj,project,name,fromNodeID,toNodeID,length,libraryType,xmlData,coordinates)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      name - string
        %      fromNodeID - string
        %      toNodeID - string
        %      length - numeric scalar (XML double)
        %      libraryType - string
        %      xmlData - string
        %      coordinates - <a href="matlab:doc wsdl.neplanservice.ArrayOfdouble">ArrayOfdouble</a> object
        %    Output:
        %      InsertLineByNodeIDResult - string
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, name = []; end
            if nargin < 4, fromNodeID = []; end
            if nargin < 5, toNodeID = []; end
            if nargin < 6, length = []; end
            if nargin < 7, libraryType = []; end
            if nargin < 8, xmlData = []; end
            if nargin < 9, coordinates = []; end
            if ~isempty(coordinates), coordinates = coordinates.getObj; end
            ret = matlab.internal.callJava('insertLineByNodeID',obj.PortObj,project,...
                fromMATLAB({'InsertLineByNodeID','name'}, name,'string',true,false),...
                fromMATLAB({'InsertLineByNodeID','fromNodeID'}, fromNodeID,'string',true,false),...
                fromMATLAB({'InsertLineByNodeID','toNodeID'}, toNodeID,'string',true,false),...
                fromMATLAB({'InsertLineByNodeID','length'}, length,'double',true,false),...
                fromMATLAB({'InsertLineByNodeID','libraryType'}, libraryType,'string',true,false),...
                fromMATLAB({'InsertLineByNodeID','xmlData'}, xmlData,'string',true,false),...
                coordinates);
            InsertLineByNodeIDResult = toMATLAB(ret,'string',false);

        end

        function InsertLineAsymResult = InsertLineAsym(obj,project,name,fromNode,toNode,length,phase,libraryType,xmlData,coordinates)
        %InsertLineAsym  
        %  InsertLineAsymResult = InsertLineAsym(obj,project,name,fromNode,toNode,length,phase,libraryType,xmlData,coordinates)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      name - string
        %      fromNode - string
        %      toNode - string
        %      length - numeric scalar (XML double)
        %      phase - numeric scalar (XML short)
        %      libraryType - string
        %      xmlData - string
        %      coordinates - <a href="matlab:doc wsdl.neplanservice.ArrayOfdouble">ArrayOfdouble</a> object
        %    Output:
        %      InsertLineAsymResult - string
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, name = []; end
            if nargin < 4, fromNode = []; end
            if nargin < 5, toNode = []; end
            if nargin < 6, length = []; end
            if nargin < 7, phase = []; end
            if nargin < 8, libraryType = []; end
            if nargin < 9, xmlData = []; end
            if nargin < 10, coordinates = []; end
            if ~isempty(coordinates), coordinates = coordinates.getObj; end
            ret = matlab.internal.callJava('insertLineAsym',obj.PortObj,project,...
                fromMATLAB({'InsertLineAsym','name'}, name,'string',true,false),...
                fromMATLAB({'InsertLineAsym','fromNode'}, fromNode,'string',true,false),...
                fromMATLAB({'InsertLineAsym','toNode'}, toNode,'string',true,false),...
                fromMATLAB({'InsertLineAsym','length'}, length,'double',true,false),...
                fromMATLAB({'InsertLineAsym','phase'}, phase,'short',true,false),...
                fromMATLAB({'InsertLineAsym','libraryType'}, libraryType,'string',true,false),...
                fromMATLAB({'InsertLineAsym','xmlData'}, xmlData,'string',true,false),...
                coordinates);
            InsertLineAsymResult = toMATLAB(ret,'string',false);

        end

        function Insert2PortElementResult = Insert2PortElement(obj,project,name,fromNode,toNode,elementTypeName,libraryType,xmlData,phase,coordinatesLink1,coordinatesLink2,symbolName,symbolAngle)
        %Insert2PortElement  
        %  Insert2PortElementResult = Insert2PortElement(obj,project,name,fromNode,toNode,elementTypeName,libraryType,xmlData,phase,coordinatesLink1,coordinatesLink2,symbolName,symbolAngle)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      name - string
        %      fromNode - string
        %      toNode - string
        %      elementTypeName - string
        %      libraryType - string
        %      xmlData - string
        %      phase - numeric scalar (XML int)
        %      coordinatesLink1 - <a href="matlab:doc wsdl.neplanservice.ArrayOfdouble">ArrayOfdouble</a> object
        %      coordinatesLink2 - <a href="matlab:doc wsdl.neplanservice.ArrayOfdouble">ArrayOfdouble</a> object
        %      symbolName - string
        %      symbolAngle - numeric scalar (XML double)
        %    Output:
        %      Insert2PortElementResult - string
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, name = []; end
            if nargin < 4, fromNode = []; end
            if nargin < 5, toNode = []; end
            if nargin < 6, elementTypeName = []; end
            if nargin < 7, libraryType = []; end
            if nargin < 8, xmlData = []; end
            if nargin < 9, phase = []; end
            if nargin < 10, coordinatesLink1 = []; end
            if ~isempty(coordinatesLink1), coordinatesLink1 = coordinatesLink1.getObj; end
            if nargin < 11, coordinatesLink2 = []; end
            if ~isempty(coordinatesLink2), coordinatesLink2 = coordinatesLink2.getObj; end
            if nargin < 12, symbolName = []; end
            if nargin < 13, symbolAngle = []; end
            ret = matlab.internal.callJava('insert2PortElement',obj.PortObj,project,...
                fromMATLAB({'Insert2PortElement','name'}, name,'string',true,false),...
                fromMATLAB({'Insert2PortElement','fromNode'}, fromNode,'string',true,false),...
                fromMATLAB({'Insert2PortElement','toNode'}, toNode,'string',true,false),...
                fromMATLAB({'Insert2PortElement','elementTypeName'}, elementTypeName,'string',true,false),...
                fromMATLAB({'Insert2PortElement','libraryType'}, libraryType,'string',true,false),...
                fromMATLAB({'Insert2PortElement','xmlData'}, xmlData,'string',true,false),...
                fromMATLAB({'Insert2PortElement','phase'}, phase,'int',true,false),...
                coordinatesLink1,...
                coordinatesLink2,...
                fromMATLAB({'Insert2PortElement','symbolName'}, symbolName,'string',true,false),...
                fromMATLAB({'Insert2PortElement','symbolAngle'}, symbolAngle,'double',true,false));
            Insert2PortElementResult = toMATLAB(ret,'string',false);

        end

        function [Insert1PortElementResult,project] = Insert1PortElement(obj,project,name,fromNode,elementTypeName,libraryType,xmlData,phase,coordinatesLink,symbolName,symbolAngle)
        %Insert1PortElement  
        %  [Insert1PortElementResult,project] = Insert1PortElement(obj,project,name,fromNode,elementTypeName,libraryType,xmlData,phase,coordinatesLink,symbolName,symbolAngle)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      name - string
        %      fromNode - string
        %      elementTypeName - string
        %      libraryType - string
        %      xmlData - string
        %      phase - numeric scalar (XML int)
        %      coordinatesLink - <a href="matlab:doc wsdl.neplanservice.ArrayOfdouble">ArrayOfdouble</a> object
        %      symbolName - string
        %      symbolAngle - numeric scalar (XML double)
        %    Outputs:
        %      Insert1PortElementResult - string
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, name = []; end
            if nargin < 4, fromNode = []; end
            if nargin < 5, elementTypeName = []; end
            if nargin < 6, libraryType = []; end
            if nargin < 7, xmlData = []; end
            if nargin < 8, phase = []; end
            if nargin < 9, coordinatesLink = []; end
            if ~isempty(coordinatesLink), coordinatesLink = coordinatesLink.getObj; end
            if nargin < 10, symbolName = []; end
            if nargin < 11, symbolAngle = []; end
            Insert1PortElementResult_Holder = javax.xml.ws.Holder;
            if nargin < 2
                project_Holder = javax.xml.ws.Holder;
            else
                project_Holder = javax.xml.ws.Holder(project);
            end
            matlab.internal.callJava('insert1PortElement',obj.PortObj,project_Holder,...
                fromMATLAB({'Insert1PortElement','name'}, name,'string',true,false),...
                fromMATLAB({'Insert1PortElement','fromNode'}, fromNode,'string',true,false),...
                fromMATLAB({'Insert1PortElement','elementTypeName'}, elementTypeName,'string',true,false),...
                fromMATLAB({'Insert1PortElement','libraryType'}, libraryType,'string',true,false),...
                fromMATLAB({'Insert1PortElement','xmlData'}, xmlData,'string',true,false),...
                fromMATLAB({'Insert1PortElement','phase'}, phase,'int',true,false),...
                coordinatesLink,...
                fromMATLAB({'Insert1PortElement','symbolName'}, symbolName,'string',true,false),...
                fromMATLAB({'Insert1PortElement','symbolAngle'}, symbolAngle,'double',true,false),...
                Insert1PortElementResult_Holder);
            ret = Insert1PortElementResult_Holder.value;
            Insert1PortElementResult = toMATLAB(ret,'string',false);
            ret = project_Holder.value;
            project = wsdl.neplanservice.ExternalProject.getInstance(ret,false);

        end

        function InsertProtectionElementResult = InsertProtectionElement(obj,project,name,onElementID,atPort,elementTypeName,libraryType,xmlData,phase,symbolName)
        %InsertProtectionElement  
        %  InsertProtectionElementResult = InsertProtectionElement(obj,project,name,onElementID,atPort,elementTypeName,libraryType,xmlData,phase,symbolName)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      name - string
        %      onElementID - string
        %      atPort - numeric scalar (XML short)
        %      elementTypeName - string
        %      libraryType - string
        %      xmlData - string
        %      phase - numeric scalar (XML int)
        %      symbolName - string
        %    Output:
        %      InsertProtectionElementResult - string
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, name = []; end
            if nargin < 4, onElementID = []; end
            if nargin < 5, atPort = []; end
            if nargin < 6, elementTypeName = []; end
            if nargin < 7, libraryType = []; end
            if nargin < 8, xmlData = []; end
            if nargin < 9, phase = []; end
            if nargin < 10, symbolName = []; end
            ret = matlab.internal.callJava('insertProtectionElement',obj.PortObj,project,...
                fromMATLAB({'InsertProtectionElement','name'}, name,'string',true,false),...
                fromMATLAB({'InsertProtectionElement','onElementID'}, onElementID,'string',true,false),...
                fromMATLAB({'InsertProtectionElement','atPort'}, atPort,'short',true,false),...
                fromMATLAB({'InsertProtectionElement','elementTypeName'}, elementTypeName,'string',true,false),...
                fromMATLAB({'InsertProtectionElement','libraryType'}, libraryType,'string',true,false),...
                fromMATLAB({'InsertProtectionElement','xmlData'}, xmlData,'string',true,false),...
                fromMATLAB({'InsertProtectionElement','phase'}, phase,'int',true,false),...
                fromMATLAB({'InsertProtectionElement','symbolName'}, symbolName,'string',true,false));
            InsertProtectionElementResult = toMATLAB(ret,'string',false);

        end

        function InsertFeederResult = InsertFeeder(obj,project,feederName,nodeName,elementName)
        %InsertFeeder  
        %  InsertFeederResult = InsertFeeder(obj,project,feederName,nodeName,elementName)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      feederName - string
        %      nodeName - string
        %      elementName - string
        %    Output:
        %      InsertFeederResult - string
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, feederName = []; end
            if nargin < 4, nodeName = []; end
            if nargin < 5, elementName = []; end
            ret = matlab.internal.callJava('insertFeeder',obj.PortObj,project,...
                fromMATLAB({'InsertFeeder','feederName'}, feederName,'string',true,false),...
                fromMATLAB({'InsertFeeder','nodeName'}, nodeName,'string',true,false),...
                fromMATLAB({'InsertFeeder','elementName'}, elementName,'string',true,false));
            InsertFeederResult = toMATLAB(ret,'string',false);

        end

        function InsertAreaResult = InsertArea(obj,project,areaName,firstSubArea,colorStringArea,colorStringSubArea)
        %InsertArea  
        %  InsertAreaResult = InsertArea(obj,project,areaName,firstSubArea,colorStringArea,colorStringSubArea)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      areaName - string
        %      firstSubArea - string
        %      colorStringArea - string
        %      colorStringSubArea - string
        %    Output:
        %      InsertAreaResult - string
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, areaName = []; end
            if nargin < 4, firstSubArea = []; end
            if nargin < 5, colorStringArea = []; end
            if nargin < 6, colorStringSubArea = []; end
            ret = matlab.internal.callJava('insertArea',obj.PortObj,project,...
                fromMATLAB({'InsertArea','areaName'}, areaName,'string',true,false),...
                fromMATLAB({'InsertArea','firstSubArea'}, firstSubArea,'string',true,false),...
                fromMATLAB({'InsertArea','colorStringArea'}, colorStringArea,'string',true,false),...
                fromMATLAB({'InsertArea','colorStringSubArea'}, colorStringSubArea,'string',true,false));
            InsertAreaResult = toMATLAB(ret,'string',false);

        end

        function InsertZoneResult = InsertZone(obj,project,name,colorString)
        %InsertZone  
        %  InsertZoneResult = InsertZone(obj,project,name,colorString)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      name - string
        %      colorString - string
        %    Output:
        %      InsertZoneResult - string
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, name = []; end
            if nargin < 4, colorString = []; end
            ret = matlab.internal.callJava('insertZone',obj.PortObj,project,...
                fromMATLAB({'InsertZone','name'}, name,'string',true,false),...
                fromMATLAB({'InsertZone','colorString'}, colorString,'string',true,false));
            InsertZoneResult = toMATLAB(ret,'string',false);

        end

        function InsertMeasurementResult = InsertMeasurement(obj,project,measurementDefinitionName,elementName,portNr,dateTime,inputDataDefinition,measuremens,nameAliasName1AliasName2)
        %InsertMeasurement  
        %  InsertMeasurementResult = InsertMeasurement(obj,project,measurementDefinitionName,elementName,portNr,dateTime,inputDataDefinition,measuremens,nameAliasName1AliasName2)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      measurementDefinitionName - string
        %      elementName - string
        %      portNr - numeric scalar (XML short)
        %      dateTime - datetime object (XML dateTime)
        %      inputDataDefinition - numeric scalar (XML int)
        %      measuremens - <a href="matlab:doc wsdl.neplanservice.ArrayOfdouble">ArrayOfdouble</a> object
        %      nameAliasName1AliasName2 - numeric scalar (XML short)
        %    Output:
        %      InsertMeasurementResult - string
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, measurementDefinitionName = []; end
            if nargin < 4, elementName = []; end
            if nargin < 5, portNr = []; end
            if nargin < 6, dateTime = []; end
            if nargin < 7, inputDataDefinition = []; end
            if nargin < 8, measuremens = []; end
            if ~isempty(measuremens), measuremens = measuremens.getObj; end
            if nargin < 9, nameAliasName1AliasName2 = []; end
            ret = matlab.internal.callJava('insertMeasurement',obj.PortObj,project,...
                fromMATLAB({'InsertMeasurement','measurementDefinitionName'}, measurementDefinitionName,'string',true,false),...
                fromMATLAB({'InsertMeasurement','elementName'}, elementName,'string',true,false),...
                fromMATLAB({'InsertMeasurement','portNr'}, portNr,'short',true,false),...
                fromMATLAB({'InsertMeasurement','dateTime'}, dateTime,'dateTime',true,false),...
                fromMATLAB({'InsertMeasurement','inputDataDefinition'}, inputDataDefinition,'int',true,false),...
                measuremens,...
                fromMATLAB({'InsertMeasurement','nameAliasName1AliasName2'}, nameAliasName1AliasName2,'short',true,false));
            InsertMeasurementResult = toMATLAB(ret,'string',false);

        end

        function InsertMeasurementByElementIDResult = InsertMeasurementByElementID(obj,elementID,measurementDefinitionName,portNr,dateTime,inputDataDefinition,measurements)
        %InsertMeasurementByElementID  
        %  InsertMeasurementByElementIDResult = InsertMeasurementByElementID(obj,elementID,measurementDefinitionName,portNr,dateTime,inputDataDefinition,measurements)  
        %    Inputs:
        %      obj - NeplanService object
        %      elementID - string
        %      measurementDefinitionName - string
        %      portNr - numeric scalar (XML short)
        %      dateTime - datetime object (XML dateTime)
        %      inputDataDefinition - numeric scalar (XML int)
        %      measurements - <a href="matlab:doc wsdl.neplanservice.ArrayOfdouble">ArrayOfdouble</a> object
        %    Output:
        %      InsertMeasurementByElementIDResult - string
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, elementID = []; end
            if nargin < 3, measurementDefinitionName = []; end
            if nargin < 4, portNr = []; end
            if nargin < 5, dateTime = []; end
            if nargin < 6, inputDataDefinition = []; end
            if nargin < 7, measurements = []; end
            if ~isempty(measurements), measurements = measurements.getObj; end
            ret = matlab.internal.callJava('insertMeasurementByElementID',obj.PortObj,fromMATLAB({'InsertMeasurementByElementID','elementID'}, elementID,'string',true,false),...
                fromMATLAB({'InsertMeasurementByElementID','measurementDefinitionName'}, measurementDefinitionName,'string',true,false),...
                fromMATLAB({'InsertMeasurementByElementID','portNr'}, portNr,'short',true,false),...
                fromMATLAB({'InsertMeasurementByElementID','dateTime'}, dateTime,'dateTime',true,false),...
                fromMATLAB({'InsertMeasurementByElementID','inputDataDefinition'}, inputDataDefinition,'int',true,false),...
                measurements);
            InsertMeasurementByElementIDResult = toMATLAB(ret,'string',false);

        end

        function InsertDiagramResult = InsertDiagram(obj,project,diagramName,firstGraphicLayerName)
        %InsertDiagram  
        %  InsertDiagramResult = InsertDiagram(obj,project,diagramName,firstGraphicLayerName)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      diagramName - string
        %      firstGraphicLayerName - string
        %    Output:
        %      InsertDiagramResult - string
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, diagramName = []; end
            if nargin < 4, firstGraphicLayerName = []; end
            ret = matlab.internal.callJava('insertDiagram',obj.PortObj,project,...
                fromMATLAB({'InsertDiagram','diagramName'}, diagramName,'string',true,false),...
                fromMATLAB({'InsertDiagram','firstGraphicLayerName'}, firstGraphicLayerName,'string',true,false));
            InsertDiagramResult = toMATLAB(ret,'string',false);

        end

        function [InsertGraphicLayerResult,project] = InsertGraphicLayer(obj,project,diagramID,graphicLayerName)
        %InsertGraphicLayer  
        %  [InsertGraphicLayerResult,project] = InsertGraphicLayer(obj,project,diagramID,graphicLayerName)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      diagramID - string
        %      graphicLayerName - string
        %    Outputs:
        %      InsertGraphicLayerResult - string
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, diagramID = []; end
            if nargin < 4, graphicLayerName = []; end
            InsertGraphicLayerResult_Holder = javax.xml.ws.Holder;
            if nargin < 2
                project_Holder = javax.xml.ws.Holder;
            else
                project_Holder = javax.xml.ws.Holder(project);
            end
            matlab.internal.callJava('insertGraphicLayer',obj.PortObj,project_Holder,...
                fromMATLAB({'InsertGraphicLayer','diagramID'}, diagramID,'string',true,false),...
                fromMATLAB({'InsertGraphicLayer','graphicLayerName'}, graphicLayerName,'string',true,false),...
                InsertGraphicLayerResult_Holder);
            ret = InsertGraphicLayerResult_Holder.value;
            InsertGraphicLayerResult = toMATLAB(ret,'string',false);
            ret = project_Holder.value;
            project = wsdl.neplanservice.ExternalProject.getInstance(ret,false);

        end

        function AddSubLoadResult = AddSubLoad(obj,project,loadID,loadData)
        %AddSubLoad  
        %  AddSubLoadResult = AddSubLoad(obj,project,loadID,loadData)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      loadID - string
        %      loadData - <a href="matlab:doc wsdl.neplanservice.LoadData">LoadData</a> object
        %    Output:
        %      AddSubLoadResult - logical or numeric scalar (XML boolean)
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, loadID = []; end
            if nargin < 4, loadData = []; end
            if ~isempty(loadData), loadData = loadData.getObj; end
            ret = matlab.internal.callJava('addSubLoad',obj.PortObj,project,...
                fromMATLAB({'AddSubLoad','loadID'}, loadID,'string',true,false),...
                loadData);
            AddSubLoadResult = toMATLAB(ret,'boolean',false);

        end

        function AssignPowerTo1PortResult = AssignPowerTo1Port(obj,project,name,elementTypeName,powerType,value1,value2)
        %AssignPowerTo1Port  
        %  AssignPowerTo1PortResult = AssignPowerTo1Port(obj,project,name,elementTypeName,powerType,value1,value2)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      name - string
        %      elementTypeName - string
        %      powerType - numeric scalar (XML short)
        %      value1 - numeric scalar (XML double)
        %      value2 - numeric scalar (XML double)
        %    Output:
        %      AssignPowerTo1PortResult - logical or numeric scalar (XML boolean)
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, name = []; end
            if nargin < 4, elementTypeName = []; end
            if nargin < 5, powerType = []; end
            if nargin < 6, value1 = []; end
            if nargin < 7, value2 = []; end
            ret = matlab.internal.callJava('assignPowerTo1Port',obj.PortObj,project,...
                fromMATLAB({'AssignPowerTo1Port','name'}, name,'string',true,false),...
                fromMATLAB({'AssignPowerTo1Port','elementTypeName'}, elementTypeName,'string',true,false),...
                fromMATLAB({'AssignPowerTo1Port','powerType'}, powerType,'short',true,false),...
                fromMATLAB({'AssignPowerTo1Port','value1'}, value1,'double',true,false),...
                fromMATLAB({'AssignPowerTo1Port','value2'}, value2,'double',true,false));
            AssignPowerTo1PortResult = toMATLAB(ret,'boolean',false);

        end

        function AssignPowerTo1PortByIDResult = AssignPowerTo1PortByID(obj,project,elementID,powerType,value1,value2)
        %AssignPowerTo1PortByID  
        %  AssignPowerTo1PortByIDResult = AssignPowerTo1PortByID(obj,project,elementID,powerType,value1,value2)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      elementID - string
        %      powerType - numeric scalar (XML short)
        %      value1 - numeric scalar (XML double)
        %      value2 - numeric scalar (XML double)
        %    Output:
        %      AssignPowerTo1PortByIDResult - logical or numeric scalar (XML boolean)
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, elementID = []; end
            if nargin < 4, powerType = []; end
            if nargin < 5, value1 = []; end
            if nargin < 6, value2 = []; end
            ret = matlab.internal.callJava('assignPowerTo1PortByID',obj.PortObj,project,...
                fromMATLAB({'AssignPowerTo1PortByID','elementID'}, elementID,'string',true,false),...
                fromMATLAB({'AssignPowerTo1PortByID','powerType'}, powerType,'short',true,false),...
                fromMATLAB({'AssignPowerTo1PortByID','value1'}, value1,'double',true,false),...
                fromMATLAB({'AssignPowerTo1PortByID','value2'}, value2,'double',true,false));
            AssignPowerTo1PortByIDResult = toMATLAB(ret,'boolean',false);

        end

        function SwitchElementAtPortByID(obj,elementID,portNr,isConnected)
        %SwitchElementAtPortByID  
        %  SwitchElementAtPortByID(obj,elementID,portNr,isConnected)  
        %    Inputs:
        %      obj - NeplanService object
        %      elementID - string
        %      portNr - numeric scalar (XML short)
        %      isConnected - logical or numeric scalar (XML boolean)
        %    Output:
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, elementID = []; end
            if nargin < 3, portNr = []; end
            if nargin < 4, isConnected = []; end
            obj.PortObj.switchElementAtPortByID(fromMATLAB({'SwitchElementAtPortByID','elementID'}, elementID,'string',true,false),...
                fromMATLAB({'SwitchElementAtPortByID','portNr'}, portNr,'short',true,false),...
                fromMATLAB({'SwitchElementAtPortByID','isConnected'}, isConnected,'boolean',true,false));

        end

        function SwitchElementAtPort(obj,project,elementName,elementTypeName,portNr,isConnected)
        %SwitchElementAtPort  
        %  SwitchElementAtPort(obj,project,elementName,elementTypeName,portNr,isConnected)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      elementName - string
        %      elementTypeName - string
        %      portNr - numeric scalar (XML short)
        %      isConnected - logical or numeric scalar (XML boolean)
        %    Output:
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, elementName = []; end
            if nargin < 4, elementTypeName = []; end
            if nargin < 5, portNr = []; end
            if nargin < 6, isConnected = []; end
            obj.PortObj.switchElementAtPort(project,...
                fromMATLAB({'SwitchElementAtPort','elementName'}, elementName,'string',true,false),...
                fromMATLAB({'SwitchElementAtPort','elementTypeName'}, elementTypeName,'string',true,false),...
                fromMATLAB({'SwitchElementAtPort','portNr'}, portNr,'short',true,false),...
                fromMATLAB({'SwitchElementAtPort','isConnected'}, isConnected,'boolean',true,false));

        end

        function SetElementData(obj,project,elementName,elementTypeName,aliasName1,aliasName2,description,isInMaintenance,IsProjected,zoneGuid,subAreaGuid)
        %SetElementData  
        %  SetElementData(obj,project,elementName,elementTypeName,aliasName1,aliasName2,description,isInMaintenance,IsProjected,zoneGuid,subAreaGuid)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      elementName - string
        %      elementTypeName - string
        %      aliasName1 - string
        %      aliasName2 - string
        %      description - string
        %      isInMaintenance - logical or numeric scalar (XML boolean)
        %      IsProjected - logical or numeric scalar (XML boolean)
        %      zoneGuid - string
        %      subAreaGuid - string
        %    Output:
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, elementName = []; end
            if nargin < 4, elementTypeName = []; end
            if nargin < 5, aliasName1 = []; end
            if nargin < 6, aliasName2 = []; end
            if nargin < 7, description = []; end
            if nargin < 8, isInMaintenance = []; end
            if nargin < 9, IsProjected = []; end
            if nargin < 10, zoneGuid = []; end
            if nargin < 11, subAreaGuid = []; end
            obj.PortObj.setElementData(project,...
                fromMATLAB({'SetElementData','elementName'}, elementName,'string',true,false),...
                fromMATLAB({'SetElementData','elementTypeName'}, elementTypeName,'string',true,false),...
                fromMATLAB({'SetElementData','aliasName1'}, aliasName1,'string',true,false),...
                fromMATLAB({'SetElementData','aliasName2'}, aliasName2,'string',true,false),...
                fromMATLAB({'SetElementData','description'}, description,'string',true,false),...
                fromMATLAB({'SetElementData','isInMaintenance'}, isInMaintenance,'boolean',true,false),...
                fromMATLAB({'SetElementData','IsProjected'}, IsProjected,'boolean',true,false),...
                fromMATLAB({'SetElementData','zoneGuid'}, zoneGuid,'string',true,false),...
                fromMATLAB({'SetElementData','subAreaGuid'}, subAreaGuid,'string',true,false));

        end

        function SetElementDataByID(obj,elementID,elementTypeName,aliasName1,aliasName2,description,isInMaintenance,IsProjected,zoneGuid,subAreaGuid)
        %SetElementDataByID  
        %  SetElementDataByID(obj,elementID,elementTypeName,aliasName1,aliasName2,description,isInMaintenance,IsProjected,zoneGuid,subAreaGuid)  
        %    Inputs:
        %      obj - NeplanService object
        %      elementID - string
        %      elementTypeName - string
        %      aliasName1 - string
        %      aliasName2 - string
        %      description - string
        %      isInMaintenance - logical or numeric scalar (XML boolean)
        %      IsProjected - logical or numeric scalar (XML boolean)
        %      zoneGuid - string
        %      subAreaGuid - string
        %    Output:
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, elementID = []; end
            if nargin < 3, elementTypeName = []; end
            if nargin < 4, aliasName1 = []; end
            if nargin < 5, aliasName2 = []; end
            if nargin < 6, description = []; end
            if nargin < 7, isInMaintenance = []; end
            if nargin < 8, IsProjected = []; end
            if nargin < 9, zoneGuid = []; end
            if nargin < 10, subAreaGuid = []; end
            obj.PortObj.setElementDataByID(fromMATLAB({'SetElementDataByID','elementID'}, elementID,'string',true,false),...
                fromMATLAB({'SetElementDataByID','elementTypeName'}, elementTypeName,'string',true,false),...
                fromMATLAB({'SetElementDataByID','aliasName1'}, aliasName1,'string',true,false),...
                fromMATLAB({'SetElementDataByID','aliasName2'}, aliasName2,'string',true,false),...
                fromMATLAB({'SetElementDataByID','description'}, description,'string',true,false),...
                fromMATLAB({'SetElementDataByID','isInMaintenance'}, isInMaintenance,'boolean',true,false),...
                fromMATLAB({'SetElementDataByID','IsProjected'}, IsProjected,'boolean',true,false),...
                fromMATLAB({'SetElementDataByID','zoneGuid'}, zoneGuid,'string',true,false),...
                fromMATLAB({'SetElementDataByID','subAreaGuid'}, subAreaGuid,'string',true,false));

        end

        function [elementID,aliasName1,aliasName2,description,isInMaintenance,IsProjected,zoneGuid,subAreaGuid] = GetElementDataByNameandType(obj,project,elementName,elementTypeName,elementID,aliasName1,aliasName2,description,isInMaintenance,IsProjected,zoneGuid,subAreaGuid)
        %GetElementDataByNameandType  
        %  [elementID,aliasName1,aliasName2,description,isInMaintenance,IsProjected,zoneGuid,subAreaGuid] = GetElementDataByNameandType(obj,project,elementName,elementTypeName,elementID,aliasName1,aliasName2,description,isInMaintenance,IsProjected,zoneGuid,subAreaGuid)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      elementName - string
        %      elementTypeName - string
        %      elementID - <a href="matlab:doc wsdl.neplanservice.string">string</a> object
        %      aliasName1 - string
        %      aliasName2 - string
        %      description - string
        %      isInMaintenance - logical or numeric scalar (XML boolean)
        %      IsProjected - logical or numeric scalar (XML boolean)
        %      zoneGuid - string
        %      subAreaGuid - string
        %    Outputs:
        %      elementID - <a href="matlab:doc wsdl.neplanservice.string">string</a> object
        %      aliasName1 - string
        %      aliasName2 - string
        %      description - string
        %      isInMaintenance - logical or numeric scalar (XML boolean)
        %      IsProjected - logical or numeric scalar (XML boolean)
        %      zoneGuid - string
        %      subAreaGuid - string
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, elementName = []; end
            if nargin < 4, elementTypeName = []; end
            if nargin < 5, elementID = []; end
            if ~isempty(elementID), elementID = elementID.getObj; end
            if nargin < 6, aliasName1 = []; end
            if nargin < 7, aliasName2 = []; end
            if nargin < 8, description = []; end
            if nargin < 9, isInMaintenance = []; end
            if nargin < 10, IsProjected = []; end
            if nargin < 11, zoneGuid = []; end
            if nargin < 12, subAreaGuid = []; end
            if nargin < 5
                elementID_Holder = javax.xml.ws.Holder;
            else
                elementID_Holder = javax.xml.ws.Holder(elementID);
            end
            if nargin < 6
                aliasName1_Holder = javax.xml.ws.Holder;
            else
                aliasName1_Holder = javax.xml.ws.Holder(fromMATLAB({'GetElementDataByNameandType','aliasName1'}, aliasName1,'string',true,false));
            end
            if nargin < 7
                aliasName2_Holder = javax.xml.ws.Holder;
            else
                aliasName2_Holder = javax.xml.ws.Holder(fromMATLAB({'GetElementDataByNameandType','aliasName2'}, aliasName2,'string',true,false));
            end
            if nargin < 8
                description_Holder = javax.xml.ws.Holder;
            else
                description_Holder = javax.xml.ws.Holder(fromMATLAB({'GetElementDataByNameandType','description'}, description,'string',true,false));
            end
            if nargin < 9
                isInMaintenance_Holder = javax.xml.ws.Holder;
            else
                isInMaintenance_Holder = javax.xml.ws.Holder(fromMATLAB({'GetElementDataByNameandType','isInMaintenance'}, isInMaintenance,'boolean',true,false));
            end
            if nargin < 10
                IsProjected_Holder = javax.xml.ws.Holder;
            else
                IsProjected_Holder = javax.xml.ws.Holder(fromMATLAB({'GetElementDataByNameandType','IsProjected'}, IsProjected,'boolean',true,false));
            end
            if nargin < 11
                zoneGuid_Holder = javax.xml.ws.Holder;
            else
                zoneGuid_Holder = javax.xml.ws.Holder(fromMATLAB({'GetElementDataByNameandType','zoneGuid'}, zoneGuid,'string',true,false));
            end
            if nargin < 12
                subAreaGuid_Holder = javax.xml.ws.Holder;
            else
                subAreaGuid_Holder = javax.xml.ws.Holder(fromMATLAB({'GetElementDataByNameandType','subAreaGuid'}, subAreaGuid,'string',true,false));
            end
            matlab.internal.callJava('getElementDataByNameandType',obj.PortObj,project,...
                fromMATLAB({'GetElementDataByNameandType','elementName'}, elementName,'string',true,false),...
                fromMATLAB({'GetElementDataByNameandType','elementTypeName'}, elementTypeName,'string',true,false),...
                elementID_Holder,...
                aliasName1_Holder,...
                aliasName2_Holder,...
                description_Holder,...
                isInMaintenance_Holder,...
                IsProjected_Holder,...
                zoneGuid_Holder,...
                subAreaGuid_Holder);
            ret = elementID_Holder.value;
            elementID = wsdl.neplanservice.string.getInstance(ret,false);
            ret = aliasName1_Holder.value;
            aliasName1 = toMATLAB(ret,'string',false);
            ret = aliasName2_Holder.value;
            aliasName2 = toMATLAB(ret,'string',false);
            ret = description_Holder.value;
            description = toMATLAB(ret,'string',false);
            ret = isInMaintenance_Holder.value;
            isInMaintenance = toMATLAB(ret,'boolean',false);
            ret = IsProjected_Holder.value;
            IsProjected = toMATLAB(ret,'boolean',false);
            ret = zoneGuid_Holder.value;
            zoneGuid = toMATLAB(ret,'string',false);
            ret = subAreaGuid_Holder.value;
            subAreaGuid = toMATLAB(ret,'string',false);

        end

        function [elementName,aliasName1,aliasName2,description,isInMaintenance,IsProjected,zoneGuid,subAreaGuid] = GetElementDataByIDandType(obj,project,elementID,elementTypeName,elementName,aliasName1,aliasName2,description,isInMaintenance,IsProjected,zoneGuid,subAreaGuid)
        %GetElementDataByIDandType  
        %  [elementName,aliasName1,aliasName2,description,isInMaintenance,IsProjected,zoneGuid,subAreaGuid] = GetElementDataByIDandType(obj,project,elementID,elementTypeName,elementName,aliasName1,aliasName2,description,isInMaintenance,IsProjected,zoneGuid,subAreaGuid)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      elementID - <a href="matlab:doc wsdl.neplanservice.string">string</a> object
        %      elementTypeName - string
        %      elementName - string
        %      aliasName1 - string
        %      aliasName2 - string
        %      description - string
        %      isInMaintenance - logical or numeric scalar (XML boolean)
        %      IsProjected - logical or numeric scalar (XML boolean)
        %      zoneGuid - string
        %      subAreaGuid - string
        %    Outputs:
        %      elementName - string
        %      aliasName1 - string
        %      aliasName2 - string
        %      description - string
        %      isInMaintenance - logical or numeric scalar (XML boolean)
        %      IsProjected - logical or numeric scalar (XML boolean)
        %      zoneGuid - string
        %      subAreaGuid - string
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, elementID = []; end
            if ~isempty(elementID), elementID = elementID.getObj; end
            if nargin < 4, elementTypeName = []; end
            if nargin < 5, elementName = []; end
            if nargin < 6, aliasName1 = []; end
            if nargin < 7, aliasName2 = []; end
            if nargin < 8, description = []; end
            if nargin < 9, isInMaintenance = []; end
            if nargin < 10, IsProjected = []; end
            if nargin < 11, zoneGuid = []; end
            if nargin < 12, subAreaGuid = []; end
            if nargin < 5
                elementName_Holder = javax.xml.ws.Holder;
            else
                elementName_Holder = javax.xml.ws.Holder(fromMATLAB({'GetElementDataByIDandType','elementName'}, elementName,'string',true,false));
            end
            if nargin < 6
                aliasName1_Holder = javax.xml.ws.Holder;
            else
                aliasName1_Holder = javax.xml.ws.Holder(fromMATLAB({'GetElementDataByIDandType','aliasName1'}, aliasName1,'string',true,false));
            end
            if nargin < 7
                aliasName2_Holder = javax.xml.ws.Holder;
            else
                aliasName2_Holder = javax.xml.ws.Holder(fromMATLAB({'GetElementDataByIDandType','aliasName2'}, aliasName2,'string',true,false));
            end
            if nargin < 8
                description_Holder = javax.xml.ws.Holder;
            else
                description_Holder = javax.xml.ws.Holder(fromMATLAB({'GetElementDataByIDandType','description'}, description,'string',true,false));
            end
            if nargin < 9
                isInMaintenance_Holder = javax.xml.ws.Holder;
            else
                isInMaintenance_Holder = javax.xml.ws.Holder(fromMATLAB({'GetElementDataByIDandType','isInMaintenance'}, isInMaintenance,'boolean',true,false));
            end
            if nargin < 10
                IsProjected_Holder = javax.xml.ws.Holder;
            else
                IsProjected_Holder = javax.xml.ws.Holder(fromMATLAB({'GetElementDataByIDandType','IsProjected'}, IsProjected,'boolean',true,false));
            end
            if nargin < 11
                zoneGuid_Holder = javax.xml.ws.Holder;
            else
                zoneGuid_Holder = javax.xml.ws.Holder(fromMATLAB({'GetElementDataByIDandType','zoneGuid'}, zoneGuid,'string',true,false));
            end
            if nargin < 12
                subAreaGuid_Holder = javax.xml.ws.Holder;
            else
                subAreaGuid_Holder = javax.xml.ws.Holder(fromMATLAB({'GetElementDataByIDandType','subAreaGuid'}, subAreaGuid,'string',true,false));
            end
            matlab.internal.callJava('getElementDataByIDandType',obj.PortObj,project,...
                elementID,...
                fromMATLAB({'GetElementDataByIDandType','elementTypeName'}, elementTypeName,'string',true,false),...
                elementName_Holder,...
                aliasName1_Holder,...
                aliasName2_Holder,...
                description_Holder,...
                isInMaintenance_Holder,...
                IsProjected_Holder,...
                zoneGuid_Holder,...
                subAreaGuid_Holder);
            ret = elementName_Holder.value;
            elementName = toMATLAB(ret,'string',false);
            ret = aliasName1_Holder.value;
            aliasName1 = toMATLAB(ret,'string',false);
            ret = aliasName2_Holder.value;
            aliasName2 = toMATLAB(ret,'string',false);
            ret = description_Holder.value;
            description = toMATLAB(ret,'string',false);
            ret = isInMaintenance_Holder.value;
            isInMaintenance = toMATLAB(ret,'boolean',false);
            ret = IsProjected_Holder.value;
            IsProjected = toMATLAB(ret,'boolean',false);
            ret = zoneGuid_Holder.value;
            zoneGuid = toMATLAB(ret,'string',false);
            ret = subAreaGuid_Holder.value;
            subAreaGuid = toMATLAB(ret,'string',false);

        end

        function SetElementAttributeResult = SetElementAttribute(obj,project,elementName,elementType,attributeName,attributeValue)
        %SetElementAttribute  
        %  SetElementAttributeResult = SetElementAttribute(obj,project,elementName,elementType,attributeName,attributeValue)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      elementName - string
        %      elementType - string
        %      attributeName - string
        %      attributeValue - string
        %    Output:
        %      SetElementAttributeResult - logical or numeric scalar (XML boolean)
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, elementName = []; end
            if nargin < 4, elementType = []; end
            if nargin < 5, attributeName = []; end
            if nargin < 6, attributeValue = []; end
            ret = matlab.internal.callJava('setElementAttribute',obj.PortObj,project,...
                fromMATLAB({'SetElementAttribute','elementName'}, elementName,'string',true,false),...
                fromMATLAB({'SetElementAttribute','elementType'}, elementType,'string',true,false),...
                fromMATLAB({'SetElementAttribute','attributeName'}, attributeName,'string',true,false),...
                fromMATLAB({'SetElementAttribute','attributeValue'}, attributeValue,'string',true,false));
            SetElementAttributeResult = toMATLAB(ret,'boolean',false);

        end

        function SetElementAttributeByIDResult = SetElementAttributeByID(obj,project,elementID,attributeName,attributeValue)
        %SetElementAttributeByID  
        %  SetElementAttributeByIDResult = SetElementAttributeByID(obj,project,elementID,attributeName,attributeValue)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      elementID - string
        %      attributeName - string
        %      attributeValue - string
        %    Output:
        %      SetElementAttributeByIDResult - logical or numeric scalar (XML boolean)
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, elementID = []; end
            if nargin < 4, attributeName = []; end
            if nargin < 5, attributeValue = []; end
            ret = matlab.internal.callJava('setElementAttributeByID',obj.PortObj,project,...
                fromMATLAB({'SetElementAttributeByID','elementID'}, elementID,'string',true,false),...
                fromMATLAB({'SetElementAttributeByID','attributeName'}, attributeName,'string',true,false),...
                fromMATLAB({'SetElementAttributeByID','attributeValue'}, attributeValue,'string',true,false));
            SetElementAttributeByIDResult = toMATLAB(ret,'boolean',false);

        end

        function [GetElementAttributeByIDResult,attributeValue] = GetElementAttributeByID(obj,projectName,elementID,attributeName,attributeValue)
        %GetElementAttributeByID  
        %  [GetElementAttributeByIDResult,attributeValue] = GetElementAttributeByID(obj,projectName,elementID,attributeName,attributeValue)  
        %    Inputs:
        %      obj - NeplanService object
        %      projectName - string
        %      elementID - string
        %      attributeName - string
        %      attributeValue - string
        %    Outputs:
        %      GetElementAttributeByIDResult - logical or numeric scalar (XML boolean)
        %      attributeValue - string
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, projectName = []; end
            if nargin < 3, elementID = []; end
            if nargin < 4, attributeName = []; end
            if nargin < 5, attributeValue = []; end
            GetElementAttributeByIDResult_Holder = javax.xml.ws.Holder;
            if nargin < 5
                attributeValue_Holder = javax.xml.ws.Holder;
            else
                attributeValue_Holder = javax.xml.ws.Holder(fromMATLAB({'GetElementAttributeByID','attributeValue'}, attributeValue,'string',true,false));
            end
            matlab.internal.callJava('getElementAttributeByID',obj.PortObj,fromMATLAB({'GetElementAttributeByID','projectName'}, projectName,'string',true,false),...
                fromMATLAB({'GetElementAttributeByID','elementID'}, elementID,'string',true,false),...
                fromMATLAB({'GetElementAttributeByID','attributeName'}, attributeName,'string',true,false),...
                attributeValue_Holder,...
                GetElementAttributeByIDResult_Holder);
            ret = GetElementAttributeByIDResult_Holder.value;
            GetElementAttributeByIDResult = toMATLAB(ret,'boolean',false);
            ret = attributeValue_Holder.value;
            attributeValue = toMATLAB(ret,'string',false);

        end

        function [GetElementAttributeByNameResult,attributeValue] = GetElementAttributeByName(obj,projectName,elementName,elementType,attributeName,attributeValue)
        %GetElementAttributeByName  
        %  [GetElementAttributeByNameResult,attributeValue] = GetElementAttributeByName(obj,projectName,elementName,elementType,attributeName,attributeValue)  
        %    Inputs:
        %      obj - NeplanService object
        %      projectName - string
        %      elementName - string
        %      elementType - string
        %      attributeName - string
        %      attributeValue - string
        %    Outputs:
        %      GetElementAttributeByNameResult - logical or numeric scalar (XML boolean)
        %      attributeValue - string
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, projectName = []; end
            if nargin < 3, elementName = []; end
            if nargin < 4, elementType = []; end
            if nargin < 5, attributeName = []; end
            if nargin < 6, attributeValue = []; end
            GetElementAttributeByNameResult_Holder = javax.xml.ws.Holder;
            if nargin < 6
                attributeValue_Holder = javax.xml.ws.Holder;
            else
                attributeValue_Holder = javax.xml.ws.Holder(fromMATLAB({'GetElementAttributeByName','attributeValue'}, attributeValue,'string',true,false));
            end
            matlab.internal.callJava('getElementAttributeByName',obj.PortObj,fromMATLAB({'GetElementAttributeByName','projectName'}, projectName,'string',true,false),...
                fromMATLAB({'GetElementAttributeByName','elementName'}, elementName,'string',true,false),...
                fromMATLAB({'GetElementAttributeByName','elementType'}, elementType,'string',true,false),...
                fromMATLAB({'GetElementAttributeByName','attributeName'}, attributeName,'string',true,false),...
                attributeValue_Holder,...
                GetElementAttributeByNameResult_Holder);
            ret = GetElementAttributeByNameResult_Holder.value;
            GetElementAttributeByNameResult = toMATLAB(ret,'boolean',false);
            ret = attributeValue_Holder.value;
            attributeValue = toMATLAB(ret,'string',false);

        end

        function AddReadAllRoleToProjectResult = AddReadAllRoleToProject(obj,project)
        %AddReadAllRoleToProject  
        %  AddReadAllRoleToProjectResult = AddReadAllRoleToProject(obj,project)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %    Output:
        %      AddReadAllRoleToProjectResult - logical or numeric scalar (XML boolean)
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            ret = matlab.internal.callJava('addReadAllRoleToProject',obj.PortObj,project);
            AddReadAllRoleToProjectResult = toMATLAB(ret,'boolean',false);

        end

        function AddVoltageLevelResult = AddVoltageLevel(obj,project,un,colorR,colorG,colorB)
        %AddVoltageLevel  
        %  AddVoltageLevelResult = AddVoltageLevel(obj,project,un,colorR,colorG,colorB)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      un - numeric scalar (XML double)
        %      colorR - numeric scalar (XML int)
        %      colorG - numeric scalar (XML int)
        %      colorB - numeric scalar (XML int)
        %    Output:
        %      AddVoltageLevelResult - string
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, un = []; end
            if nargin < 4, colorR = []; end
            if nargin < 5, colorG = []; end
            if nargin < 6, colorB = []; end
            ret = matlab.internal.callJava('addVoltageLevel',obj.PortObj,project,...
                fromMATLAB({'AddVoltageLevel','un'}, un,'double',true,false),...
                fromMATLAB({'AddVoltageLevel','colorR'}, colorR,'int',true,false),...
                fromMATLAB({'AddVoltageLevel','colorG'}, colorG,'int',true,false),...
                fromMATLAB({'AddVoltageLevel','colorB'}, colorB,'int',true,false));
            AddVoltageLevelResult = toMATLAB(ret,'string',false);

        end

        function SetDiagramMinValues(obj,project,xMin,yMin,units,factorXY,angle)
        %SetDiagramMinValues  
        %  SetDiagramMinValues(obj,project,xMin,yMin,units,factorXY,angle)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      xMin - numeric scalar (XML double)
        %      yMin - numeric scalar (XML double)
        %      units - numeric scalar (XML short)
        %      factorXY - numeric scalar (XML double)
        %      angle - numeric scalar (XML double)
        %    Output:
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, xMin = []; end
            if nargin < 4, yMin = []; end
            if nargin < 5, units = []; end
            if nargin < 6, factorXY = []; end
            if nargin < 7, angle = []; end
            obj.PortObj.setDiagramMinValues(project,...
                fromMATLAB({'SetDiagramMinValues','xMin'}, xMin,'double',true,false),...
                fromMATLAB({'SetDiagramMinValues','yMin'}, yMin,'double',true,false),...
                fromMATLAB({'SetDiagramMinValues','units'}, units,'short',true,false),...
                fromMATLAB({'SetDiagramMinValues','factorXY'}, factorXY,'double',true,false),...
                fromMATLAB({'SetDiagramMinValues','angle'}, angle,'double',true,false));

        end

        function SetLineStyleResult = SetLineStyle(obj,project,lineType,lineStyle)
        %SetLineStyle  
        %  SetLineStyleResult = SetLineStyle(obj,project,lineType,lineStyle)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      lineType - string
        %      lineStyle - numeric scalar (XML short)
        %    Output:
        %      SetLineStyleResult - logical or numeric scalar (XML boolean)
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, lineType = []; end
            if nargin < 4, lineStyle = []; end
            ret = matlab.internal.callJava('setLineStyle',obj.PortObj,project,...
                fromMATLAB({'SetLineStyle','lineType'}, lineType,'string',true,false),...
                fromMATLAB({'SetLineStyle','lineStyle'}, lineStyle,'short',true,false));
            SetLineStyleResult = toMATLAB(ret,'boolean',false);

        end

        function [SetDefaultValuesResult,project] = SetDefaultValues(obj,project,defaultType,phaseDomination,isAnsi)
        %SetDefaultValues  
        %  [SetDefaultValuesResult,project] = SetDefaultValues(obj,project,defaultType,phaseDomination,isAnsi)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      defaultType - numeric scalar (XML short)
        %      phaseDomination - numeric scalar (XML short)
        %      isAnsi - logical or numeric scalar (XML boolean)
        %    Outputs:
        %      SetDefaultValuesResult - logical or numeric scalar (XML boolean)
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, defaultType = []; end
            if nargin < 4, phaseDomination = []; end
            if nargin < 5, isAnsi = []; end
            SetDefaultValuesResult_Holder = javax.xml.ws.Holder;
            if nargin < 2
                project_Holder = javax.xml.ws.Holder;
            else
                project_Holder = javax.xml.ws.Holder(project);
            end
            matlab.internal.callJava('setDefaultValues',obj.PortObj,project_Holder,...
                fromMATLAB({'SetDefaultValues','defaultType'}, defaultType,'short',true,false),...
                fromMATLAB({'SetDefaultValues','phaseDomination'}, phaseDomination,'short',true,false),...
                fromMATLAB({'SetDefaultValues','isAnsi'}, isAnsi,'boolean',true,false),...
                SetDefaultValuesResult_Holder);
            ret = SetDefaultValuesResult_Holder.value;
            SetDefaultValuesResult = toMATLAB(ret,'boolean',false);
            ret = project_Holder.value;
            project = wsdl.neplanservice.ExternalProject.getInstance(ret,false);

        end

        function SetDiagramParameterAttributeResult = SetDiagramParameterAttribute(obj,project,parameterType,attributeName,attributeValue)
        %SetDiagramParameterAttribute  
        %  SetDiagramParameterAttributeResult = SetDiagramParameterAttribute(obj,project,parameterType,attributeName,attributeValue)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      parameterType - string
        %      attributeName - string
        %      attributeValue - string
        %    Output:
        %      SetDiagramParameterAttributeResult - logical or numeric scalar (XML boolean)
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, parameterType = []; end
            if nargin < 4, attributeName = []; end
            if nargin < 5, attributeValue = []; end
            ret = matlab.internal.callJava('setDiagramParameterAttribute',obj.PortObj,project,...
                fromMATLAB({'SetDiagramParameterAttribute','parameterType'}, parameterType,'string',true,false),...
                fromMATLAB({'SetDiagramParameterAttribute','attributeName'}, attributeName,'string',true,false),...
                fromMATLAB({'SetDiagramParameterAttribute','attributeValue'}, attributeValue,'string',true,false));
            SetDiagramParameterAttributeResult = toMATLAB(ret,'boolean',false);

        end

        function SetCalcParameterAttributeResult = SetCalcParameterAttribute(obj,project,parameterType,attributeName,attributeValue)
        %SetCalcParameterAttribute  
        %  SetCalcParameterAttributeResult = SetCalcParameterAttribute(obj,project,parameterType,attributeName,attributeValue)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      parameterType - string
        %      attributeName - string
        %      attributeValue - string
        %    Output:
        %      SetCalcParameterAttributeResult - logical or numeric scalar (XML boolean)
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, parameterType = []; end
            if nargin < 4, attributeName = []; end
            if nargin < 5, attributeValue = []; end
            ret = matlab.internal.callJava('setCalcParameterAttribute',obj.PortObj,project,...
                fromMATLAB({'SetCalcParameterAttribute','parameterType'}, parameterType,'string',true,false),...
                fromMATLAB({'SetCalcParameterAttribute','attributeName'}, attributeName,'string',true,false),...
                fromMATLAB({'SetCalcParameterAttribute','attributeValue'}, attributeValue,'string',true,false));
            SetCalcParameterAttributeResult = toMATLAB(ret,'boolean',false);

        end

        function SetGraphicLayerWorldCoordinatesResult = SetGraphicLayerWorldCoordinates(obj,project,isDirectionUpY,factor,angle,offsetZeroPoint)
        %SetGraphicLayerWorldCoordinates  
        %  SetGraphicLayerWorldCoordinatesResult = SetGraphicLayerWorldCoordinates(obj,project,isDirectionUpY,factor,angle,offsetZeroPoint)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      isDirectionUpY - logical or numeric scalar (XML boolean)
        %      factor - numeric scalar (XML double)
        %      angle - numeric scalar (XML double)
        %      offsetZeroPoint - numeric scalar (XML double)
        %    Output:
        %      SetGraphicLayerWorldCoordinatesResult - logical or numeric scalar (XML boolean)
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, isDirectionUpY = []; end
            if nargin < 4, factor = []; end
            if nargin < 5, angle = []; end
            if nargin < 6, offsetZeroPoint = []; end
            ret = matlab.internal.callJava('setGraphicLayerWorldCoordinates',obj.PortObj,project,...
                fromMATLAB({'SetGraphicLayerWorldCoordinates','isDirectionUpY'}, isDirectionUpY,'boolean',true,false),...
                fromMATLAB({'SetGraphicLayerWorldCoordinates','factor'}, factor,'double',true,false),...
                fromMATLAB({'SetGraphicLayerWorldCoordinates','angle'}, angle,'double',true,false),...
                fromMATLAB({'SetGraphicLayerWorldCoordinates','offsetZeroPoint'}, offsetZeroPoint,'double',true,false));
            SetGraphicLayerWorldCoordinatesResult = toMATLAB(ret,'boolean',false);

        end

        function [AddNodesFromListResult,project] = AddNodesFromList(obj,project,listElements)
        %AddNodesFromList  
        %  [AddNodesFromListResult,project] = AddNodesFromList(obj,project,listElements)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      listElements - <a href="matlab:doc wsdl.neplanservice.ArrayOfImportElementItem">ArrayOfImportElementItem</a> object
        %    Outputs:
        %      AddNodesFromListResult - logical or numeric scalar (XML boolean)
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, listElements = []; end
            if ~isempty(listElements), listElements = listElements.getObj; end
            AddNodesFromListResult_Holder = javax.xml.ws.Holder;
            if nargin < 2
                project_Holder = javax.xml.ws.Holder;
            else
                project_Holder = javax.xml.ws.Holder(project);
            end
            matlab.internal.callJava('addNodesFromList',obj.PortObj,project_Holder,...
                listElements,...
                AddNodesFromListResult_Holder);
            ret = AddNodesFromListResult_Holder.value;
            AddNodesFromListResult = toMATLAB(ret,'boolean',false);
            ret = project_Holder.value;
            project = wsdl.neplanservice.ExternalProject.getInstance(ret,false);

        end

        function [AddElementsFromListResult,project] = AddElementsFromList(obj,project,listElements,elementTypeName)
        %AddElementsFromList  
        %  [AddElementsFromListResult,project] = AddElementsFromList(obj,project,listElements,elementTypeName)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      listElements - <a href="matlab:doc wsdl.neplanservice.ArrayOfImportElementItem">ArrayOfImportElementItem</a> object
        %      elementTypeName - string
        %    Outputs:
        %      AddElementsFromListResult - logical or numeric scalar (XML boolean)
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, listElements = []; end
            if ~isempty(listElements), listElements = listElements.getObj; end
            if nargin < 4, elementTypeName = []; end
            AddElementsFromListResult_Holder = javax.xml.ws.Holder;
            if nargin < 2
                project_Holder = javax.xml.ws.Holder;
            else
                project_Holder = javax.xml.ws.Holder(project);
            end
            matlab.internal.callJava('addElementsFromList',obj.PortObj,project_Holder,...
                listElements,...
                fromMATLAB({'AddElementsFromList','elementTypeName'}, elementTypeName,'string',true,false),...
                AddElementsFromListResult_Holder);
            ret = AddElementsFromListResult_Holder.value;
            AddElementsFromListResult = toMATLAB(ret,'boolean',false);
            ret = project_Holder.value;
            project = wsdl.neplanservice.ExternalProject.getInstance(ret,false);

        end

        function [AddSubLoadsFromListResult,project] = AddSubLoadsFromList(obj,project,listLoadData,loadID)
        %AddSubLoadsFromList  
        %  [AddSubLoadsFromListResult,project] = AddSubLoadsFromList(obj,project,listLoadData,loadID)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      listLoadData - <a href="matlab:doc wsdl.neplanservice.ArrayOfLoadData">ArrayOfLoadData</a> object
        %      loadID - string
        %    Outputs:
        %      AddSubLoadsFromListResult - logical or numeric scalar (XML boolean)
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, listLoadData = []; end
            if ~isempty(listLoadData), listLoadData = listLoadData.getObj; end
            if nargin < 4, loadID = []; end
            AddSubLoadsFromListResult_Holder = javax.xml.ws.Holder;
            if nargin < 2
                project_Holder = javax.xml.ws.Holder;
            else
                project_Holder = javax.xml.ws.Holder(project);
            end
            matlab.internal.callJava('addSubLoadsFromList',obj.PortObj,project_Holder,...
                listLoadData,...
                fromMATLAB({'AddSubLoadsFromList','loadID'}, loadID,'string',true,false),...
                AddSubLoadsFromListResult_Holder);
            ret = AddSubLoadsFromListResult_Holder.value;
            AddSubLoadsFromListResult = toMATLAB(ret,'boolean',false);
            ret = project_Holder.value;
            project = wsdl.neplanservice.ExternalProject.getInstance(ret,false);

        end

        function SetDateTimeLastSave(obj,project)
        %SetDateTimeLastSave  
        %  SetDateTimeLastSave(obj,project)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %    Output:
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            obj.PortObj.setDateTimeLastSave(project);

        end

        function GetResultSummaryResult = GetResultSummary(obj,project,analysisType,simulationDateTime,networkTypeGroup,networkTypeGroupID)
        %GetResultSummary  
        %  GetResultSummaryResult = GetResultSummary(obj,project,analysisType,simulationDateTime,networkTypeGroup,networkTypeGroupID)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      analysisType - string
        %      simulationDateTime - datetime object (XML dateTime)
        %      networkTypeGroup - numeric scalar (XML int)
        %      networkTypeGroupID - string
        %    Output:
        %      GetResultSummaryResult - string
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, analysisType = []; end
            if nargin < 4, simulationDateTime = []; end
            if nargin < 5, networkTypeGroup = []; end
            if nargin < 6, networkTypeGroupID = []; end
            ret = matlab.internal.callJava('getResultSummary',obj.PortObj,project,...
                fromMATLAB({'GetResultSummary','analysisType'}, analysisType,'string',true,false),...
                fromMATLAB({'GetResultSummary','simulationDateTime'}, simulationDateTime,'dateTime',true,false),...
                fromMATLAB({'GetResultSummary','networkTypeGroup'}, networkTypeGroup,'int',true,false),...
                fromMATLAB({'GetResultSummary','networkTypeGroupID'}, networkTypeGroupID,'string',true,false));
            GetResultSummaryResult = toMATLAB(ret,'string',false);

        end

        function GetListResultSummaryResult = GetListResultSummary(obj,project,analysisType,simulationDateTime,networkTypeGroup,networkTypeGroupID)
        %GetListResultSummary  
        %  GetListResultSummaryResult = GetListResultSummary(obj,project,analysisType,simulationDateTime,networkTypeGroup,networkTypeGroupID)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      analysisType - string
        %      simulationDateTime - datetime object (XML dateTime)
        %      networkTypeGroup - numeric scalar (XML int)
        %      networkTypeGroupID - string
        %    Output:
        %      GetListResultSummaryResult - <a href="matlab:doc wsdl.neplanservice.ArrayOfstring">ArrayOfstring</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, analysisType = []; end
            if nargin < 4, simulationDateTime = []; end
            if nargin < 5, networkTypeGroup = []; end
            if nargin < 6, networkTypeGroupID = []; end
            ret = matlab.internal.callJava('getListResultSummary',obj.PortObj,project,...
                fromMATLAB({'GetListResultSummary','analysisType'}, analysisType,'string',true,false),...
                fromMATLAB({'GetListResultSummary','simulationDateTime'}, simulationDateTime,'dateTime',true,false),...
                fromMATLAB({'GetListResultSummary','networkTypeGroup'}, networkTypeGroup,'int',true,false),...
                fromMATLAB({'GetListResultSummary','networkTypeGroupID'}, networkTypeGroupID,'string',true,false));
            GetListResultSummaryResult = wsdl.neplanservice.ArrayOfstring.getInstance(ret,false);

        end

        function GetAllElementResultsResult = GetAllElementResults(obj,project,analysisType)
        %GetAllElementResults  
        %  GetAllElementResultsResult = GetAllElementResults(obj,project,analysisType)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      analysisType - string
        %    Output:
        %      GetAllElementResultsResult - <a href="matlab:doc wsdl.neplanservice.ArrayOfNeplanServiceElementResult">ArrayOfNeplanServiceElementResult</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, analysisType = []; end
            ret = matlab.internal.callJava('getAllElementResults',obj.PortObj,project,...
                fromMATLAB({'GetAllElementResults','analysisType'}, analysisType,'string',true,false));
            GetAllElementResultsResult = wsdl.neplanservice.ArrayOfNeplanServiceElementResult.getInstance(ret,false);

        end

        function GetCalculationSettingsResult = GetCalculationSettings(obj,project,analysisType)
        %GetCalculationSettings  
        %  GetCalculationSettingsResult = GetCalculationSettings(obj,project,analysisType)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      analysisType - string
        %    Output:
        %      GetCalculationSettingsResult - string
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, analysisType = []; end
            ret = matlab.internal.callJava('getCalculationSettings',obj.PortObj,project,...
                fromMATLAB({'GetCalculationSettings','analysisType'}, analysisType,'string',true,false));
            GetCalculationSettingsResult = toMATLAB(ret,'string',false);

        end

        function GetResultElementByIDResult = GetResultElementByID(obj,project,elementID,portNr,analysisType,simulationDateTime)
        %GetResultElementByID  
        %  GetResultElementByIDResult = GetResultElementByID(obj,project,elementID,portNr,analysisType,simulationDateTime)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      elementID - string
        %      portNr - numeric scalar (XML int)
        %      analysisType - string
        %      simulationDateTime - datetime object (XML dateTime)
        %    Output:
        %      GetResultElementByIDResult - string
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, elementID = []; end
            if nargin < 4, portNr = []; end
            if nargin < 5, analysisType = []; end
            if nargin < 6, simulationDateTime = []; end
            ret = matlab.internal.callJava('getResultElementByID',obj.PortObj,project,...
                fromMATLAB({'GetResultElementByID','elementID'}, elementID,'string',true,false),...
                fromMATLAB({'GetResultElementByID','portNr'}, portNr,'int',true,false),...
                fromMATLAB({'GetResultElementByID','analysisType'}, analysisType,'string',true,false),...
                fromMATLAB({'GetResultElementByID','simulationDateTime'}, simulationDateTime,'dateTime',true,false));
            GetResultElementByIDResult = toMATLAB(ret,'string',false);

        end

        function GetResultsElementsByIDResult = GetResultsElementsByID(obj,project,elementID,portNr,analysisType,simulationDateTime)
        %GetResultsElementsByID  
        %  GetResultsElementsByIDResult = GetResultsElementsByID(obj,project,elementID,portNr,analysisType,simulationDateTime)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      elementID - <a href="matlab:doc wsdl.neplanservice.ArrayOfstring">ArrayOfstring</a> object
        %      portNr - numeric scalar (XML int)
        %      analysisType - string
        %      simulationDateTime - datetime object (XML dateTime)
        %    Output:
        %      GetResultsElementsByIDResult - <a href="matlab:doc wsdl.neplanservice.ArrayOfNeplanServiceElementResult">ArrayOfNeplanServiceElementResult</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, elementID = []; end
            if ~isempty(elementID), elementID = elementID.getObj; end
            if nargin < 4, portNr = []; end
            if nargin < 5, analysisType = []; end
            if nargin < 6, simulationDateTime = []; end
            ret = matlab.internal.callJava('getResultsElementsByID',obj.PortObj,project,...
                elementID,...
                fromMATLAB({'GetResultsElementsByID','portNr'}, portNr,'int',true,false),...
                fromMATLAB({'GetResultsElementsByID','analysisType'}, analysisType,'string',true,false),...
                fromMATLAB({'GetResultsElementsByID','simulationDateTime'}, simulationDateTime,'dateTime',true,false));
            GetResultsElementsByIDResult = wsdl.neplanservice.ArrayOfNeplanServiceElementResult.getInstance(ret,false);

        end

        function GetResultElementByNameResult = GetResultElementByName(obj,project,elementName,elementTypeName,portNr,analysisType,simulationDateTime)
        %GetResultElementByName  
        %  GetResultElementByNameResult = GetResultElementByName(obj,project,elementName,elementTypeName,portNr,analysisType,simulationDateTime)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      elementName - string
        %      elementTypeName - string
        %      portNr - numeric scalar (XML int)
        %      analysisType - string
        %      simulationDateTime - datetime object (XML dateTime)
        %    Output:
        %      GetResultElementByNameResult - string
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, elementName = []; end
            if nargin < 4, elementTypeName = []; end
            if nargin < 5, portNr = []; end
            if nargin < 6, analysisType = []; end
            if nargin < 7, simulationDateTime = []; end
            ret = matlab.internal.callJava('getResultElementByName',obj.PortObj,project,...
                fromMATLAB({'GetResultElementByName','elementName'}, elementName,'string',true,false),...
                fromMATLAB({'GetResultElementByName','elementTypeName'}, elementTypeName,'string',true,false),...
                fromMATLAB({'GetResultElementByName','portNr'}, portNr,'int',true,false),...
                fromMATLAB({'GetResultElementByName','analysisType'}, analysisType,'string',true,false),...
                fromMATLAB({'GetResultElementByName','simulationDateTime'}, simulationDateTime,'dateTime',true,false));
            GetResultElementByNameResult = toMATLAB(ret,'string',false);

        end

        function AnalyseVariantWithAnalysisSettingsResult = AnalyseVariantWithAnalysisSettings(obj,project,analysisRefenceID,analysisModule,calcNameID,analysisMethode,conditions,analysisLoadOptionXML,settings)
        %AnalyseVariantWithAnalysisSettings  
        %  AnalyseVariantWithAnalysisSettingsResult = AnalyseVariantWithAnalysisSettings(obj,project,analysisRefenceID,analysisModule,calcNameID,analysisMethode,conditions,analysisLoadOptionXML,settings)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      analysisRefenceID - string
        %      analysisModule - string
        %      calcNameID - string
        %      analysisMethode - string
        %      conditions - string
        %      analysisLoadOptionXML - string
        %      settings - <a href="matlab:doc wsdl.neplanservice.AnalysisParameterSettings">AnalysisParameterSettings</a> object
        %    Output:
        %      AnalyseVariantWithAnalysisSettingsResult - <a href="matlab:doc wsdl.neplanservice.AnalysisReturnInfo">AnalysisReturnInfo</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, analysisRefenceID = []; end
            if nargin < 4, analysisModule = []; end
            if nargin < 5, calcNameID = []; end
            if nargin < 6, analysisMethode = []; end
            if nargin < 7, conditions = []; end
            if nargin < 8, analysisLoadOptionXML = []; end
            if nargin < 9, settings = []; end
            if ~isempty(settings), settings = settings.getObj; end
            ret = matlab.internal.callJava('analyseVariantWithAnalysisSettings',obj.PortObj,project,...
                fromMATLAB({'AnalyseVariantWithAnalysisSettings','analysisRefenceID'}, analysisRefenceID,'string',true,false),...
                fromMATLAB({'AnalyseVariantWithAnalysisSettings','analysisModule'}, analysisModule,'string',true,false),...
                fromMATLAB({'AnalyseVariantWithAnalysisSettings','calcNameID'}, calcNameID,'string',true,false),...
                fromMATLAB({'AnalyseVariantWithAnalysisSettings','analysisMethode'}, analysisMethode,'string',true,false),...
                fromMATLAB({'AnalyseVariantWithAnalysisSettings','conditions'}, conditions,'string',true,false),...
                fromMATLAB({'AnalyseVariantWithAnalysisSettings','analysisLoadOptionXML'}, analysisLoadOptionXML,'string',true,false),...
                settings);
            AnalyseVariantWithAnalysisSettingsResult = wsdl.neplanservice.AnalysisReturnInfo.getInstance(ret,false);

        end

        function AnalyseVariantResult = AnalyseVariant(obj,project,analysisRefenceID,analysisModule,calcNameID,analysisMethode,conditions,analysisLoadOptionXML)
        %AnalyseVariant  
        %  AnalyseVariantResult = AnalyseVariant(obj,project,analysisRefenceID,analysisModule,calcNameID,analysisMethode,conditions,analysisLoadOptionXML)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      analysisRefenceID - string
        %      analysisModule - string
        %      calcNameID - string
        %      analysisMethode - string
        %      conditions - string
        %      analysisLoadOptionXML - string
        %    Output:
        %      AnalyseVariantResult - <a href="matlab:doc wsdl.neplanservice.AnalysisReturnInfo">AnalysisReturnInfo</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, analysisRefenceID = []; end
            if nargin < 4, analysisModule = []; end
            if nargin < 5, calcNameID = []; end
            if nargin < 6, analysisMethode = []; end
            if nargin < 7, conditions = []; end
            if nargin < 8, analysisLoadOptionXML = []; end
            ret = matlab.internal.callJava('analyseVariant',obj.PortObj,project,...
                fromMATLAB({'AnalyseVariant','analysisRefenceID'}, analysisRefenceID,'string',true,false),...
                fromMATLAB({'AnalyseVariant','analysisModule'}, analysisModule,'string',true,false),...
                fromMATLAB({'AnalyseVariant','calcNameID'}, calcNameID,'string',true,false),...
                fromMATLAB({'AnalyseVariant','analysisMethode'}, analysisMethode,'string',true,false),...
                fromMATLAB({'AnalyseVariant','conditions'}, conditions,'string',true,false),...
                fromMATLAB({'AnalyseVariant','analysisLoadOptionXML'}, analysisLoadOptionXML,'string',true,false));
            AnalyseVariantResult = wsdl.neplanservice.AnalysisReturnInfo.getInstance(ret,false);

        end

        function IsAnalysisDoneResult = IsAnalysisDone(obj,analysisRefenceID)
        %IsAnalysisDone  
        %  IsAnalysisDoneResult = IsAnalysisDone(obj,analysisRefenceID)  
        %    Inputs:
        %      obj - NeplanService object
        %      analysisRefenceID - string
        %    Output:
        %      IsAnalysisDoneResult - logical or numeric scalar (XML boolean)
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, analysisRefenceID = []; end
            ret = matlab.internal.callJava('isAnalysisDone',obj.PortObj,fromMATLAB({'IsAnalysisDone','analysisRefenceID'}, analysisRefenceID,'string',true,false));
            IsAnalysisDoneResult = toMATLAB(ret,'boolean',false);

        end

        function AnalyseWithListFileWithoutSavingResult = AnalyseWithListFileWithoutSaving(obj,uploadName,analysisModule,copySettingsFromProjectName,fromTime,toTime,timeIncrement)
        %AnalyseWithListFileWithoutSaving  
        %  AnalyseWithListFileWithoutSavingResult = AnalyseWithListFileWithoutSaving(obj,uploadName,analysisModule,copySettingsFromProjectName,fromTime,toTime,timeIncrement)  
        %    Inputs:
        %      obj - NeplanService object
        %      uploadName - string
        %      analysisModule - string
        %      copySettingsFromProjectName - string
        %      fromTime - string
        %      toTime - string
        %      timeIncrement - numeric scalar (XML int)
        %    Output:
        %      AnalyseWithListFileWithoutSavingResult - <a href="matlab:doc wsdl.neplanservice.AnalysisReturnInfo">AnalysisReturnInfo</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, uploadName = []; end
            if nargin < 3, analysisModule = []; end
            if nargin < 4, copySettingsFromProjectName = []; end
            if nargin < 5, fromTime = []; end
            if nargin < 6, toTime = []; end
            if nargin < 7, timeIncrement = []; end
            ret = matlab.internal.callJava('analyseWithListFileWithoutSaving',obj.PortObj,fromMATLAB({'AnalyseWithListFileWithoutSaving','uploadName'}, uploadName,'string',true,false),...
                fromMATLAB({'AnalyseWithListFileWithoutSaving','analysisModule'}, analysisModule,'string',true,false),...
                fromMATLAB({'AnalyseWithListFileWithoutSaving','copySettingsFromProjectName'}, copySettingsFromProjectName,'string',true,false),...
                fromMATLAB({'AnalyseWithListFileWithoutSaving','fromTime'}, fromTime,'string',true,false),...
                fromMATLAB({'AnalyseWithListFileWithoutSaving','toTime'}, toTime,'string',true,false),...
                fromMATLAB({'AnalyseWithListFileWithoutSaving','timeIncrement'}, timeIncrement,'int',true,false));
            AnalyseWithListFileWithoutSavingResult = wsdl.neplanservice.AnalysisReturnInfo.getInstance(ret,false);

        end

        function AnalyseWithProjectFileWithoutSavingResult = AnalyseWithProjectFileWithoutSaving(obj,uploadName,analysisModule,copySettingsFromProjectName,fromTime,toTime,timeIncrement)
        %AnalyseWithProjectFileWithoutSaving  
        %  AnalyseWithProjectFileWithoutSavingResult = AnalyseWithProjectFileWithoutSaving(obj,uploadName,analysisModule,copySettingsFromProjectName,fromTime,toTime,timeIncrement)  
        %    Inputs:
        %      obj - NeplanService object
        %      uploadName - string
        %      analysisModule - string
        %      copySettingsFromProjectName - string
        %      fromTime - string
        %      toTime - string
        %      timeIncrement - numeric scalar (XML int)
        %    Output:
        %      AnalyseWithProjectFileWithoutSavingResult - <a href="matlab:doc wsdl.neplanservice.AnalysisReturnInfo">AnalysisReturnInfo</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, uploadName = []; end
            if nargin < 3, analysisModule = []; end
            if nargin < 4, copySettingsFromProjectName = []; end
            if nargin < 5, fromTime = []; end
            if nargin < 6, toTime = []; end
            if nargin < 7, timeIncrement = []; end
            ret = matlab.internal.callJava('analyseWithProjectFileWithoutSaving',obj.PortObj,fromMATLAB({'AnalyseWithProjectFileWithoutSaving','uploadName'}, uploadName,'string',true,false),...
                fromMATLAB({'AnalyseWithProjectFileWithoutSaving','analysisModule'}, analysisModule,'string',true,false),...
                fromMATLAB({'AnalyseWithProjectFileWithoutSaving','copySettingsFromProjectName'}, copySettingsFromProjectName,'string',true,false),...
                fromMATLAB({'AnalyseWithProjectFileWithoutSaving','fromTime'}, fromTime,'string',true,false),...
                fromMATLAB({'AnalyseWithProjectFileWithoutSaving','toTime'}, toTime,'string',true,false),...
                fromMATLAB({'AnalyseWithProjectFileWithoutSaving','timeIncrement'}, timeIncrement,'int',true,false));
            AnalyseWithProjectFileWithoutSavingResult = wsdl.neplanservice.AnalysisReturnInfo.getInstance(ret,false);

        end

        function AnalyseWithCDEFileWithoutSavingResult = AnalyseWithCDEFileWithoutSaving(obj,uploadName,analysisModule,copySettingsFromProjectName,fromTime,toTime,timeIncrement)
        %AnalyseWithCDEFileWithoutSaving  
        %  AnalyseWithCDEFileWithoutSavingResult = AnalyseWithCDEFileWithoutSaving(obj,uploadName,analysisModule,copySettingsFromProjectName,fromTime,toTime,timeIncrement)  
        %    Inputs:
        %      obj - NeplanService object
        %      uploadName - string
        %      analysisModule - string
        %      copySettingsFromProjectName - string
        %      fromTime - string
        %      toTime - string
        %      timeIncrement - numeric scalar (XML int)
        %    Output:
        %      AnalyseWithCDEFileWithoutSavingResult - <a href="matlab:doc wsdl.neplanservice.AnalysisReturnInfo">AnalysisReturnInfo</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, uploadName = []; end
            if nargin < 3, analysisModule = []; end
            if nargin < 4, copySettingsFromProjectName = []; end
            if nargin < 5, fromTime = []; end
            if nargin < 6, toTime = []; end
            if nargin < 7, timeIncrement = []; end
            ret = matlab.internal.callJava('analyseWithCDEFileWithoutSaving',obj.PortObj,fromMATLAB({'AnalyseWithCDEFileWithoutSaving','uploadName'}, uploadName,'string',true,false),...
                fromMATLAB({'AnalyseWithCDEFileWithoutSaving','analysisModule'}, analysisModule,'string',true,false),...
                fromMATLAB({'AnalyseWithCDEFileWithoutSaving','copySettingsFromProjectName'}, copySettingsFromProjectName,'string',true,false),...
                fromMATLAB({'AnalyseWithCDEFileWithoutSaving','fromTime'}, fromTime,'string',true,false),...
                fromMATLAB({'AnalyseWithCDEFileWithoutSaving','toTime'}, toTime,'string',true,false),...
                fromMATLAB({'AnalyseWithCDEFileWithoutSaving','timeIncrement'}, timeIncrement,'int',true,false));
            AnalyseWithCDEFileWithoutSavingResult = wsdl.neplanservice.AnalysisReturnInfo.getInstance(ret,false);

        end

        function DoAnalysisFromFilesResult = DoAnalysisFromFiles(obj,uploadName,analysisModule,copySettingsFromProjectName,fromTime,toTime,timeIncrement)
        %DoAnalysisFromFiles  
        %  DoAnalysisFromFilesResult = DoAnalysisFromFiles(obj,uploadName,analysisModule,copySettingsFromProjectName,fromTime,toTime,timeIncrement)  
        %    Inputs:
        %      obj - NeplanService object
        %      uploadName - string
        %      analysisModule - string
        %      copySettingsFromProjectName - string
        %      fromTime - string
        %      toTime - string
        %      timeIncrement - numeric scalar (XML int)
        %    Output:
        %      DoAnalysisFromFilesResult - <a href="matlab:doc wsdl.neplanservice.AnalysisReturnInfo">AnalysisReturnInfo</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, uploadName = []; end
            if nargin < 3, analysisModule = []; end
            if nargin < 4, copySettingsFromProjectName = []; end
            if nargin < 5, fromTime = []; end
            if nargin < 6, toTime = []; end
            if nargin < 7, timeIncrement = []; end
            ret = matlab.internal.callJava('doAnalysisFromFiles',obj.PortObj,fromMATLAB({'DoAnalysisFromFiles','uploadName'}, uploadName,'string',true,false),...
                fromMATLAB({'DoAnalysisFromFiles','analysisModule'}, analysisModule,'string',true,false),...
                fromMATLAB({'DoAnalysisFromFiles','copySettingsFromProjectName'}, copySettingsFromProjectName,'string',true,false),...
                fromMATLAB({'DoAnalysisFromFiles','fromTime'}, fromTime,'string',true,false),...
                fromMATLAB({'DoAnalysisFromFiles','toTime'}, toTime,'string',true,false),...
                fromMATLAB({'DoAnalysisFromFiles','timeIncrement'}, timeIncrement,'int',true,false));
            DoAnalysisFromFilesResult = wsdl.neplanservice.AnalysisReturnInfo.getInstance(ret,false);

        end

        function EnergyCalculationFromFilesResult = EnergyCalculationFromFiles(obj,uploadName,fromTime,toTime,timeIncrement,copySettingsFromProjectName)
        %EnergyCalculationFromFiles  
        %  EnergyCalculationFromFilesResult = EnergyCalculationFromFiles(obj,uploadName,fromTime,toTime,timeIncrement,copySettingsFromProjectName)  
        %    Inputs:
        %      obj - NeplanService object
        %      uploadName - string
        %      fromTime - string
        %      toTime - string
        %      timeIncrement - numeric scalar (XML int)
        %      copySettingsFromProjectName - string
        %    Output:
        %      EnergyCalculationFromFilesResult - <a href="matlab:doc wsdl.neplanservice.AnalysisReturnInfo">AnalysisReturnInfo</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, uploadName = []; end
            if nargin < 3, fromTime = []; end
            if nargin < 4, toTime = []; end
            if nargin < 5, timeIncrement = []; end
            if nargin < 6, copySettingsFromProjectName = []; end
            ret = matlab.internal.callJava('energyCalculationFromFiles',obj.PortObj,fromMATLAB({'EnergyCalculationFromFiles','uploadName'}, uploadName,'string',true,false),...
                fromMATLAB({'EnergyCalculationFromFiles','fromTime'}, fromTime,'string',true,false),...
                fromMATLAB({'EnergyCalculationFromFiles','toTime'}, toTime,'string',true,false),...
                fromMATLAB({'EnergyCalculationFromFiles','timeIncrement'}, timeIncrement,'int',true,false),...
                fromMATLAB({'EnergyCalculationFromFiles','copySettingsFromProjectName'}, copySettingsFromProjectName,'string',true,false));
            EnergyCalculationFromFilesResult = wsdl.neplanservice.AnalysisReturnInfo.getInstance(ret,false);

        end

        function LoadAllocationFromDBResult = LoadAllocationFromDB(obj,projectName,measurementDefinitionName,fromTime,toTime,timeIncrement,settings)
        %LoadAllocationFromDB  
        %  LoadAllocationFromDBResult = LoadAllocationFromDB(obj,projectName,measurementDefinitionName,fromTime,toTime,timeIncrement,settings)  
        %    Inputs:
        %      obj - NeplanService object
        %      projectName - string
        %      measurementDefinitionName - string
        %      fromTime - string
        %      toTime - string
        %      timeIncrement - numeric scalar (XML int)
        %      settings - <a href="matlab:doc wsdl.neplanservice.AnalysisParameterSettings">AnalysisParameterSettings</a> object
        %    Output:
        %      LoadAllocationFromDBResult - <a href="matlab:doc wsdl.neplanservice.AnalysisReturnInfo">AnalysisReturnInfo</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, projectName = []; end
            if nargin < 3, measurementDefinitionName = []; end
            if nargin < 4, fromTime = []; end
            if nargin < 5, toTime = []; end
            if nargin < 6, timeIncrement = []; end
            if nargin < 7, settings = []; end
            if ~isempty(settings), settings = settings.getObj; end
            ret = matlab.internal.callJava('loadAllocationFromDB',obj.PortObj,fromMATLAB({'LoadAllocationFromDB','projectName'}, projectName,'string',true,false),...
                fromMATLAB({'LoadAllocationFromDB','measurementDefinitionName'}, measurementDefinitionName,'string',true,false),...
                fromMATLAB({'LoadAllocationFromDB','fromTime'}, fromTime,'string',true,false),...
                fromMATLAB({'LoadAllocationFromDB','toTime'}, toTime,'string',true,false),...
                fromMATLAB({'LoadAllocationFromDB','timeIncrement'}, timeIncrement,'int',true,false),...
                settings);
            LoadAllocationFromDBResult = wsdl.neplanservice.AnalysisReturnInfo.getInstance(ret,false);

        end

        function LoadAllocationFromMeasurmentFileAndProjectNameResult = LoadAllocationFromMeasurmentFileAndProjectName(obj,uploadedMeasurementFileName,projectName,fromTime,toTime,timeIncrement,settings)
        %LoadAllocationFromMeasurmentFileAndProjectName  
        %  LoadAllocationFromMeasurmentFileAndProjectNameResult = LoadAllocationFromMeasurmentFileAndProjectName(obj,uploadedMeasurementFileName,projectName,fromTime,toTime,timeIncrement,settings)  
        %    Inputs:
        %      obj - NeplanService object
        %      uploadedMeasurementFileName - string
        %      projectName - string
        %      fromTime - string
        %      toTime - string
        %      timeIncrement - numeric scalar (XML int)
        %      settings - <a href="matlab:doc wsdl.neplanservice.AnalysisParameterSettings">AnalysisParameterSettings</a> object
        %    Output:
        %      LoadAllocationFromMeasurmentFileAndProjectNameResult - <a href="matlab:doc wsdl.neplanservice.AnalysisReturnInfo">AnalysisReturnInfo</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, uploadedMeasurementFileName = []; end
            if nargin < 3, projectName = []; end
            if nargin < 4, fromTime = []; end
            if nargin < 5, toTime = []; end
            if nargin < 6, timeIncrement = []; end
            if nargin < 7, settings = []; end
            if ~isempty(settings), settings = settings.getObj; end
            ret = matlab.internal.callJava('loadAllocationFromMeasurmentFileAndProjectName',obj.PortObj,fromMATLAB({'LoadAllocationFromMeasurmentFileAndProjectName','uploadedMeasurementFileName'}, uploadedMeasurementFileName,'string',true,false),...
                fromMATLAB({'LoadAllocationFromMeasurmentFileAndProjectName','projectName'}, projectName,'string',true,false),...
                fromMATLAB({'LoadAllocationFromMeasurmentFileAndProjectName','fromTime'}, fromTime,'string',true,false),...
                fromMATLAB({'LoadAllocationFromMeasurmentFileAndProjectName','toTime'}, toTime,'string',true,false),...
                fromMATLAB({'LoadAllocationFromMeasurmentFileAndProjectName','timeIncrement'}, timeIncrement,'int',true,false),...
                settings);
            LoadAllocationFromMeasurmentFileAndProjectNameResult = wsdl.neplanservice.AnalysisReturnInfo.getInstance(ret,false);

        end

        function LoadAllocationFromMeasurmentFileResult = LoadAllocationFromMeasurmentFile(obj,project,uploadedMeasurementFileName,fromTime,toTime,timeIncrement,settings)
        %LoadAllocationFromMeasurmentFile  
        %  LoadAllocationFromMeasurmentFileResult = LoadAllocationFromMeasurmentFile(obj,project,uploadedMeasurementFileName,fromTime,toTime,timeIncrement,settings)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      uploadedMeasurementFileName - string
        %      fromTime - string
        %      toTime - string
        %      timeIncrement - numeric scalar (XML int)
        %      settings - <a href="matlab:doc wsdl.neplanservice.AnalysisParameterSettings">AnalysisParameterSettings</a> object
        %    Output:
        %      LoadAllocationFromMeasurmentFileResult - <a href="matlab:doc wsdl.neplanservice.AnalysisReturnInfo">AnalysisReturnInfo</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, uploadedMeasurementFileName = []; end
            if nargin < 4, fromTime = []; end
            if nargin < 5, toTime = []; end
            if nargin < 6, timeIncrement = []; end
            if nargin < 7, settings = []; end
            if ~isempty(settings), settings = settings.getObj; end
            ret = matlab.internal.callJava('loadAllocationFromMeasurmentFile',obj.PortObj,project,...
                fromMATLAB({'LoadAllocationFromMeasurmentFile','uploadedMeasurementFileName'}, uploadedMeasurementFileName,'string',true,false),...
                fromMATLAB({'LoadAllocationFromMeasurmentFile','fromTime'}, fromTime,'string',true,false),...
                fromMATLAB({'LoadAllocationFromMeasurmentFile','toTime'}, toTime,'string',true,false),...
                fromMATLAB({'LoadAllocationFromMeasurmentFile','timeIncrement'}, timeIncrement,'int',true,false),...
                settings);
            LoadAllocationFromMeasurmentFileResult = wsdl.neplanservice.AnalysisReturnInfo.getInstance(ret,false);

        end

        function [ImportFromListFileAndDoLoadAllocationResult,analysisReturnInfo] = ImportFromListFileAndDoLoadAllocation(obj,uploadName,projectName,settings)
        %ImportFromListFileAndDoLoadAllocation  
        %  [ImportFromListFileAndDoLoadAllocationResult,analysisReturnInfo] = ImportFromListFileAndDoLoadAllocation(obj,uploadName,projectName,settings)  
        %    Inputs:
        %      obj - NeplanService object
        %      uploadName - string
        %      projectName - string
        %      settings - <a href="matlab:doc wsdl.neplanservice.AnalysisParameterSettings">AnalysisParameterSettings</a> object
        %    Outputs:
        %      ImportFromListFileAndDoLoadAllocationResult - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      analysisReturnInfo - <a href="matlab:doc wsdl.neplanservice.AnalysisReturnInfo">AnalysisReturnInfo</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, uploadName = []; end
            if nargin < 3, projectName = []; end
            if nargin < 4, settings = []; end
            if ~isempty(settings), settings = settings.getObj; end
            ImportFromListFileAndDoLoadAllocationResult_Holder = javax.xml.ws.Holder;
            analysisReturnInfo_Holder = javax.xml.ws.Holder;
            matlab.internal.callJava('importFromListFileAndDoLoadAllocation',obj.PortObj,fromMATLAB({'ImportFromListFileAndDoLoadAllocation','uploadName'}, uploadName,'string',true,false),...
                fromMATLAB({'ImportFromListFileAndDoLoadAllocation','projectName'}, projectName,'string',true,false),...
                settings,...
                ImportFromListFileAndDoLoadAllocationResult_Holder,...
                analysisReturnInfo_Holder);
            ret = ImportFromListFileAndDoLoadAllocationResult_Holder.value;
            ImportFromListFileAndDoLoadAllocationResult = wsdl.neplanservice.ExternalProject.getInstance(ret,false);
            ret = analysisReturnInfo_Holder.value;
            analysisReturnInfo = wsdl.neplanservice.AnalysisReturnInfo.getInstance(ret,false);

        end

        function DeleteAnaylsisLogFileResult = DeleteAnaylsisLogFile(obj,fileName)
        %DeleteAnaylsisLogFile  
        %  DeleteAnaylsisLogFileResult = DeleteAnaylsisLogFile(obj,fileName)  
        %    Inputs:
        %      obj - NeplanService object
        %      fileName - string
        %    Output:
        %      DeleteAnaylsisLogFileResult - logical or numeric scalar (XML boolean)
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, fileName = []; end
            ret = matlab.internal.callJava('deleteAnaylsisLogFile',obj.PortObj,fromMATLAB({'DeleteAnaylsisLogFile','fileName'}, fileName,'string',true,false));
            DeleteAnaylsisLogFileResult = toMATLAB(ret,'boolean',false);

        end

        function DeleteAnalysisResultFileResult = DeleteAnalysisResultFile(obj,fileName)
        %DeleteAnalysisResultFile  
        %  DeleteAnalysisResultFileResult = DeleteAnalysisResultFile(obj,fileName)  
        %    Inputs:
        %      obj - NeplanService object
        %      fileName - string
        %    Output:
        %      DeleteAnalysisResultFileResult - logical or numeric scalar (XML boolean)
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, fileName = []; end
            ret = matlab.internal.callJava('deleteAnalysisResultFile',obj.PortObj,fromMATLAB({'DeleteAnalysisResultFile','fileName'}, fileName,'string',true,false));
            DeleteAnalysisResultFileResult = toMATLAB(ret,'boolean',false);

        end

        function DeleteProjectResult = DeleteProject(obj,project)
        %DeleteProject  
        %  DeleteProjectResult = DeleteProject(obj,project)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %    Output:
        %      DeleteProjectResult - logical or numeric scalar (XML boolean)
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            ret = matlab.internal.callJava('deleteProject',obj.PortObj,project);
            DeleteProjectResult = toMATLAB(ret,'boolean',false);

        end

        function MarkedProjectAsDeletedResult = MarkedProjectAsDeleted(obj,project)
        %MarkedProjectAsDeleted  
        %  MarkedProjectAsDeletedResult = MarkedProjectAsDeleted(obj,project)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %    Output:
        %      MarkedProjectAsDeletedResult - logical or numeric scalar (XML boolean)
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            ret = matlab.internal.callJava('markedProjectAsDeleted',obj.PortObj,project);
            MarkedProjectAsDeletedResult = toMATLAB(ret,'boolean',false);

        end

        function ImportFromFileResult = ImportFromFile(obj,uploadName,projectName,withGraphic,copySettingsFromProjectName,merge,mergeOnNewDiagram)
        %ImportFromFile  
        %  ImportFromFileResult = ImportFromFile(obj,uploadName,projectName,withGraphic,copySettingsFromProjectName,merge,mergeOnNewDiagram)  
        %    Inputs:
        %      obj - NeplanService object
        %      uploadName - string
        %      projectName - string
        %      withGraphic - logical or numeric scalar (XML boolean)
        %      copySettingsFromProjectName - string
        %      merge - logical or numeric scalar (XML boolean)
        %      mergeOnNewDiagram - logical or numeric scalar (XML boolean)
        %    Output:
        %      ImportFromFileResult - numeric scalar (XML int)
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, uploadName = []; end
            if nargin < 3, projectName = []; end
            if nargin < 4, withGraphic = []; end
            if nargin < 5, copySettingsFromProjectName = []; end
            if nargin < 6, merge = []; end
            if nargin < 7, mergeOnNewDiagram = []; end
            ret = matlab.internal.callJava('importFromFile',obj.PortObj,fromMATLAB({'ImportFromFile','uploadName'}, uploadName,'string',true,false),...
                fromMATLAB({'ImportFromFile','projectName'}, projectName,'string',true,false),...
                fromMATLAB({'ImportFromFile','withGraphic'}, withGraphic,'boolean',true,false),...
                fromMATLAB({'ImportFromFile','copySettingsFromProjectName'}, copySettingsFromProjectName,'string',true,false),...
                fromMATLAB({'ImportFromFile','merge'}, merge,'boolean',true,false),...
                fromMATLAB({'ImportFromFile','mergeOnNewDiagram'}, mergeOnNewDiagram,'boolean',true,false));
            ImportFromFileResult = toMATLAB(ret,'int',false);

        end

        function AddFeederFromListResult = AddFeederFromList(obj,project,feederList)
        %AddFeederFromList  
        %  AddFeederFromListResult = AddFeederFromList(obj,project,feederList)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      feederList - <a href="matlab:doc wsdl.neplanservice.ArrayOfImportFeederItem">ArrayOfImportFeederItem</a> object
        %    Output:
        %      AddFeederFromListResult - logical or numeric scalar (XML boolean)
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, feederList = []; end
            if ~isempty(feederList), feederList = feederList.getObj; end
            ret = matlab.internal.callJava('addFeederFromList',obj.PortObj,project,...
                feederList);
            AddFeederFromListResult = toMATLAB(ret,'boolean',false);

        end

        function ImportFromListResult = ImportFromList(obj,listElements,projectName,copySettingsFromProjectName)
        %ImportFromList  
        %  ImportFromListResult = ImportFromList(obj,listElements,projectName,copySettingsFromProjectName)  
        %    Inputs:
        %      obj - NeplanService object
        %      listElements - <a href="matlab:doc wsdl.neplanservice.ArrayOfImportElementItem">ArrayOfImportElementItem</a> object
        %      projectName - string
        %      copySettingsFromProjectName - string
        %    Output:
        %      ImportFromListResult - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, listElements = []; end
            if ~isempty(listElements), listElements = listElements.getObj; end
            if nargin < 3, projectName = []; end
            if nargin < 4, copySettingsFromProjectName = []; end
            ret = matlab.internal.callJava('importFromList',obj.PortObj,listElements,...
                fromMATLAB({'ImportFromList','projectName'}, projectName,'string',true,false),...
                fromMATLAB({'ImportFromList','copySettingsFromProjectName'}, copySettingsFromProjectName,'string',true,false));
            ImportFromListResult = wsdl.neplanservice.ExternalProject.getInstance(ret,false);

        end

        function ImportFromListFileResult = ImportFromListFile(obj,uploadName,projectName,copySettingsFromProjectName)
        %ImportFromListFile  
        %  ImportFromListFileResult = ImportFromListFile(obj,uploadName,projectName,copySettingsFromProjectName)  
        %    Inputs:
        %      obj - NeplanService object
        %      uploadName - string
        %      projectName - string
        %      copySettingsFromProjectName - string
        %    Output:
        %      ImportFromListFileResult - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, uploadName = []; end
            if nargin < 3, projectName = []; end
            if nargin < 4, copySettingsFromProjectName = []; end
            ret = matlab.internal.callJava('importFromListFile',obj.PortObj,fromMATLAB({'ImportFromListFile','uploadName'}, uploadName,'string',true,false),...
                fromMATLAB({'ImportFromListFile','projectName'}, projectName,'string',true,false),...
                fromMATLAB({'ImportFromListFile','copySettingsFromProjectName'}, copySettingsFromProjectName,'string',true,false));
            ImportFromListFileResult = wsdl.neplanservice.ExternalProject.getInstance(ret,false);

        end

        function MergeProjectFromListFileResult = MergeProjectFromListFile(obj,uploadName,projectToMerge,mergeOnNewDiagram)
        %MergeProjectFromListFile  
        %  MergeProjectFromListFileResult = MergeProjectFromListFile(obj,uploadName,projectToMerge,mergeOnNewDiagram)  
        %    Inputs:
        %      obj - NeplanService object
        %      uploadName - string
        %      projectToMerge - string
        %      mergeOnNewDiagram - logical or numeric scalar (XML boolean)
        %    Output:
        %      MergeProjectFromListFileResult - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, uploadName = []; end
            if nargin < 3, projectToMerge = []; end
            if nargin < 4, mergeOnNewDiagram = []; end
            ret = matlab.internal.callJava('mergeProjectFromListFile',obj.PortObj,fromMATLAB({'MergeProjectFromListFile','uploadName'}, uploadName,'string',true,false),...
                fromMATLAB({'MergeProjectFromListFile','projectToMerge'}, projectToMerge,'string',true,false),...
                fromMATLAB({'MergeProjectFromListFile','mergeOnNewDiagram'}, mergeOnNewDiagram,'boolean',true,false));
            MergeProjectFromListFileResult = wsdl.neplanservice.ExternalProject.getInstance(ret,false);

        end

        function ImportFromCDEResult = ImportFromCDE(obj,path1,path2,path3,copySettingsFromProjectName,withGraphic)
        %ImportFromCDE  
        %  ImportFromCDEResult = ImportFromCDE(obj,path1,path2,path3,copySettingsFromProjectName,withGraphic)  
        %    Inputs:
        %      obj - NeplanService object
        %      path1 - string
        %      path2 - string
        %      path3 - string
        %      copySettingsFromProjectName - string
        %      withGraphic - logical or numeric scalar (XML boolean)
        %    Output:
        %      ImportFromCDEResult - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, path1 = []; end
            if nargin < 3, path2 = []; end
            if nargin < 4, path3 = []; end
            if nargin < 5, copySettingsFromProjectName = []; end
            if nargin < 6, withGraphic = []; end
            ret = matlab.internal.callJava('importFromCDE',obj.PortObj,fromMATLAB({'ImportFromCDE','path1'}, path1,'string',true,false),...
                fromMATLAB({'ImportFromCDE','path2'}, path2,'string',true,false),...
                fromMATLAB({'ImportFromCDE','path3'}, path3,'string',true,false),...
                fromMATLAB({'ImportFromCDE','copySettingsFromProjectName'}, copySettingsFromProjectName,'string',true,false),...
                fromMATLAB({'ImportFromCDE','withGraphic'}, withGraphic,'boolean',true,false));
            ImportFromCDEResult = wsdl.neplanservice.ExternalProject.getInstance(ret,false);

        end

        function ImportFromCDEFilesResult = ImportFromCDEFiles(obj,cdeFilename,ndbFilename,xmlFilename,copySettingsFromProjectName,withGraphic)
        %ImportFromCDEFiles  
        %  ImportFromCDEFilesResult = ImportFromCDEFiles(obj,cdeFilename,ndbFilename,xmlFilename,copySettingsFromProjectName,withGraphic)  
        %    Inputs:
        %      obj - NeplanService object
        %      cdeFilename - string
        %      ndbFilename - string
        %      xmlFilename - string
        %      copySettingsFromProjectName - string
        %      withGraphic - logical or numeric scalar (XML boolean)
        %    Output:
        %      ImportFromCDEFilesResult - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, cdeFilename = []; end
            if nargin < 3, ndbFilename = []; end
            if nargin < 4, xmlFilename = []; end
            if nargin < 5, copySettingsFromProjectName = []; end
            if nargin < 6, withGraphic = []; end
            ret = matlab.internal.callJava('importFromCDEFiles',obj.PortObj,fromMATLAB({'ImportFromCDEFiles','cdeFilename'}, cdeFilename,'string',true,false),...
                fromMATLAB({'ImportFromCDEFiles','ndbFilename'}, ndbFilename,'string',true,false),...
                fromMATLAB({'ImportFromCDEFiles','xmlFilename'}, xmlFilename,'string',true,false),...
                fromMATLAB({'ImportFromCDEFiles','copySettingsFromProjectName'}, copySettingsFromProjectName,'string',true,false),...
                fromMATLAB({'ImportFromCDEFiles','withGraphic'}, withGraphic,'boolean',true,false));
            ImportFromCDEFilesResult = wsdl.neplanservice.ExternalProject.getInstance(ret,false);

        end

        function ImportFromCDEZipFileResult = ImportFromCDEZipFile(obj,zipFile,copySettingsFromProjectName,withGraphic)
        %ImportFromCDEZipFile  
        %  ImportFromCDEZipFileResult = ImportFromCDEZipFile(obj,zipFile,copySettingsFromProjectName,withGraphic)  
        %    Inputs:
        %      obj - NeplanService object
        %      zipFile - string
        %      copySettingsFromProjectName - string
        %      withGraphic - logical or numeric scalar (XML boolean)
        %    Output:
        %      ImportFromCDEZipFileResult - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, zipFile = []; end
            if nargin < 3, copySettingsFromProjectName = []; end
            if nargin < 4, withGraphic = []; end
            ret = matlab.internal.callJava('importFromCDEZipFile',obj.PortObj,fromMATLAB({'ImportFromCDEZipFile','zipFile'}, zipFile,'string',true,false),...
                fromMATLAB({'ImportFromCDEZipFile','copySettingsFromProjectName'}, copySettingsFromProjectName,'string',true,false),...
                fromMATLAB({'ImportFromCDEZipFile','withGraphic'}, withGraphic,'boolean',true,false));
            ImportFromCDEZipFileResult = wsdl.neplanservice.ExternalProject.getInstance(ret,false);

        end

        function ImportFromPSSEFilesResult = ImportFromPSSEFiles(obj,rawFilename,seqFilename,dyrFilename,drwFilename,psseVersion,ukr,withStations,withBreakers,charNumStations,nameRule,lineQuant,copySettingsFromProjectName)
        %ImportFromPSSEFiles  
        %  ImportFromPSSEFilesResult = ImportFromPSSEFiles(obj,rawFilename,seqFilename,dyrFilename,drwFilename,psseVersion,ukr,withStations,withBreakers,charNumStations,nameRule,lineQuant,copySettingsFromProjectName)  
        %    Inputs:
        %      obj - NeplanService object
        %      rawFilename - string
        %      seqFilename - string
        %      dyrFilename - string
        %      drwFilename - string
        %      psseVersion - numeric scalar (XML int)
        %      ukr - logical or numeric scalar (XML boolean)
        %      withStations - logical or numeric scalar (XML boolean)
        %      withBreakers - logical or numeric scalar (XML boolean)
        %      charNumStations - numeric scalar (XML int)
        %      nameRule - numeric scalar (XML int)
        %      lineQuant - numeric scalar (XML int)
        %      copySettingsFromProjectName - string
        %    Output:
        %      ImportFromPSSEFilesResult - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, rawFilename = []; end
            if nargin < 3, seqFilename = []; end
            if nargin < 4, dyrFilename = []; end
            if nargin < 5, drwFilename = []; end
            if nargin < 6, psseVersion = []; end
            if nargin < 7, ukr = []; end
            if nargin < 8, withStations = []; end
            if nargin < 9, withBreakers = []; end
            if nargin < 10, charNumStations = []; end
            if nargin < 11, nameRule = []; end
            if nargin < 12, lineQuant = []; end
            if nargin < 13, copySettingsFromProjectName = []; end
            ret = matlab.internal.callJava('importFromPSSEFiles',obj.PortObj,fromMATLAB({'ImportFromPSSEFiles','rawFilename'}, rawFilename,'string',true,false),...
                fromMATLAB({'ImportFromPSSEFiles','seqFilename'}, seqFilename,'string',true,false),...
                fromMATLAB({'ImportFromPSSEFiles','dyrFilename'}, dyrFilename,'string',true,false),...
                fromMATLAB({'ImportFromPSSEFiles','drwFilename'}, drwFilename,'string',true,false),...
                fromMATLAB({'ImportFromPSSEFiles','psseVersion'}, psseVersion,'int',true,false),...
                fromMATLAB({'ImportFromPSSEFiles','ukr'}, ukr,'boolean',true,false),...
                fromMATLAB({'ImportFromPSSEFiles','withStations'}, withStations,'boolean',true,false),...
                fromMATLAB({'ImportFromPSSEFiles','withBreakers'}, withBreakers,'boolean',true,false),...
                fromMATLAB({'ImportFromPSSEFiles','charNumStations'}, charNumStations,'int',true,false),...
                fromMATLAB({'ImportFromPSSEFiles','nameRule'}, nameRule,'int',true,false),...
                fromMATLAB({'ImportFromPSSEFiles','lineQuant'}, lineQuant,'int',true,false),...
                fromMATLAB({'ImportFromPSSEFiles','copySettingsFromProjectName'}, copySettingsFromProjectName,'string',true,false));
            ImportFromPSSEFilesResult = wsdl.neplanservice.ExternalProject.getInstance(ret,false);

        end

        function ImportFromPSSEZipFileResult = ImportFromPSSEZipFile(obj,zipFile,psseVersion,ukr,withStations,withBreakers,charNumStations,nameRule,lineQuant,copySettingsFromProjectName)
        %ImportFromPSSEZipFile  
        %  ImportFromPSSEZipFileResult = ImportFromPSSEZipFile(obj,zipFile,psseVersion,ukr,withStations,withBreakers,charNumStations,nameRule,lineQuant,copySettingsFromProjectName)  
        %    Inputs:
        %      obj - NeplanService object
        %      zipFile - string
        %      psseVersion - numeric scalar (XML int)
        %      ukr - logical or numeric scalar (XML boolean)
        %      withStations - logical or numeric scalar (XML boolean)
        %      withBreakers - logical or numeric scalar (XML boolean)
        %      charNumStations - numeric scalar (XML int)
        %      nameRule - numeric scalar (XML int)
        %      lineQuant - numeric scalar (XML int)
        %      copySettingsFromProjectName - string
        %    Output:
        %      ImportFromPSSEZipFileResult - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, zipFile = []; end
            if nargin < 3, psseVersion = []; end
            if nargin < 4, ukr = []; end
            if nargin < 5, withStations = []; end
            if nargin < 6, withBreakers = []; end
            if nargin < 7, charNumStations = []; end
            if nargin < 8, nameRule = []; end
            if nargin < 9, lineQuant = []; end
            if nargin < 10, copySettingsFromProjectName = []; end
            ret = matlab.internal.callJava('importFromPSSEZipFile',obj.PortObj,fromMATLAB({'ImportFromPSSEZipFile','zipFile'}, zipFile,'string',true,false),...
                fromMATLAB({'ImportFromPSSEZipFile','psseVersion'}, psseVersion,'int',true,false),...
                fromMATLAB({'ImportFromPSSEZipFile','ukr'}, ukr,'boolean',true,false),...
                fromMATLAB({'ImportFromPSSEZipFile','withStations'}, withStations,'boolean',true,false),...
                fromMATLAB({'ImportFromPSSEZipFile','withBreakers'}, withBreakers,'boolean',true,false),...
                fromMATLAB({'ImportFromPSSEZipFile','charNumStations'}, charNumStations,'int',true,false),...
                fromMATLAB({'ImportFromPSSEZipFile','nameRule'}, nameRule,'int',true,false),...
                fromMATLAB({'ImportFromPSSEZipFile','lineQuant'}, lineQuant,'int',true,false),...
                fromMATLAB({'ImportFromPSSEZipFile','copySettingsFromProjectName'}, copySettingsFromProjectName,'string',true,false));
            ImportFromPSSEZipFileResult = wsdl.neplanservice.ExternalProject.getInstance(ret,false);

        end

        function ImportFromShapeFileResult = ImportFromShapeFile(obj,path,fileName)
        %ImportFromShapeFile  
        %  ImportFromShapeFileResult = ImportFromShapeFile(obj,path,fileName)  
        %    Inputs:
        %      obj - NeplanService object
        %      path - string
        %      fileName - string
        %    Output:
        %      ImportFromShapeFileResult - numeric scalar (XML int)
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, path = []; end
            if nargin < 3, fileName = []; end
            ret = matlab.internal.callJava('importFromShapeFile',obj.PortObj,fromMATLAB({'ImportFromShapeFile','path'}, path,'string',true,false),...
                fromMATLAB({'ImportFromShapeFile','fileName'}, fileName,'string',true,false));
            ImportFromShapeFileResult = toMATLAB(ret,'int',false);

        end

        function ImportFromNDBResult = ImportFromNDB(obj,project,uploadName,origFileName,mediumType)
        %ImportFromNDB  
        %  ImportFromNDBResult = ImportFromNDB(obj,project,uploadName,origFileName,mediumType)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      uploadName - string
        %      origFileName - string
        %      mediumType - string
        %    Output:
        %      ImportFromNDBResult - logical or numeric scalar (XML boolean)
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, uploadName = []; end
            if nargin < 4, origFileName = []; end
            if nargin < 5, mediumType = []; end
            ret = matlab.internal.callJava('importFromNDB',obj.PortObj,project,...
                fromMATLAB({'ImportFromNDB','uploadName'}, uploadName,'string',true,false),...
                fromMATLAB({'ImportFromNDB','origFileName'}, origFileName,'string',true,false),...
                fromMATLAB({'ImportFromNDB','mediumType'}, mediumType,'string',true,false));
            ImportFromNDBResult = toMATLAB(ret,'boolean',false);

        end

        function ImportMeasuredDataFromXMlFileResult = ImportMeasuredDataFromXMlFile(obj,project,uploadName,definitionName)
        %ImportMeasuredDataFromXMlFile  
        %  ImportMeasuredDataFromXMlFileResult = ImportMeasuredDataFromXMlFile(obj,project,uploadName,definitionName)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      uploadName - string
        %      definitionName - string
        %    Output:
        %      ImportMeasuredDataFromXMlFileResult - logical or numeric scalar (XML boolean)
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, uploadName = []; end
            if nargin < 4, definitionName = []; end
            ret = matlab.internal.callJava('importMeasuredDataFromXMlFile',obj.PortObj,project,...
                fromMATLAB({'ImportMeasuredDataFromXMlFile','uploadName'}, uploadName,'string',true,false),...
                fromMATLAB({'ImportMeasuredDataFromXMlFile','definitionName'}, definitionName,'string',true,false));
            ImportMeasuredDataFromXMlFileResult = toMATLAB(ret,'boolean',false);

        end

        function ExportProjectToNEP360Result = ExportProjectToNEP360(obj,projectName)
        %ExportProjectToNEP360  
        %  ExportProjectToNEP360Result = ExportProjectToNEP360(obj,projectName)  
        %    Inputs:
        %      obj - NeplanService object
        %      projectName - string
        %    Output:
        %      ExportProjectToNEP360Result - <a href="matlab:doc wsdl.neplanservice.base64Binary">base64Binary</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, projectName = []; end
            ret = matlab.internal.callJava('exportProjectToNEP360',obj.PortObj,fromMATLAB({'ExportProjectToNEP360','projectName'}, projectName,'string',true,false));
            ExportProjectToNEP360Result = wsdl.neplanservice.base64Binary.getInstance(ret,false);

        end

        function WriteMessageToLogFile(obj,project,text,logLvl)
        %WriteMessageToLogFile  
        %  WriteMessageToLogFile(obj,project,text,logLvl)  
        %    Inputs:
        %      obj - NeplanService object
        %      project - <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %      text - string
        %      logLvl - string
        %    Output:
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, project = []; end
            if ~isempty(project), project = project.getObj; end
            if nargin < 3, text = []; end
            if nargin < 4, logLvl = []; end
            obj.PortObj.writeMessageToLogFile(project,...
                fromMATLAB({'WriteMessageToLogFile','text'}, text,'string',true,false),...
                fromMATLAB({'WriteMessageToLogFile','logLvl'}, logLvl,'string',true,false));

        end

        function DeleteUserLogFileResult = DeleteUserLogFile(obj)
        %DeleteUserLogFile  
        %  DeleteUserLogFileResult = DeleteUserLogFile(obj)  
        %    Inputs:
        %      obj - NeplanService object
        %    Output:
        %      DeleteUserLogFileResult - logical or numeric scalar (XML boolean)
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            ret = matlab.internal.callJava('deleteUserLogFile',obj.PortObj);
            DeleteUserLogFileResult = toMATLAB(ret,'boolean',false);

        end

        function GetLogFileAsStringResult = GetLogFileAsString(obj)
        %GetLogFileAsString  
        %  GetLogFileAsStringResult = GetLogFileAsString(obj)  
        %    Inputs:
        %      obj - NeplanService object
        %    Output:
        %      GetLogFileAsStringResult - string
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            ret = matlab.internal.callJava('getLogFileAsString',obj.PortObj);
            GetLogFileAsStringResult = toMATLAB(ret,'string',false);

        end

        function GetLogFileAsListResult = GetLogFileAsList(obj)
        %GetLogFileAsList  
        %  GetLogFileAsListResult = GetLogFileAsList(obj)  
        %    Inputs:
        %      obj - NeplanService object
        %    Output:
        %      GetLogFileAsListResult - <a href="matlab:doc wsdl.neplanservice.ArrayOfstring">ArrayOfstring</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            ret = matlab.internal.callJava('getLogFileAsList',obj.PortObj);
            GetLogFileAsListResult = wsdl.neplanservice.ArrayOfstring.getInstance(ret,false);

        end

        function XMLUploadResult = XMLUpload(obj,stream)
        %XMLUpload  
        %  XMLUploadResult = XMLUpload(obj,stream)  
        %    Inputs:
        %      obj - NeplanService object
        %      stream - <a href="matlab:doc wsdl.neplanservice.base64Binary">base64Binary</a> object
        %    Output:
        %      XMLUploadResult - string
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, error(message('MATLAB:webservices:TooFewArgs', 'stream')), end
            if isempty(stream)
                error(message('MATLAB:webservices:EmptyArg', 'stream'))
            end
            ret = matlab.internal.callJava('xMLUpload',obj.PortObj,stream.getObj);
            XMLUploadResult = toMATLAB(ret,'string',false);

        end

        function CDEUploadResult = CDEUpload(obj,stream)
        %CDEUpload  
        %  CDEUploadResult = CDEUpload(obj,stream)  
        %    Inputs:
        %      obj - NeplanService object
        %      stream - <a href="matlab:doc wsdl.neplanservice.base64Binary">base64Binary</a> object
        %    Output:
        %      CDEUploadResult - string
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, error(message('MATLAB:webservices:TooFewArgs', 'stream')), end
            if isempty(stream)
                error(message('MATLAB:webservices:EmptyArg', 'stream'))
            end
            ret = matlab.internal.callJava('cDEUpload',obj.PortObj,stream.getObj);
            CDEUploadResult = toMATLAB(ret,'string',false);

        end

        function NDBUploadResult = NDBUpload(obj,stream)
        %NDBUpload  
        %  NDBUploadResult = NDBUpload(obj,stream)  
        %    Inputs:
        %      obj - NeplanService object
        %      stream - <a href="matlab:doc wsdl.neplanservice.base64Binary">base64Binary</a> object
        %    Output:
        %      NDBUploadResult - string
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, error(message('MATLAB:webservices:TooFewArgs', 'stream')), end
            if isempty(stream)
                error(message('MATLAB:webservices:EmptyArg', 'stream'))
            end
            ret = matlab.internal.callJava('nDBUpload',obj.PortObj,stream.getObj);
            NDBUploadResult = toMATLAB(ret,'string',false);

        end

        function Nep360UploadResult = Nep360Upload(obj,stream)
        %Nep360Upload  
        %  Nep360UploadResult = Nep360Upload(obj,stream)  
        %    Inputs:
        %      obj - NeplanService object
        %      stream - <a href="matlab:doc wsdl.neplanservice.base64Binary">base64Binary</a> object
        %    Output:
        %      Nep360UploadResult - string
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, error(message('MATLAB:webservices:TooFewArgs', 'stream')), end
            if isempty(stream)
                error(message('MATLAB:webservices:EmptyArg', 'stream'))
            end
            ret = matlab.internal.callJava('nep360Upload',obj.PortObj,stream.getObj);
            Nep360UploadResult = toMATLAB(ret,'string',false);

        end

        function ZipUploadResult = ZipUpload(obj,stream)
        %ZipUpload  
        %  ZipUploadResult = ZipUpload(obj,stream)  
        %    Inputs:
        %      obj - NeplanService object
        %      stream - <a href="matlab:doc wsdl.neplanservice.base64Binary">base64Binary</a> object
        %    Output:
        %      ZipUploadResult - string
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, error(message('MATLAB:webservices:TooFewArgs', 'stream')), end
            if isempty(stream)
                error(message('MATLAB:webservices:EmptyArg', 'stream'))
            end
            ret = matlab.internal.callJava('zipUpload',obj.PortObj,stream.getObj);
            ZipUploadResult = toMATLAB(ret,'string',false);

        end

        function NepMeasUploadResult = NepMeasUpload(obj,stream)
        %NepMeasUpload  
        %  NepMeasUploadResult = NepMeasUpload(obj,stream)  
        %    Inputs:
        %      obj - NeplanService object
        %      stream - <a href="matlab:doc wsdl.neplanservice.base64Binary">base64Binary</a> object
        %    Output:
        %      NepMeasUploadResult - string
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, error(message('MATLAB:webservices:TooFewArgs', 'stream')), end
            if isempty(stream)
                error(message('MATLAB:webservices:EmptyArg', 'stream'))
            end
            ret = matlab.internal.callJava('nepMeasUpload',obj.PortObj,stream.getObj);
            NepMeasUploadResult = toMATLAB(ret,'string',false);

        end

        function GetUserLogFileResult = GetUserLogFile(obj)
        %GetUserLogFile  
        %  GetUserLogFileResult = GetUserLogFile(obj)  
        %    Inputs:
        %      obj - NeplanService object
        %    Output:
        %      GetUserLogFileResult - <a href="matlab:doc wsdl.neplanservice.base64Binary">base64Binary</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            ret = matlab.internal.callJava('getUserLogFile',obj.PortObj);
            GetUserLogFileResult = wsdl.neplanservice.base64Binary.getInstance(ret,false);

        end

        function GetAnaylsisLogFileResult = GetAnaylsisLogFile(obj,fileName)
        %GetAnaylsisLogFile  
        %  GetAnaylsisLogFileResult = GetAnaylsisLogFile(obj,fileName)  
        %    Inputs:
        %      obj - NeplanService object
        %      fileName - string
        %    Output:
        %      GetAnaylsisLogFileResult - <a href="matlab:doc wsdl.neplanservice.base64Binary">base64Binary</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, fileName = []; end
            ret = matlab.internal.callJava('getAnaylsisLogFile',obj.PortObj,fromMATLAB({'GetAnaylsisLogFile','fileName'}, fileName,'string',true,false));
            GetAnaylsisLogFileResult = wsdl.neplanservice.base64Binary.getInstance(ret,false);

        end

        function GetAnalysisResultFileResult = GetAnalysisResultFile(obj,fileName)
        %GetAnalysisResultFile  
        %  GetAnalysisResultFileResult = GetAnalysisResultFile(obj,fileName)  
        %    Inputs:
        %      obj - NeplanService object
        %      fileName - string
        %    Output:
        %      GetAnalysisResultFileResult - <a href="matlab:doc wsdl.neplanservice.base64Binary">base64Binary</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, fileName = []; end
            ret = matlab.internal.callJava('getAnalysisResultFile',obj.PortObj,fromMATLAB({'GetAnalysisResultFile','fileName'}, fileName,'string',true,false));
            GetAnalysisResultFileResult = wsdl.neplanservice.base64Binary.getInstance(ret,false);

        end

        function createDailyBackupResult = createDailyBackup(obj,isAzure,code)
        %createDailyBackup  
        %  createDailyBackupResult = createDailyBackup(obj,isAzure,code)  
        %    Inputs:
        %      obj - NeplanService object
        %      isAzure - logical or numeric scalar (XML boolean)
        %      code - string
        %    Output:
        %      createDailyBackupResult - string
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, isAzure = []; end
            if nargin < 3, code = []; end
            ret = matlab.internal.callJava('createDailyBackup',obj.PortObj,fromMATLAB({'createDailyBackup','isAzure'}, isAzure,'boolean',true,false),...
                fromMATLAB({'createDailyBackup','code'}, code,'string',true,false));
            createDailyBackupResult = toMATLAB(ret,'string',false);

        end

        function removeAllExpiredProjectsResult = removeAllExpiredProjects(obj,code)
        %removeAllExpiredProjects  
        %  removeAllExpiredProjectsResult = removeAllExpiredProjects(obj,code)  
        %    Inputs:
        %      obj - NeplanService object
        %      code - string
        %    Output:
        %      removeAllExpiredProjectsResult - string
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, code = []; end
            ret = matlab.internal.callJava('removeAllExpiredProjects',obj.PortObj,fromMATLAB({'removeAllExpiredProjects','code'}, code,'string',true,false));
            removeAllExpiredProjectsResult = toMATLAB(ret,'string',false);

        end

        function GetNamesOfElementsByTypeResult = GetNamesOfElementsByType(obj,projectName,elementType)
        %GetNamesOfElementsByType  
        %  GetNamesOfElementsByTypeResult = GetNamesOfElementsByType(obj,projectName,elementType)  
        %    Inputs:
        %      obj - NeplanService object
        %      projectName - string
        %      elementType - string
        %    Output:
        %      GetNamesOfElementsByTypeResult - <a href="matlab:doc wsdl.neplanservice.ArrayOfKeyValuePairOfstringstring">ArrayOfKeyValuePairOfstringstring</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, projectName = []; end
            if nargin < 3, elementType = []; end
            ret = matlab.internal.callJava('getNamesOfElementsByType',obj.PortObj,fromMATLAB({'GetNamesOfElementsByType','projectName'}, projectName,'string',true,false),...
                fromMATLAB({'GetNamesOfElementsByType','elementType'}, elementType,'string',true,false));
            GetNamesOfElementsByTypeResult = wsdl.neplanservice.ArrayOfKeyValuePairOfstringstring.getInstance(ret,false);

        end

        function FindSwitchStatusOfElementsResult = FindSwitchStatusOfElements(obj,projectName,GenLoadNames)
        %FindSwitchStatusOfElements  
        %  FindSwitchStatusOfElementsResult = FindSwitchStatusOfElements(obj,projectName,GenLoadNames)  
        %    Inputs:
        %      obj - NeplanService object
        %      projectName - string
        %      GenLoadNames - <a href="matlab:doc wsdl.neplanservice.ArrayOfstring">ArrayOfstring</a> object
        %    Output:
        %      FindSwitchStatusOfElementsResult - <a href="matlab:doc wsdl.neplanservice.ArrayOfKeyValuePairOfstringNeplanServiceConnectionInfomHiA0HHi">ArrayOfKeyValuePairOfstringNeplanServiceConnectionInfomHiA0HHi</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, projectName = []; end
            if nargin < 3, GenLoadNames = []; end
            if ~isempty(GenLoadNames), GenLoadNames = GenLoadNames.getObj; end
            ret = matlab.internal.callJava('findSwitchStatusOfElements',obj.PortObj,fromMATLAB({'FindSwitchStatusOfElements','projectName'}, projectName,'string',true,false),...
                GenLoadNames);
            FindSwitchStatusOfElementsResult = wsdl.neplanservice.ArrayOfKeyValuePairOfstringNeplanServiceConnectionInfomHiA0HHi.getInstance(ret,false);

        end

        function [Find_Voltage_Level_of_One_Port_ElementResult,Voltage] = Find_Voltage_Level_of_One_Port_Element(obj,projectName,elementName,Voltage)
        %Find_Voltage_Level_of_One_Port_Element  
        %  [Find_Voltage_Level_of_One_Port_ElementResult,Voltage] = Find_Voltage_Level_of_One_Port_Element(obj,projectName,elementName,Voltage)  
        %    Inputs:
        %      obj - NeplanService object
        %      projectName - string
        %      elementName - string
        %      Voltage - numeric scalar (XML double)
        %    Outputs:
        %      Find_Voltage_Level_of_One_Port_ElementResult - logical or numeric scalar (XML boolean)
        %      Voltage - numeric scalar (XML double)
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, projectName = []; end
            if nargin < 3, elementName = []; end
            if nargin < 4, Voltage = []; end
            Find_Voltage_Level_of_One_Port_ElementResult_Holder = javax.xml.ws.Holder;
            if nargin < 4
                Voltage_Holder = javax.xml.ws.Holder;
            else
                Voltage_Holder = javax.xml.ws.Holder(fromMATLAB({'Find_Voltage_Level_of_One_Port_Element','Voltage'}, Voltage,'double',true,false));
            end
            matlab.internal.callJava('findVoltageLevelOfOnePortElement',obj.PortObj,fromMATLAB({'Find_Voltage_Level_of_One_Port_Element','projectName'}, projectName,'string',true,false),...
                fromMATLAB({'Find_Voltage_Level_of_One_Port_Element','elementName'}, elementName,'string',true,false),...
                Voltage_Holder,...
                Find_Voltage_Level_of_One_Port_ElementResult_Holder);
            ret = Find_Voltage_Level_of_One_Port_ElementResult_Holder.value;
            Find_Voltage_Level_of_One_Port_ElementResult = toMATLAB(ret,'boolean',false);
            ret = Voltage_Holder.value;
            Voltage = toMATLAB(ret,'double',false);

        end

        function ChangeSwitchStatusOfElementsResult = ChangeSwitchStatusOfElements(obj,projectName,GenLoadName,connectionstatus)
        %ChangeSwitchStatusOfElements  
        %  ChangeSwitchStatusOfElementsResult = ChangeSwitchStatusOfElements(obj,projectName,GenLoadName,connectionstatus)  
        %    Inputs:
        %      obj - NeplanService object
        %      projectName - string
        %      GenLoadName - string
        %      connectionstatus - logical or numeric scalar (XML boolean)
        %    Output:
        %      ChangeSwitchStatusOfElementsResult - logical or numeric scalar (XML boolean)
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, projectName = []; end
            if nargin < 3, GenLoadName = []; end
            if nargin < 4, connectionstatus = []; end
            ret = matlab.internal.callJava('changeSwitchStatusOfElements',obj.PortObj,fromMATLAB({'ChangeSwitchStatusOfElements','projectName'}, projectName,'string',true,false),...
                fromMATLAB({'ChangeSwitchStatusOfElements','GenLoadName'}, GenLoadName,'string',true,false),...
                fromMATLAB({'ChangeSwitchStatusOfElements','connectionstatus'}, connectionstatus,'boolean',true,false));
            ChangeSwitchStatusOfElementsResult = toMATLAB(ret,'boolean',false);

        end

        function GetPQValuesLdSmAsmResult = GetPQValuesLdSmAsm(obj,projectName)
        %GetPQValuesLdSmAsm  
        %  GetPQValuesLdSmAsmResult = GetPQValuesLdSmAsm(obj,projectName)  
        %    Inputs:
        %      obj - NeplanService object
        %      projectName - string
        %    Output:
        %      GetPQValuesLdSmAsmResult - <a href="matlab:doc wsdl.neplanservice.ArrayOfNeplanServiceLoadGenerationInfo">ArrayOfNeplanServiceLoadGenerationInfo</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, projectName = []; end
            ret = matlab.internal.callJava('getPQValuesLdSmAsm',obj.PortObj,fromMATLAB({'GetPQValuesLdSmAsm','projectName'}, projectName,'string',true,false));
            GetPQValuesLdSmAsmResult = wsdl.neplanservice.ArrayOfNeplanServiceLoadGenerationInfo.getInstance(ret,false);

        end

        function SetPowerofLoadsGeneratorsResult = SetPowerofLoadsGenerators(obj,projectname,loadgens)
        %SetPowerofLoadsGenerators  
        %  SetPowerofLoadsGeneratorsResult = SetPowerofLoadsGenerators(obj,projectname,loadgens)  
        %    Inputs:
        %      obj - NeplanService object
        %      projectname - string
        %      loadgens - <a href="matlab:doc wsdl.neplanservice.ArrayOfNeplanServiceLoadGenerationInfo">ArrayOfNeplanServiceLoadGenerationInfo</a> object
        %    Output:
        %      SetPowerofLoadsGeneratorsResult - logical or numeric scalar (XML boolean)
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, projectname = []; end
            if nargin < 3, loadgens = []; end
            if ~isempty(loadgens), loadgens = loadgens.getObj; end
            ret = matlab.internal.callJava('setPowerofLoadsGenerators',obj.PortObj,fromMATLAB({'SetPowerofLoadsGenerators','projectname'}, projectname,'string',true,false),...
                loadgens);
            SetPowerofLoadsGeneratorsResult = toMATLAB(ret,'boolean',false);

        end

        function ChangeSwitchStatusOfElementListResult = ChangeSwitchStatusOfElementList(obj,projectName,elemids,connectionstatus)
        %ChangeSwitchStatusOfElementList  
        %  ChangeSwitchStatusOfElementListResult = ChangeSwitchStatusOfElementList(obj,projectName,elemids,connectionstatus)  
        %    Inputs:
        %      obj - NeplanService object
        %      projectName - string
        %      elemids - <a href="matlab:doc wsdl.neplanservice.ArrayOfguid">ArrayOfguid</a> object
        %      connectionstatus - logical or numeric scalar (XML boolean)
        %    Output:
        %      ChangeSwitchStatusOfElementListResult - logical or numeric scalar (XML boolean)
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, projectName = []; end
            if nargin < 3, elemids = []; end
            if ~isempty(elemids), elemids = elemids.getObj; end
            if nargin < 4, connectionstatus = []; end
            ret = matlab.internal.callJava('changeSwitchStatusOfElementList',obj.PortObj,fromMATLAB({'ChangeSwitchStatusOfElementList','projectName'}, projectName,'string',true,false),...
                elemids,...
                fromMATLAB({'ChangeSwitchStatusOfElementList','connectionstatus'}, connectionstatus,'boolean',true,false));
            ChangeSwitchStatusOfElementListResult = toMATLAB(ret,'boolean',false);

        end

        function ImportIEC_62325_451_2FilesAndDoCIMExportResult = ImportIEC_62325_451_2FilesAndDoCIMExport(obj,folderpath,variantID,username,onlyOneEQ,mAS)
        %ImportIEC_62325_451_2FilesAndDoCIMExport  
        %  ImportIEC_62325_451_2FilesAndDoCIMExportResult = ImportIEC_62325_451_2FilesAndDoCIMExport(obj,folderpath,variantID,username,onlyOneEQ,mAS)  
        %    Inputs:
        %      obj - NeplanService object
        %      folderpath - string
        %      variantID - <a href="matlab:doc wsdl.neplanservice.string">string</a> object
        %      username - string
        %      onlyOneEQ - logical or numeric scalar (XML boolean)
        %      mAS - string
        %    Output:
        %      ImportIEC_62325_451_2FilesAndDoCIMExportResult - <a href="matlab:doc wsdl.neplanservice.NeplanDomainServiceImportReturnInfo">NeplanDomainServiceImportReturnInfo</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, folderpath = []; end
            if nargin < 3, variantID = []; end
            if ~isempty(variantID), variantID = variantID.getObj; end
            if nargin < 4, username = []; end
            if nargin < 5, onlyOneEQ = []; end
            if nargin < 6, mAS = []; end
            ret = matlab.internal.callJava('importIEC623254512FilesAndDoCIMExport',obj.PortObj,fromMATLAB({'ImportIEC_62325_451_2FilesAndDoCIMExport','folderpath'}, folderpath,'string',true,false),...
                variantID,...
                fromMATLAB({'ImportIEC_62325_451_2FilesAndDoCIMExport','username'}, username,'string',true,false),...
                fromMATLAB({'ImportIEC_62325_451_2FilesAndDoCIMExport','onlyOneEQ'}, onlyOneEQ,'boolean',true,false),...
                fromMATLAB({'ImportIEC_62325_451_2FilesAndDoCIMExport','mAS'}, mAS,'string',true,false));
            ImportIEC_62325_451_2FilesAndDoCIMExportResult = wsdl.neplanservice.NeplanDomainServiceImportReturnInfo.getInstance(ret,false);

        end

        function GetFeederIDByNameResult = GetFeederIDByName(obj,ProjectName,VariantName,FeederNames)
        %GetFeederIDByName  
        %  GetFeederIDByNameResult = GetFeederIDByName(obj,ProjectName,VariantName,FeederNames)  
        %    Inputs:
        %      obj - NeplanService object
        %      ProjectName - string
        %      VariantName - string
        %      FeederNames - <a href="matlab:doc wsdl.neplanservice.ArrayOfstring">ArrayOfstring</a> object
        %    Output:
        %      GetFeederIDByNameResult - <a href="matlab:doc wsdl.neplanservice.ArrayOfguid">ArrayOfguid</a> object
        %
        % See also NeplanService.

            import matlab.wsdl.internal.*
            if nargin < 2, ProjectName = []; end
            if nargin < 3, VariantName = []; end
            if nargin < 4, FeederNames = []; end
            if ~isempty(FeederNames), FeederNames = FeederNames.getObj; end
            ret = matlab.internal.callJava('getFeederIDByName',obj.PortObj,fromMATLAB({'GetFeederIDByName','ProjectName'}, ProjectName,'string',true,false),...
                fromMATLAB({'GetFeederIDByName','VariantName'}, VariantName,'string',true,false),...
                FeederNames);
            GetFeederIDByNameResult = wsdl.neplanservice.ArrayOfguid.getInstance(ret,false);

        end

        function display(obj)
            disp(obj)
        end
    end

    % These are static convenience methods for creating objects
    % that need to be passed in as parameters to service methods 
    % or other convenience methods, to avoid having to invoke the
    % constructors in the package wsdl.neplanservice.  
    methods (Static)
 
        function retval = getArrayOfImportElementItem(ImportElementItem)
        % getArrayOfImportElementItem  returns a <a href="matlab:doc wsdl.neplanservice.ArrayOfImportElementItem">ArrayOfImportElementItem</a> object
        %   obj = <a href="matlab:doc NeplanService">NeplanService</a>.getArrayOfImportElementItem(ImportElementItem) 
         %     ImportElementItem - vector of <a href="matlab:doc wsdl.neplanservice.ImportElementItem">ImportElementItem</a>
     
            if nargin < 1, ImportElementItem = []; end            
            retval = wsdl.neplanservice.ArrayOfImportElementItem(ImportElementItem);
        end
 
        function retval = getImportElementItem(AreaName,Bay,BayesInStation,CableOrOHL,CoordinatesLabel1,CoordinatesLabel2,CoordinatesLabel3,CoordinatesLabel4,CoordinatesLink1,CoordinatesLink2,CoordinatesLink3,CoordinatesSymbol,Diameter,ElementInfo,Elevation,InstallationYear,IsForwardNetwork,IsInMaintenance,IsProjected,Layout,Load,LogicalSwitch,Material,NodeName1,NodeName2,NodeName3,NodeName4,OnGraphicLayer,OnPortNr,SubAreaName,Substation,SymbolAngle,SymbolName,SymbolSize,TechDataValues,Type,WaterLoadData,ZOrderNum,ZoneName,aliasName1,aliasName2,binaryData,description,elementType,length,libraryName,librarySubname,libraryType,librayType,listLineSections,listSubLoads,name,numConnections,phase,remove,un,xmlData,xmlInvest,xmlItemList,yLocation)
        % getImportElementItem  returns a <a href="matlab:doc wsdl.neplanservice.ImportElementItem">ImportElementItem</a> object
        %   obj = <a href="matlab:doc NeplanService">NeplanService</a>.getImportElementItem(AreaName,Bay,BayesInStation,CableOrOHL,CoordinatesLabel1,CoordinatesLabel2,CoordinatesLabel3,CoordinatesLabel4,CoordinatesLink1,CoordinatesLink2,CoordinatesLink3,CoordinatesSymbol,Diameter,ElementInfo,Elevation,InstallationYear,IsForwardNetwork,IsInMaintenance,IsProjected,Layout,Load,LogicalSwitch,Material,NodeName1,NodeName2,NodeName3,NodeName4,OnGraphicLayer,OnPortNr,SubAreaName,Substation,SymbolAngle,SymbolName,SymbolSize,TechDataValues,Type,WaterLoadData,ZOrderNum,ZoneName,aliasName1,aliasName2,binaryData,description,elementType,length,libraryName,librarySubname,libraryType,librayType,listLineSections,listSubLoads,name,numConnections,phase,remove,un,xmlData,xmlInvest,xmlItemList,yLocation) 
         %     AreaName - string
         %     Bay - string
         %     BayesInStation - <a href="matlab:doc wsdl.neplanservice.ArrayOfstring">ArrayOfstring</a>
         %     CableOrOHL - numeric scalar (XML short)
         %     CoordinatesLabel1 - <a href="matlab:doc wsdl.neplanservice.ArrayOfdouble">ArrayOfdouble</a>
         %     CoordinatesLabel2 - <a href="matlab:doc wsdl.neplanservice.ArrayOfdouble">ArrayOfdouble</a>
         %     CoordinatesLabel3 - <a href="matlab:doc wsdl.neplanservice.ArrayOfdouble">ArrayOfdouble</a>
         %     CoordinatesLabel4 - <a href="matlab:doc wsdl.neplanservice.ArrayOfdouble">ArrayOfdouble</a>
         %     CoordinatesLink1 - <a href="matlab:doc wsdl.neplanservice.ArrayOfdouble">ArrayOfdouble</a>
         %     CoordinatesLink2 - <a href="matlab:doc wsdl.neplanservice.ArrayOfdouble">ArrayOfdouble</a>
         %     CoordinatesLink3 - <a href="matlab:doc wsdl.neplanservice.ArrayOfdouble">ArrayOfdouble</a>
         %     CoordinatesSymbol - <a href="matlab:doc wsdl.neplanservice.ArrayOfdouble">ArrayOfdouble</a>
         %     Diameter - numeric scalar (XML double)
         %     ElementInfo - string
         %     Elevation - numeric scalar (XML double)
         %     InstallationYear - numeric scalar (XML int)
         %     IsForwardNetwork - logical or numeric scalar (XML boolean)
         %     IsInMaintenance - logical or numeric scalar (XML boolean)
         %     IsProjected - logical or numeric scalar (XML boolean)
         %     Layout - numeric scalar (XML short)
         %     Load - <a href="matlab:doc wsdl.neplanservice.LoadData">LoadData</a>
         %     LogicalSwitch - numeric scalar (XML int)
         %     Material - numeric scalar (XML short)
         %     NodeName1 - string
         %     NodeName2 - string
         %     NodeName3 - string
         %     NodeName4 - string
         %     OnGraphicLayer - string
         %     OnPortNr - numeric scalar (XML short)
         %     SubAreaName - string
         %     Substation - string
         %     SymbolAngle - numeric scalar (XML double)
         %     SymbolName - string
         %     SymbolSize - numeric scalar (XML double)
         %     TechDataValues - <a href="matlab:doc wsdl.neplanservice.ArrayOfTechDataValue">ArrayOfTechDataValue</a>
         %     Type - numeric scalar (XML short)
         %     WaterLoadData - <a href="matlab:doc wsdl.neplanservice.WaterLoadData">WaterLoadData</a>
         %     ZOrderNum - numeric scalar (XML int)
         %     ZoneName - string
         %     aliasName1 - string
         %     aliasName2 - string
         %     binaryData - vector of numbers 0-255 (XML base64Binary)
         %     description - string
         %     elementType - string
         %     length - numeric scalar (XML double)
         %     libraryName - string
         %     librarySubname - string
         %     libraryType - string
         %     librayType - string
         %     listLineSections - <a href="matlab:doc wsdl.neplanservice.ArrayOfLineSectionData">ArrayOfLineSectionData</a>
         %     listSubLoads - <a href="matlab:doc wsdl.neplanservice.ArrayOfLoadData">ArrayOfLoadData</a>
         %     name - string
         %     numConnections - numeric scalar (XML short)
         %     phase - numeric scalar (XML short)
         %     remove - logical or numeric scalar (XML boolean)
         %     un - numeric scalar (XML double)
         %     xmlData - string
         %     xmlInvest - string
         %     xmlItemList - string
         %     yLocation - numeric scalar (XML float)
     
            if nargin < 1, AreaName = []; end
            if nargin < 2, Bay = []; end
            if nargin < 3, BayesInStation = []; end
            if nargin < 4, CableOrOHL = []; end
            if nargin < 5, CoordinatesLabel1 = []; end
            if nargin < 6, CoordinatesLabel2 = []; end
            if nargin < 7, CoordinatesLabel3 = []; end
            if nargin < 8, CoordinatesLabel4 = []; end
            if nargin < 9, CoordinatesLink1 = []; end
            if nargin < 10, CoordinatesLink2 = []; end
            if nargin < 11, CoordinatesLink3 = []; end
            if nargin < 12, CoordinatesSymbol = []; end
            if nargin < 13, Diameter = []; end
            if nargin < 14, ElementInfo = []; end
            if nargin < 15, Elevation = []; end
            if nargin < 16, InstallationYear = []; end
            if nargin < 17, IsForwardNetwork = []; end
            if nargin < 18, IsInMaintenance = []; end
            if nargin < 19, IsProjected = []; end
            if nargin < 20, Layout = []; end
            if nargin < 21, Load = []; end
            if nargin < 22, LogicalSwitch = []; end
            if nargin < 23, Material = []; end
            if nargin < 24, NodeName1 = []; end
            if nargin < 25, NodeName2 = []; end
            if nargin < 26, NodeName3 = []; end
            if nargin < 27, NodeName4 = []; end
            if nargin < 28, OnGraphicLayer = []; end
            if nargin < 29, OnPortNr = []; end
            if nargin < 30, SubAreaName = []; end
            if nargin < 31, Substation = []; end
            if nargin < 32, SymbolAngle = []; end
            if nargin < 33, SymbolName = []; end
            if nargin < 34, SymbolSize = []; end
            if nargin < 35, TechDataValues = []; end
            if nargin < 36, Type = []; end
            if nargin < 37, WaterLoadData = []; end
            if nargin < 38, ZOrderNum = []; end
            if nargin < 39, ZoneName = []; end
            if nargin < 40, aliasName1 = []; end
            if nargin < 41, aliasName2 = []; end
            if nargin < 42, binaryData = []; end
            if nargin < 43, description = []; end
            if nargin < 44, elementType = []; end
            if nargin < 45, length = []; end
            if nargin < 46, libraryName = []; end
            if nargin < 47, librarySubname = []; end
            if nargin < 48, libraryType = []; end
            if nargin < 49, librayType = []; end
            if nargin < 50, listLineSections = []; end
            if nargin < 51, listSubLoads = []; end
            if nargin < 52, name = []; end
            if nargin < 53, numConnections = []; end
            if nargin < 54, phase = []; end
            if nargin < 55, remove = []; end
            if nargin < 56, un = []; end
            if nargin < 57, xmlData = []; end
            if nargin < 58, xmlInvest = []; end
            if nargin < 59, xmlItemList = []; end
            if nargin < 60, yLocation = []; end            
            retval = wsdl.neplanservice.ImportElementItem(AreaName,Bay,BayesInStation,CableOrOHL,CoordinatesLabel1,CoordinatesLabel2,CoordinatesLabel3,CoordinatesLabel4,CoordinatesLink1,CoordinatesLink2,CoordinatesLink3,CoordinatesSymbol,Diameter,ElementInfo,Elevation,InstallationYear,IsForwardNetwork,IsInMaintenance,IsProjected,Layout,Load,LogicalSwitch,Material,NodeName1,NodeName2,NodeName3,NodeName4,OnGraphicLayer,OnPortNr,SubAreaName,Substation,SymbolAngle,SymbolName,SymbolSize,TechDataValues,Type,WaterLoadData,ZOrderNum,ZoneName,aliasName1,aliasName2,binaryData,description,elementType,length,libraryName,librarySubname,libraryType,librayType,listLineSections,listSubLoads,name,numConnections,phase,remove,un,xmlData,xmlInvest,xmlItemList,yLocation);
        end
 
        function retval = getArrayOfTechDataValue(TechDataValue)
        % getArrayOfTechDataValue  returns a <a href="matlab:doc wsdl.neplanservice.ArrayOfTechDataValue">ArrayOfTechDataValue</a> object
        %   obj = <a href="matlab:doc NeplanService">NeplanService</a>.getArrayOfTechDataValue(TechDataValue) 
         %     TechDataValue - vector of <a href="matlab:doc wsdl.neplanservice.TechDataValue">TechDataValue</a>
     
            if nargin < 1, TechDataValue = []; end            
            retval = wsdl.neplanservice.ArrayOfTechDataValue(TechDataValue);
        end
 
        function retval = getTechDataValue(Value,VariableName)
        % getTechDataValue  returns a <a href="matlab:doc wsdl.neplanservice.TechDataValue">TechDataValue</a> object
        %   obj = <a href="matlab:doc NeplanService">NeplanService</a>.getTechDataValue(Value,VariableName) 
         %     Value - string
         %     VariableName - string
     
            if nargin < 1, Value = []; end
            if nargin < 2, VariableName = []; end            
            retval = wsdl.neplanservice.TechDataValue(Value,VariableName);
        end
 
        function retval = getArrayOfImportFeederItem(ImportFeederItem)
        % getArrayOfImportFeederItem  returns a <a href="matlab:doc wsdl.neplanservice.ArrayOfImportFeederItem">ArrayOfImportFeederItem</a> object
        %   obj = <a href="matlab:doc NeplanService">NeplanService</a>.getArrayOfImportFeederItem(ImportFeederItem) 
         %     ImportFeederItem - vector of <a href="matlab:doc wsdl.neplanservice.ImportFeederItem">ImportFeederItem</a>
     
            if nargin < 1, ImportFeederItem = []; end            
            retval = wsdl.neplanservice.ArrayOfImportFeederItem(ImportFeederItem);
        end
 
        function retval = getImportFeederItem(PloadFactor,QloadFactor,atElementName,atNodeName,color,name)
        % getImportFeederItem  returns a <a href="matlab:doc wsdl.neplanservice.ImportFeederItem">ImportFeederItem</a> object
        %   obj = <a href="matlab:doc NeplanService">NeplanService</a>.getImportFeederItem(PloadFactor,QloadFactor,atElementName,atNodeName,color,name) 
         %     PloadFactor - numeric scalar (XML double)
         %     QloadFactor - numeric scalar (XML double)
         %     atElementName - string
         %     atNodeName - string
         %     color - string
         %     name - string
     
            if nargin < 1, PloadFactor = []; end
            if nargin < 2, QloadFactor = []; end
            if nargin < 3, atElementName = []; end
            if nargin < 4, atNodeName = []; end
            if nargin < 5, color = []; end
            if nargin < 6, name = []; end            
            retval = wsdl.neplanservice.ImportFeederItem(PloadFactor,QloadFactor,atElementName,atNodeName,color,name);
        end
 
        function retval = getNeplanServiceConnectionInfo(ConnectionStatus,CoordinateX,CoordinateY,Elem_Connection_ID,Elem_ID,Elem_Name,ElementType,MPRN,Phases)
        % getNeplanServiceConnectionInfo  returns a <a href="matlab:doc wsdl.neplanservice.NeplanServiceConnectionInfo">NeplanServiceConnectionInfo</a> object
        %   obj = <a href="matlab:doc NeplanService">NeplanService</a>.getNeplanServiceConnectionInfo(ConnectionStatus,CoordinateX,CoordinateY,Elem_Connection_ID,Elem_ID,Elem_Name,ElementType,MPRN,Phases) 
         %     ConnectionStatus - string
         %     CoordinateX - string
         %     CoordinateY - string
         %     Elem_Connection_ID - string
         %     Elem_ID - string
         %     Elem_Name - string
         %     ElementType - string
         %     MPRN - string
         %     Phases - string
     
            if nargin < 1, ConnectionStatus = []; end
            if nargin < 2, CoordinateX = []; end
            if nargin < 3, CoordinateY = []; end
            if nargin < 4, Elem_Connection_ID = []; end
            if nargin < 5, Elem_ID = []; end
            if nargin < 6, Elem_Name = []; end
            if nargin < 7, ElementType = []; end
            if nargin < 8, MPRN = []; end
            if nargin < 9, Phases = []; end            
            retval = wsdl.neplanservice.NeplanServiceConnectionInfo(ConnectionStatus,CoordinateX,CoordinateY,Elem_Connection_ID,Elem_ID,Elem_Name,ElementType,MPRN,Phases);
        end
 
        function retval = getArrayOfNeplanServiceLoadGenerationInfo(NeplanService_LoadGeneration_info)
        % getArrayOfNeplanServiceLoadGenerationInfo  returns a <a href="matlab:doc wsdl.neplanservice.ArrayOfNeplanServiceLoadGenerationInfo">ArrayOfNeplanServiceLoadGenerationInfo</a> object
        %   obj = <a href="matlab:doc NeplanService">NeplanService</a>.getArrayOfNeplanServiceLoadGenerationInfo(NeplanService_LoadGeneration_info) 
         %     NeplanService_LoadGeneration_info - vector of <a href="matlab:doc wsdl.neplanservice.NeplanServiceLoadGenerationInfo">NeplanServiceLoadGenerationInfo</a>
     
            if nargin < 1, NeplanService_LoadGeneration_info = []; end            
            retval = wsdl.neplanservice.ArrayOfNeplanServiceLoadGenerationInfo(NeplanService_LoadGeneration_info);
        end
 
        function retval = getNeplanServiceLoadGenerationInfo(P,Q,Unit,elementname,elementtype,elemid)
        % getNeplanServiceLoadGenerationInfo  returns a <a href="matlab:doc wsdl.neplanservice.NeplanServiceLoadGenerationInfo">NeplanServiceLoadGenerationInfo</a> object
        %   obj = <a href="matlab:doc NeplanService">NeplanService</a>.getNeplanServiceLoadGenerationInfo(P,Q,Unit,elementname,elementtype,elemid) 
         %     P - numeric scalar (XML double)
         %     Q - numeric scalar (XML double)
         %     Unit - numeric scalar (XML short)
         %     elementname - string
         %     elementtype - string
         %     elemid - string
     
            if nargin < 1, P = []; end
            if nargin < 2, Q = []; end
            if nargin < 3, Unit = []; end
            if nargin < 4, elementname = []; end
            if nargin < 5, elementtype = []; end
            if nargin < 6, elemid = []; end            
            retval = wsdl.neplanservice.NeplanServiceLoadGenerationInfo(P,Q,Unit,elementname,elementtype,elemid);
        end
 
        function retval = getArrayOfdouble(double)
        % getArrayOfdouble  returns a <a href="matlab:doc wsdl.neplanservice.ArrayOfdouble">ArrayOfdouble</a> object
        %   obj = <a href="matlab:doc NeplanService">NeplanService</a>.getArrayOfdouble(double) 
         %     double - numeric vector (XML double)
     
            if nargin < 1, double = []; end            
            retval = wsdl.neplanservice.ArrayOfdouble(double);
        end
 
        function retval = getArrayOfstring(string)
        % getArrayOfstring  returns a <a href="matlab:doc wsdl.neplanservice.ArrayOfstring">ArrayOfstring</a> object
        %   obj = <a href="matlab:doc NeplanService">NeplanService</a>.getArrayOfstring(string) 
         %     string - string or cell array of strings
     
            if nargin < 1, string = []; end            
            retval = wsdl.neplanservice.ArrayOfstring(string);
        end
 
        function retval = getArrayOfguid(guid)
        % getArrayOfguid  returns a <a href="matlab:doc wsdl.neplanservice.ArrayOfguid">ArrayOfguid</a> object
        %   obj = <a href="matlab:doc NeplanService">NeplanService</a>.getArrayOfguid(guid) 
         %     guid - string or cell array of strings
     
            if nargin < 1, guid = []; end            
            retval = wsdl.neplanservice.ArrayOfguid(guid);
        end
 
        function retval = getExternalProject(AngleXY,AreaID,CalcNameID,CoordinateUnits,DiagramID,DirectionUpY,FactorXY,GraphicLayerID,GroupID,ImportWithGraphic,Info,LayerMinX,LayerMinY,LayerUnitXY,LibraryName,LibrarySubname,LogName,NumDiagram,NumGraphic,ProjectID,ProjectName,ReturnCode,SridID,SubAreaID,VariantID,Version,WorldCoordMaxX,WorldCoordMaxY,WorldCoordMinX,WorldCoordMinY,ZoneID)
        % getExternalProject  returns a <a href="matlab:doc wsdl.neplanservice.ExternalProject">ExternalProject</a> object
        %   obj = <a href="matlab:doc NeplanService">NeplanService</a>.getExternalProject(AngleXY,AreaID,CalcNameID,CoordinateUnits,DiagramID,DirectionUpY,FactorXY,GraphicLayerID,GroupID,ImportWithGraphic,Info,LayerMinX,LayerMinY,LayerUnitXY,LibraryName,LibrarySubname,LogName,NumDiagram,NumGraphic,ProjectID,ProjectName,ReturnCode,SridID,SubAreaID,VariantID,Version,WorldCoordMaxX,WorldCoordMaxY,WorldCoordMinX,WorldCoordMinY,ZoneID) 
         %     AngleXY - numeric scalar (XML double)
         %     AreaID - string
         %     CalcNameID - string
         %     CoordinateUnits - numeric scalar (XML int)
         %     DiagramID - string
         %     DirectionUpY - logical or numeric scalar (XML boolean)
         %     FactorXY - numeric scalar (XML double)
         %     GraphicLayerID - string
         %     GroupID - string
         %     ImportWithGraphic - logical or numeric scalar (XML boolean)
         %     Info - string
         %     LayerMinX - numeric scalar (XML double)
         %     LayerMinY - numeric scalar (XML double)
         %     LayerUnitXY - numeric scalar (XML short)
         %     LibraryName - string
         %     LibrarySubname - string
         %     LogName - string
         %     NumDiagram - numeric scalar (XML int)
         %     NumGraphic - numeric scalar (XML int)
         %     ProjectID - string
         %     ProjectName - string
         %     ReturnCode - numeric scalar (XML int)
         %     SridID - string
         %     SubAreaID - string
         %     VariantID - string
         %     Version - numeric scalar (XML double)
         %     WorldCoordMaxX - numeric scalar (XML double)
         %     WorldCoordMaxY - numeric scalar (XML double)
         %     WorldCoordMinX - numeric scalar (XML double)
         %     WorldCoordMinY - numeric scalar (XML double)
         %     ZoneID - string
     
            if nargin < 1, AngleXY = []; end
            if nargin < 2, AreaID = []; end
            if nargin < 3, CalcNameID = []; end
            if nargin < 4, CoordinateUnits = []; end
            if nargin < 5, DiagramID = []; end
            if nargin < 6, DirectionUpY = []; end
            if nargin < 7, FactorXY = []; end
            if nargin < 8, GraphicLayerID = []; end
            if nargin < 9, GroupID = []; end
            if nargin < 10, ImportWithGraphic = []; end
            if nargin < 11, Info = []; end
            if nargin < 12, LayerMinX = []; end
            if nargin < 13, LayerMinY = []; end
            if nargin < 14, LayerUnitXY = []; end
            if nargin < 15, LibraryName = []; end
            if nargin < 16, LibrarySubname = []; end
            if nargin < 17, LogName = []; end
            if nargin < 18, NumDiagram = []; end
            if nargin < 19, NumGraphic = []; end
            if nargin < 20, ProjectID = []; end
            if nargin < 21, ProjectName = []; end
            if nargin < 22, ReturnCode = []; end
            if nargin < 23, SridID = []; end
            if nargin < 24, SubAreaID = []; end
            if nargin < 25, VariantID = []; end
            if nargin < 26, Version = []; end
            if nargin < 27, WorldCoordMaxX = []; end
            if nargin < 28, WorldCoordMaxY = []; end
            if nargin < 29, WorldCoordMinX = []; end
            if nargin < 30, WorldCoordMinY = []; end
            if nargin < 31, ZoneID = []; end            
            retval = wsdl.neplanservice.ExternalProject(AngleXY,AreaID,CalcNameID,CoordinateUnits,DiagramID,DirectionUpY,FactorXY,GraphicLayerID,GroupID,ImportWithGraphic,Info,LayerMinX,LayerMinY,LayerUnitXY,LibraryName,LibrarySubname,LogName,NumDiagram,NumGraphic,ProjectID,ProjectName,ReturnCode,SridID,SubAreaID,VariantID,Version,WorldCoordMaxX,WorldCoordMaxY,WorldCoordMinX,WorldCoordMinY,ZoneID);
        end
 
        function retval = getLoadData(ConnectionType,LfType,Name,NumCustomers,Phase,ScalingType,Unit,Value1,Value2)
        % getLoadData  returns a <a href="matlab:doc wsdl.neplanservice.LoadData">LoadData</a> object
        %   obj = <a href="matlab:doc NeplanService">NeplanService</a>.getLoadData(ConnectionType,LfType,Name,NumCustomers,Phase,ScalingType,Unit,Value1,Value2) 
         %     ConnectionType - numeric scalar (XML short)
         %     LfType - numeric scalar (XML short)
         %     Name - string
         %     NumCustomers - numeric scalar (XML int)
         %     Phase - numeric scalar (XML short)
         %     ScalingType - string
         %     Unit - numeric scalar (XML short)
         %     Value1 - numeric scalar (XML double)
         %     Value2 - numeric scalar (XML double)
     
            if nargin < 1, ConnectionType = []; end
            if nargin < 2, LfType = []; end
            if nargin < 3, Name = []; end
            if nargin < 4, NumCustomers = []; end
            if nargin < 5, Phase = []; end
            if nargin < 6, ScalingType = []; end
            if nargin < 7, Unit = []; end
            if nargin < 8, Value1 = []; end
            if nargin < 9, Value2 = []; end            
            retval = wsdl.neplanservice.LoadData(ConnectionType,LfType,Name,NumCustomers,Phase,ScalingType,Unit,Value1,Value2);
        end
 
        function retval = getWaterLoadData(LoadType,QDemand,Qunit)
        % getWaterLoadData  returns a <a href="matlab:doc wsdl.neplanservice.WaterLoadData">WaterLoadData</a> object
        %   obj = <a href="matlab:doc NeplanService">NeplanService</a>.getWaterLoadData(LoadType,QDemand,Qunit) 
         %     LoadType - string
         %     QDemand - numeric scalar (XML double)
         %     Qunit - numeric scalar (XML short)
     
            if nargin < 1, LoadType = []; end
            if nargin < 2, QDemand = []; end
            if nargin < 3, Qunit = []; end            
            retval = wsdl.neplanservice.WaterLoadData(LoadType,QDemand,Qunit);
        end
 
        function retval = getArrayOfLineSectionData(LineSectionData)
        % getArrayOfLineSectionData  returns a <a href="matlab:doc wsdl.neplanservice.ArrayOfLineSectionData">ArrayOfLineSectionData</a> object
        %   obj = <a href="matlab:doc NeplanService">NeplanService</a>.getArrayOfLineSectionData(LineSectionData) 
         %     LineSectionData - vector of <a href="matlab:doc wsdl.neplanservice.LineSectionData">LineSectionData</a>
     
            if nargin < 1, LineSectionData = []; end            
            retval = wsdl.neplanservice.ArrayOfLineSectionData(LineSectionData);
        end
 
        function retval = getLineSectionData(CableOrOHL,Description,Diameter,InstallationYear,Layout,Length,LibraryType,Material,Name)
        % getLineSectionData  returns a <a href="matlab:doc wsdl.neplanservice.LineSectionData">LineSectionData</a> object
        %   obj = <a href="matlab:doc NeplanService">NeplanService</a>.getLineSectionData(CableOrOHL,Description,Diameter,InstallationYear,Layout,Length,LibraryType,Material,Name) 
         %     CableOrOHL - numeric scalar (XML short)
         %     Description - string
         %     Diameter - numeric scalar (XML double)
         %     InstallationYear - numeric scalar (XML int)
         %     Layout - numeric scalar (XML short)
         %     Length - numeric scalar (XML double)
         %     LibraryType - string
         %     Material - numeric scalar (XML short)
         %     Name - string
     
            if nargin < 1, CableOrOHL = []; end
            if nargin < 2, Description = []; end
            if nargin < 3, Diameter = []; end
            if nargin < 4, InstallationYear = []; end
            if nargin < 5, Layout = []; end
            if nargin < 6, Length = []; end
            if nargin < 7, LibraryType = []; end
            if nargin < 8, Material = []; end
            if nargin < 9, Name = []; end            
            retval = wsdl.neplanservice.LineSectionData(CableOrOHL,Description,Diameter,InstallationYear,Layout,Length,LibraryType,Material,Name);
        end
 
        function retval = getArrayOfLoadData(LoadData)
        % getArrayOfLoadData  returns a <a href="matlab:doc wsdl.neplanservice.ArrayOfLoadData">ArrayOfLoadData</a> object
        %   obj = <a href="matlab:doc NeplanService">NeplanService</a>.getArrayOfLoadData(LoadData) 
         %     LoadData - vector of <a href="matlab:doc wsdl.neplanservice.LoadData">LoadData</a>
     
            if nargin < 1, LoadData = []; end            
            retval = wsdl.neplanservice.ArrayOfLoadData(LoadData);
        end
 
        function retval = getAnalysisParameterSettings(AnschlKnID,CalcOnlyLoadedData,ConXML,DoRecondResizing,EleID,ExcludeElementsInMaint,ExcludeElementsInstalled,ExcludeOutOfOperElements,ExcludeProjectedElements,ExclutionDateForInstalled,ExclutionDateForOutOfOper,IncludeBoundaryElementsInCalculation,ItemTypeNameForRecondResizingField,ItemlibNameForRecondResizing,ItemlibSubNameForRecondResizing,LibItemTypeNameForRecondResizing,LibNameForRecondResizing,LibSubNameForRecondResizing,ListOfRelayIDs,ListOfSelectedFeederIDs,ListOfSelectedPartNetwIDs,ListOfShortCircuitLocationIDs,LogName,MediumType,NCalc,RelayID,SelectedRecondResizElements)
        % getAnalysisParameterSettings  returns a <a href="matlab:doc wsdl.neplanservice.AnalysisParameterSettings">AnalysisParameterSettings</a> object
        %   obj = <a href="matlab:doc NeplanService">NeplanService</a>.getAnalysisParameterSettings(AnschlKnID,CalcOnlyLoadedData,ConXML,DoRecondResizing,EleID,ExcludeElementsInMaint,ExcludeElementsInstalled,ExcludeOutOfOperElements,ExcludeProjectedElements,ExclutionDateForInstalled,ExclutionDateForOutOfOper,IncludeBoundaryElementsInCalculation,ItemTypeNameForRecondResizingField,ItemlibNameForRecondResizing,ItemlibSubNameForRecondResizing,LibItemTypeNameForRecondResizing,LibNameForRecondResizing,LibSubNameForRecondResizing,ListOfRelayIDs,ListOfSelectedFeederIDs,ListOfSelectedPartNetwIDs,ListOfShortCircuitLocationIDs,LogName,MediumType,NCalc,RelayID,SelectedRecondResizElements) 
         %     AnschlKnID - string
         %     CalcOnlyLoadedData - logical or numeric scalar (XML boolean)
         %     ConXML - string
         %     DoRecondResizing - logical or numeric scalar (XML boolean)
         %     EleID - string
         %     ExcludeElementsInMaint - logical or numeric scalar (XML boolean)
         %     ExcludeElementsInstalled - logical or numeric scalar (XML boolean)
         %     ExcludeOutOfOperElements - logical or numeric scalar (XML boolean)
         %     ExcludeProjectedElements - logical or numeric scalar (XML boolean)
         %     ExclutionDateForInstalled - string
         %     ExclutionDateForOutOfOper - string
         %     IncludeBoundaryElementsInCalculation - logical or numeric scalar (XML boolean)
         %     ItemTypeNameForRecondResizingField - string
         %     ItemlibNameForRecondResizing - string
         %     ItemlibSubNameForRecondResizing - string
         %     LibItemTypeNameForRecondResizing - string
         %     LibNameForRecondResizing - string
         %     LibSubNameForRecondResizing - string
         %     ListOfRelayIDs - <a href="matlab:doc wsdl.neplanservice.ArrayOfguid">ArrayOfguid</a>
         %     ListOfSelectedFeederIDs - <a href="matlab:doc wsdl.neplanservice.ArrayOfguid">ArrayOfguid</a>
         %     ListOfSelectedPartNetwIDs - <a href="matlab:doc wsdl.neplanservice.ArrayOfguid">ArrayOfguid</a>
         %     ListOfShortCircuitLocationIDs - <a href="matlab:doc wsdl.neplanservice.ArrayOfguid">ArrayOfguid</a>
         %     LogName - string
         %     MediumType - string
         %     NCalc - numeric scalar (XML int)
         %     RelayID - string
         %     SelectedRecondResizElements - <a href="matlab:doc wsdl.neplanservice.ArrayOfguid">ArrayOfguid</a>
     
            if nargin < 1, AnschlKnID = []; end
            if nargin < 2, CalcOnlyLoadedData = []; end
            if nargin < 3, ConXML = []; end
            if nargin < 4, DoRecondResizing = []; end
            if nargin < 5, EleID = []; end
            if nargin < 6, ExcludeElementsInMaint = []; end
            if nargin < 7, ExcludeElementsInstalled = []; end
            if nargin < 8, ExcludeOutOfOperElements = []; end
            if nargin < 9, ExcludeProjectedElements = []; end
            if nargin < 10, ExclutionDateForInstalled = []; end
            if nargin < 11, ExclutionDateForOutOfOper = []; end
            if nargin < 12, IncludeBoundaryElementsInCalculation = []; end
            if nargin < 13, ItemTypeNameForRecondResizingField = []; end
            if nargin < 14, ItemlibNameForRecondResizing = []; end
            if nargin < 15, ItemlibSubNameForRecondResizing = []; end
            if nargin < 16, LibItemTypeNameForRecondResizing = []; end
            if nargin < 17, LibNameForRecondResizing = []; end
            if nargin < 18, LibSubNameForRecondResizing = []; end
            if nargin < 19, ListOfRelayIDs = []; end
            if nargin < 20, ListOfSelectedFeederIDs = []; end
            if nargin < 21, ListOfSelectedPartNetwIDs = []; end
            if nargin < 22, ListOfShortCircuitLocationIDs = []; end
            if nargin < 23, LogName = []; end
            if nargin < 24, MediumType = []; end
            if nargin < 25, NCalc = []; end
            if nargin < 26, RelayID = []; end
            if nargin < 27, SelectedRecondResizElements = []; end            
            retval = wsdl.neplanservice.AnalysisParameterSettings(AnschlKnID,CalcOnlyLoadedData,ConXML,DoRecondResizing,EleID,ExcludeElementsInMaint,ExcludeElementsInstalled,ExcludeOutOfOperElements,ExcludeProjectedElements,ExclutionDateForInstalled,ExclutionDateForOutOfOper,IncludeBoundaryElementsInCalculation,ItemTypeNameForRecondResizingField,ItemlibNameForRecondResizing,ItemlibSubNameForRecondResizing,LibItemTypeNameForRecondResizing,LibNameForRecondResizing,LibSubNameForRecondResizing,ListOfRelayIDs,ListOfSelectedFeederIDs,ListOfSelectedPartNetwIDs,ListOfShortCircuitLocationIDs,LogName,MediumType,NCalc,RelayID,SelectedRecondResizElements);
        end
 
        function retval = getAnalysisReturnInfoCableSizingLineData(BinaryData,LibType,LineID)
        % getAnalysisReturnInfoCableSizingLineData  returns a <a href="matlab:doc wsdl.neplanservice.AnalysisReturnInfoCableSizingLineData">AnalysisReturnInfoCableSizingLineData</a> object
        %   obj = <a href="matlab:doc NeplanService">NeplanService</a>.getAnalysisReturnInfoCableSizingLineData(BinaryData,LibType,LineID) 
         %     BinaryData - vector of numbers 0-255 (XML base64Binary)
         %     LibType - string
         %     LineID - string
     
            if nargin < 1, BinaryData = []; end
            if nargin < 2, LibType = []; end
            if nargin < 3, LineID = []; end            
            retval = wsdl.neplanservice.AnalysisReturnInfoCableSizingLineData(BinaryData,LibType,LineID);
        end
 
        function retval = getAnalysisReturnInfoRelayResultData(ElementId,Factor,FaultedNodeId,I,Iang,R,RelayId,TripTime,TypeSC,U,Un,X,Z,Zang)
        % getAnalysisReturnInfoRelayResultData  returns a <a href="matlab:doc wsdl.neplanservice.AnalysisReturnInfoRelayResultData">AnalysisReturnInfoRelayResultData</a> object
        %   obj = <a href="matlab:doc NeplanService">NeplanService</a>.getAnalysisReturnInfoRelayResultData(ElementId,Factor,FaultedNodeId,I,Iang,R,RelayId,TripTime,TypeSC,U,Un,X,Z,Zang) 
         %     ElementId - string
         %     Factor - numeric scalar (XML double)
         %     FaultedNodeId - string
         %     I - numeric scalar (XML double)
         %     Iang - numeric scalar (XML double)
         %     R - numeric scalar (XML double)
         %     RelayId - string
         %     TripTime - numeric scalar (XML double)
         %     TypeSC - string
         %     U - numeric scalar (XML double)
         %     Un - numeric scalar (XML double)
         %     X - numeric scalar (XML double)
         %     Z - numeric scalar (XML double)
         %     Zang - numeric scalar (XML double)
     
            if nargin < 1, ElementId = []; end
            if nargin < 2, Factor = []; end
            if nargin < 3, FaultedNodeId = []; end
            if nargin < 4, I = []; end
            if nargin < 5, Iang = []; end
            if nargin < 6, R = []; end
            if nargin < 7, RelayId = []; end
            if nargin < 8, TripTime = []; end
            if nargin < 9, TypeSC = []; end
            if nargin < 10, U = []; end
            if nargin < 11, Un = []; end
            if nargin < 12, X = []; end
            if nargin < 13, Z = []; end
            if nargin < 14, Zang = []; end            
            retval = wsdl.neplanservice.AnalysisReturnInfoRelayResultData(ElementId,Factor,FaultedNodeId,I,Iang,R,RelayId,TripTime,TypeSC,U,Un,X,Z,Zang);
        end

    end
end


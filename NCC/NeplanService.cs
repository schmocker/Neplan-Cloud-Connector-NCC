//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Runtime.Serialization;

[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("", ClrNamespace="")]

namespace NCC
{
    using System.Runtime.Serialization;


    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name = "ExternalProject", Namespace = "http://schemas.datacontract.org/2004/07/NCC")]
    public partial class ExternalProject : object, System.Runtime.Serialization.IExtensibleDataObject
    {

        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;

        private double AngleXYField;

        private string AreaIDField;

        private string CalcNameIDField;

        private int CoordinateUnitsField;

        private string DiagramIDField;

        private bool DirectionUpYField;

        private double FactorXYField;

        private string GraphicLayerIDField;

        private string GroupIDField;

        private bool ImportWithGraphicField;

        private string InfoField;

        private double LayerMinXField;

        private double LayerMinYField;

        private short LayerUnitXYField;

        private string LibraryNameField;

        private string LibrarySubnameField;

        private string LogNameField;

        private int NumDiagramField;

        private int NumGraphicField;

        private string ProjectIDField;

        private string ProjectNameField;

        private int ReturnCodeField;

        private string SridIDField;

        private string SubAreaIDField;

        private string VariantIDField;

        private double VersionField;

        private double WorldCoordMaxXField;

        private double WorldCoordMaxYField;

        private double WorldCoordMinXField;

        private double WorldCoordMinYField;

        private string ZoneIDField;

        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public double AngleXY
        {
            get
            {
                return this.AngleXYField;
            }
            set
            {
                this.AngleXYField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AreaID
        {
            get
            {
                return this.AreaIDField;
            }
            set
            {
                this.AreaIDField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CalcNameID
        {
            get
            {
                return this.CalcNameIDField;
            }
            set
            {
                this.CalcNameIDField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CoordinateUnits
        {
            get
            {
                return this.CoordinateUnitsField;
            }
            set
            {
                this.CoordinateUnitsField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DiagramID
        {
            get
            {
                return this.DiagramIDField;
            }
            set
            {
                this.DiagramIDField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DirectionUpY
        {
            get
            {
                return this.DirectionUpYField;
            }
            set
            {
                this.DirectionUpYField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public double FactorXY
        {
            get
            {
                return this.FactorXYField;
            }
            set
            {
                this.FactorXYField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GraphicLayerID
        {
            get
            {
                return this.GraphicLayerIDField;
            }
            set
            {
                this.GraphicLayerIDField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupID
        {
            get
            {
                return this.GroupIDField;
            }
            set
            {
                this.GroupIDField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ImportWithGraphic
        {
            get
            {
                return this.ImportWithGraphicField;
            }
            set
            {
                this.ImportWithGraphicField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Info
        {
            get
            {
                return this.InfoField;
            }
            set
            {
                this.InfoField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public double LayerMinX
        {
            get
            {
                return this.LayerMinXField;
            }
            set
            {
                this.LayerMinXField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public double LayerMinY
        {
            get
            {
                return this.LayerMinYField;
            }
            set
            {
                this.LayerMinYField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public short LayerUnitXY
        {
            get
            {
                return this.LayerUnitXYField;
            }
            set
            {
                this.LayerUnitXYField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LibraryName
        {
            get
            {
                return this.LibraryNameField;
            }
            set
            {
                this.LibraryNameField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LibrarySubname
        {
            get
            {
                return this.LibrarySubnameField;
            }
            set
            {
                this.LibrarySubnameField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LogName
        {
            get
            {
                return this.LogNameField;
            }
            set
            {
                this.LogNameField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumDiagram
        {
            get
            {
                return this.NumDiagramField;
            }
            set
            {
                this.NumDiagramField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumGraphic
        {
            get
            {
                return this.NumGraphicField;
            }
            set
            {
                this.NumGraphicField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectID
        {
            get
            {
                return this.ProjectIDField;
            }
            set
            {
                this.ProjectIDField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectName
        {
            get
            {
                return this.ProjectNameField;
            }
            set
            {
                this.ProjectNameField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReturnCode
        {
            get
            {
                return this.ReturnCodeField;
            }
            set
            {
                this.ReturnCodeField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SridID
        {
            get
            {
                return this.SridIDField;
            }
            set
            {
                this.SridIDField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubAreaID
        {
            get
            {
                return this.SubAreaIDField;
            }
            set
            {
                this.SubAreaIDField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VariantID
        {
            get
            {
                return this.VariantIDField;
            }
            set
            {
                this.VariantIDField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Version
        {
            get
            {
                return this.VersionField;
            }
            set
            {
                this.VersionField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WorldCoordMaxX
        {
            get
            {
                return this.WorldCoordMaxXField;
            }
            set
            {
                this.WorldCoordMaxXField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WorldCoordMaxY
        {
            get
            {
                return this.WorldCoordMaxYField;
            }
            set
            {
                this.WorldCoordMaxYField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WorldCoordMinX
        {
            get
            {
                return this.WorldCoordMinXField;
            }
            set
            {
                this.WorldCoordMinXField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WorldCoordMinY
        {
            get
            {
                return this.WorldCoordMinYField;
            }
            set
            {
                this.WorldCoordMinYField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ZoneID
        {
            get
            {
                return this.ZoneIDField;
            }
            set
            {
                this.ZoneIDField = value;
            }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name = "LoadData", Namespace = "http://schemas.datacontract.org/2004/07/NCC")]
    public partial class LoadData : object, System.Runtime.Serialization.IExtensibleDataObject
    {

        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;

        private short ConnectionTypeField;

        private short LfTypeField;

        private string NameField;

        private int NumCustomersField;

        private short PhaseField;

        private string ScalingTypeField;

        private short UnitField;

        private double Value1Field;

        private double Value2Field;

        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public short ConnectionType
        {
            get
            {
                return this.ConnectionTypeField;
            }
            set
            {
                this.ConnectionTypeField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public short LfType
        {
            get
            {
                return this.LfTypeField;
            }
            set
            {
                this.LfTypeField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumCustomers
        {
            get
            {
                return this.NumCustomersField;
            }
            set
            {
                this.NumCustomersField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Phase
        {
            get
            {
                return this.PhaseField;
            }
            set
            {
                this.PhaseField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ScalingType
        {
            get
            {
                return this.ScalingTypeField;
            }
            set
            {
                this.ScalingTypeField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Unit
        {
            get
            {
                return this.UnitField;
            }
            set
            {
                this.UnitField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value1
        {
            get
            {
                return this.Value1Field;
            }
            set
            {
                this.Value1Field = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value2
        {
            get
            {
                return this.Value2Field;
            }
            set
            {
                this.Value2Field = value;
            }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name = "WaterLoadData", Namespace = "http://schemas.datacontract.org/2004/07/NCC")]
    public partial class WaterLoadData : object, System.Runtime.Serialization.IExtensibleDataObject
    {

        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;

        private string LoadTypeField;

        private double QDemandField;

        private short QunitField;

        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LoadType
        {
            get
            {
                return this.LoadTypeField;
            }
            set
            {
                this.LoadTypeField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public double QDemand
        {
            get
            {
                return this.QDemandField;
            }
            set
            {
                this.QDemandField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Qunit
        {
            get
            {
                return this.QunitField;
            }
            set
            {
                this.QunitField = value;
            }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name = "LineSectionData", Namespace = "http://schemas.datacontract.org/2004/07/NCC")]
    public partial class LineSectionData : object, System.Runtime.Serialization.IExtensibleDataObject
    {

        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;

        private short CableOrOHLField;

        private string DescriptionField;

        private double DiameterField;

        private int InstallationYearField;

        private short LayoutField;

        private double LengthField;

        private string LibraryTypeField;

        private short MaterialField;

        private string NameField;

        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public short CableOrOHL
        {
            get
            {
                return this.CableOrOHLField;
            }
            set
            {
                this.CableOrOHLField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this.DescriptionField;
            }
            set
            {
                this.DescriptionField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Diameter
        {
            get
            {
                return this.DiameterField;
            }
            set
            {
                this.DiameterField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public int InstallationYear
        {
            get
            {
                return this.InstallationYearField;
            }
            set
            {
                this.InstallationYearField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Layout
        {
            get
            {
                return this.LayoutField;
            }
            set
            {
                this.LayoutField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Length
        {
            get
            {
                return this.LengthField;
            }
            set
            {
                this.LengthField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LibraryType
        {
            get
            {
                return this.LibraryTypeField;
            }
            set
            {
                this.LibraryTypeField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Material
        {
            get
            {
                return this.MaterialField;
            }
            set
            {
                this.MaterialField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name = "AnalysisParameterSettings", Namespace = "http://schemas.datacontract.org/2004/07/NCC")]
    public partial class AnalysisParameterSettings : object, System.Runtime.Serialization.IExtensibleDataObject
    {

        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;

        private System.Nullable<System.Guid> AnschlKnIDField;

        private bool CalcOnlyLoadedDataField;

        private string ConXMLField;

        private bool DoRecondResizingField;

        private System.Nullable<System.Guid> EleIDField;

        private bool ExcludeElementsInMaintField;

        private bool ExcludeElementsInstalledField;

        private bool ExcludeOutOfOperElementsField;

        private bool ExcludeProjectedElementsField;

        private string ExclutionDateForInstalledField;

        private string ExclutionDateForOutOfOperField;

        private System.Guid[] FixedNodeForPartNetwIDsField;

        private bool IncludeBoundaryElementsInCalculationField;

        private string ItemTypeNameForRecondResizingFieldField;

        private string ItemlibNameForRecondResizingField;

        private string ItemlibSubNameForRecondResizingField;

        private string LibItemTypeNameForRecondResizingField;

        private string LibNameForRecondResizingField;

        private string LibSubNameForRecondResizingField;

        private System.Guid[] ListOfRelayIDsField;

        private System.Guid[] ListOfSelectedFeederIDsField;

        private System.Guid[] ListOfSelectedPartNetwIDsField;

        private System.Guid[] ListOfShortCircuitLocationIDsField;

        private string LogNameField;

        private string MediumTypeField;

        private int NCalcField;

        private System.Nullable<System.Guid> RelayIDField;

        private System.Guid[] SelectedRecondResizElementsField;

        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> AnschlKnID
        {
            get
            {
                return this.AnschlKnIDField;
            }
            set
            {
                this.AnschlKnIDField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CalcOnlyLoadedData
        {
            get
            {
                return this.CalcOnlyLoadedDataField;
            }
            set
            {
                this.CalcOnlyLoadedDataField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConXML
        {
            get
            {
                return this.ConXMLField;
            }
            set
            {
                this.ConXMLField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DoRecondResizing
        {
            get
            {
                return this.DoRecondResizingField;
            }
            set
            {
                this.DoRecondResizingField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> EleID
        {
            get
            {
                return this.EleIDField;
            }
            set
            {
                this.EleIDField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ExcludeElementsInMaint
        {
            get
            {
                return this.ExcludeElementsInMaintField;
            }
            set
            {
                this.ExcludeElementsInMaintField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ExcludeElementsInstalled
        {
            get
            {
                return this.ExcludeElementsInstalledField;
            }
            set
            {
                this.ExcludeElementsInstalledField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ExcludeOutOfOperElements
        {
            get
            {
                return this.ExcludeOutOfOperElementsField;
            }
            set
            {
                this.ExcludeOutOfOperElementsField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ExcludeProjectedElements
        {
            get
            {
                return this.ExcludeProjectedElementsField;
            }
            set
            {
                this.ExcludeProjectedElementsField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExclutionDateForInstalled
        {
            get
            {
                return this.ExclutionDateForInstalledField;
            }
            set
            {
                this.ExclutionDateForInstalledField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExclutionDateForOutOfOper
        {
            get
            {
                return this.ExclutionDateForOutOfOperField;
            }
            set
            {
                this.ExclutionDateForOutOfOperField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] FixedNodeForPartNetwIDs
        {
            get
            {
                return this.FixedNodeForPartNetwIDsField;
            }
            set
            {
                this.FixedNodeForPartNetwIDsField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IncludeBoundaryElementsInCalculation
        {
            get
            {
                return this.IncludeBoundaryElementsInCalculationField;
            }
            set
            {
                this.IncludeBoundaryElementsInCalculationField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ItemTypeNameForRecondResizingField
        {
            get
            {
                return this.ItemTypeNameForRecondResizingFieldField;
            }
            set
            {
                this.ItemTypeNameForRecondResizingFieldField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ItemlibNameForRecondResizing
        {
            get
            {
                return this.ItemlibNameForRecondResizingField;
            }
            set
            {
                this.ItemlibNameForRecondResizingField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ItemlibSubNameForRecondResizing
        {
            get
            {
                return this.ItemlibSubNameForRecondResizingField;
            }
            set
            {
                this.ItemlibSubNameForRecondResizingField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LibItemTypeNameForRecondResizing
        {
            get
            {
                return this.LibItemTypeNameForRecondResizingField;
            }
            set
            {
                this.LibItemTypeNameForRecondResizingField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LibNameForRecondResizing
        {
            get
            {
                return this.LibNameForRecondResizingField;
            }
            set
            {
                this.LibNameForRecondResizingField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LibSubNameForRecondResizing
        {
            get
            {
                return this.LibSubNameForRecondResizingField;
            }
            set
            {
                this.LibSubNameForRecondResizingField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] ListOfRelayIDs
        {
            get
            {
                return this.ListOfRelayIDsField;
            }
            set
            {
                this.ListOfRelayIDsField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] ListOfSelectedFeederIDs
        {
            get
            {
                return this.ListOfSelectedFeederIDsField;
            }
            set
            {
                this.ListOfSelectedFeederIDsField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] ListOfSelectedPartNetwIDs
        {
            get
            {
                return this.ListOfSelectedPartNetwIDsField;
            }
            set
            {
                this.ListOfSelectedPartNetwIDsField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] ListOfShortCircuitLocationIDs
        {
            get
            {
                return this.ListOfShortCircuitLocationIDsField;
            }
            set
            {
                this.ListOfShortCircuitLocationIDsField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LogName
        {
            get
            {
                return this.LogNameField;
            }
            set
            {
                this.LogNameField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MediumType
        {
            get
            {
                return this.MediumTypeField;
            }
            set
            {
                this.MediumTypeField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NCalc
        {
            get
            {
                return this.NCalcField;
            }
            set
            {
                this.NCalcField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> RelayID
        {
            get
            {
                return this.RelayIDField;
            }
            set
            {
                this.RelayIDField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] SelectedRecondResizElements
        {
            get
            {
                return this.SelectedRecondResizElementsField;
            }
            set
            {
                this.SelectedRecondResizElementsField = value;
            }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name = "AnalysisReturnInfo", Namespace = "http://schemas.datacontract.org/2004/07/NCC")]
    public partial class AnalysisReturnInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {

        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;

        private string AdjustedLoadsFileNameField;

        private string AnalysisIDField;

        private string AnalysisModuleField;

        private string AutomaticSettingsResultField;

        private NCC.AnalysisReturnInfo.CableSizingLineData[] CableSizingLineDataResultField;

        private string ConXMLField;

        private string DirectoryNameField;

        private bool FaultClearedField;

        private bool HasConvergedField;

        private string LoadSummaryField;

        private string LogFilenameField;

        private string NetworkReductionXMLField;

        private string OperationalDataNameField;

        private byte[] RelayDataField;

        private string ResultFile2ButtonNameField;

        private string ResultFile2NameField;

        private string ResultFilenameField;

        private int ReturnInfoField;

        private bool RunAnalysisWithoutSavingToDBField;

        private NCC.AnalysisReturnInfo.RelayResultData[] SelectivityChartResultsField;

        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AdjustedLoadsFileName
        {
            get
            {
                return this.AdjustedLoadsFileNameField;
            }
            set
            {
                this.AdjustedLoadsFileNameField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AnalysisID
        {
            get
            {
                return this.AnalysisIDField;
            }
            set
            {
                this.AnalysisIDField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AnalysisModule
        {
            get
            {
                return this.AnalysisModuleField;
            }
            set
            {
                this.AnalysisModuleField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AutomaticSettingsResult
        {
            get
            {
                return this.AutomaticSettingsResultField;
            }
            set
            {
                this.AutomaticSettingsResultField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public NCC.AnalysisReturnInfo.CableSizingLineData[] CableSizingLineDataResult
        {
            get
            {
                return this.CableSizingLineDataResultField;
            }
            set
            {
                this.CableSizingLineDataResultField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConXML
        {
            get
            {
                return this.ConXMLField;
            }
            set
            {
                this.ConXMLField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DirectoryName
        {
            get
            {
                return this.DirectoryNameField;
            }
            set
            {
                this.DirectoryNameField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool FaultCleared
        {
            get
            {
                return this.FaultClearedField;
            }
            set
            {
                this.FaultClearedField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasConverged
        {
            get
            {
                return this.HasConvergedField;
            }
            set
            {
                this.HasConvergedField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LoadSummary
        {
            get
            {
                return this.LoadSummaryField;
            }
            set
            {
                this.LoadSummaryField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LogFilename
        {
            get
            {
                return this.LogFilenameField;
            }
            set
            {
                this.LogFilenameField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NetworkReductionXML
        {
            get
            {
                return this.NetworkReductionXMLField;
            }
            set
            {
                this.NetworkReductionXMLField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OperationalDataName
        {
            get
            {
                return this.OperationalDataNameField;
            }
            set
            {
                this.OperationalDataNameField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] RelayData
        {
            get
            {
                return this.RelayDataField;
            }
            set
            {
                this.RelayDataField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResultFile2ButtonName
        {
            get
            {
                return this.ResultFile2ButtonNameField;
            }
            set
            {
                this.ResultFile2ButtonNameField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResultFile2Name
        {
            get
            {
                return this.ResultFile2NameField;
            }
            set
            {
                this.ResultFile2NameField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResultFilename
        {
            get
            {
                return this.ResultFilenameField;
            }
            set
            {
                this.ResultFilenameField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReturnInfo
        {
            get
            {
                return this.ReturnInfoField;
            }
            set
            {
                this.ReturnInfoField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool RunAnalysisWithoutSavingToDB
        {
            get
            {
                return this.RunAnalysisWithoutSavingToDBField;
            }
            set
            {
                this.RunAnalysisWithoutSavingToDBField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public NCC.AnalysisReturnInfo.RelayResultData[] SelectivityChartResults
        {
            get
            {
                return this.SelectivityChartResultsField;
            }
            set
            {
                this.SelectivityChartResultsField = value;
            }
        }

        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name = "AnalysisReturnInfo.CableSizingLineData", Namespace = "http://schemas.datacontract.org/2004/07/NCC")]
        public partial class CableSizingLineData : object, System.Runtime.Serialization.IExtensibleDataObject
        {

            private System.Runtime.Serialization.ExtensionDataObject extensionDataField;

            private byte[] BinaryDataField;

            private string LibTypeField;

            private System.Guid LineIDField;

            public System.Runtime.Serialization.ExtensionDataObject ExtensionData
            {
                get
                {
                    return this.extensionDataField;
                }
                set
                {
                    this.extensionDataField = value;
                }
            }

            [System.Runtime.Serialization.DataMemberAttribute()]
            public byte[] BinaryData
            {
                get
                {
                    return this.BinaryDataField;
                }
                set
                {
                    this.BinaryDataField = value;
                }
            }

            [System.Runtime.Serialization.DataMemberAttribute()]
            public string LibType
            {
                get
                {
                    return this.LibTypeField;
                }
                set
                {
                    this.LibTypeField = value;
                }
            }

            [System.Runtime.Serialization.DataMemberAttribute()]
            public System.Guid LineID
            {
                get
                {
                    return this.LineIDField;
                }
                set
                {
                    this.LineIDField = value;
                }
            }
        }

        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name = "AnalysisReturnInfo.RelayResultData", Namespace = "http://schemas.datacontract.org/2004/07/NCC")]
        public partial class RelayResultData : object, System.Runtime.Serialization.IExtensibleDataObject
        {

            private System.Runtime.Serialization.ExtensionDataObject extensionDataField;

            private System.Guid ElementIdField;

            private double FactorField;

            private System.Guid FaultedNodeIdField;

            private double IField;

            private double IangField;

            private double RField;

            private System.Guid RelayIdField;

            private double TripTimeField;

            private string TypeSCField;

            private double UField;

            private double UnField;

            private double XField;

            private double ZField;

            private double ZangField;

            public System.Runtime.Serialization.ExtensionDataObject ExtensionData
            {
                get
                {
                    return this.extensionDataField;
                }
                set
                {
                    this.extensionDataField = value;
                }
            }

            [System.Runtime.Serialization.DataMemberAttribute()]
            public System.Guid ElementId
            {
                get
                {
                    return this.ElementIdField;
                }
                set
                {
                    this.ElementIdField = value;
                }
            }

            [System.Runtime.Serialization.DataMemberAttribute()]
            public double Factor
            {
                get
                {
                    return this.FactorField;
                }
                set
                {
                    this.FactorField = value;
                }
            }

            [System.Runtime.Serialization.DataMemberAttribute()]
            public System.Guid FaultedNodeId
            {
                get
                {
                    return this.FaultedNodeIdField;
                }
                set
                {
                    this.FaultedNodeIdField = value;
                }
            }

            [System.Runtime.Serialization.DataMemberAttribute()]
            public double I
            {
                get
                {
                    return this.IField;
                }
                set
                {
                    this.IField = value;
                }
            }

            [System.Runtime.Serialization.DataMemberAttribute()]
            public double Iang
            {
                get
                {
                    return this.IangField;
                }
                set
                {
                    this.IangField = value;
                }
            }

            [System.Runtime.Serialization.DataMemberAttribute()]
            public double R
            {
                get
                {
                    return this.RField;
                }
                set
                {
                    this.RField = value;
                }
            }

            [System.Runtime.Serialization.DataMemberAttribute()]
            public System.Guid RelayId
            {
                get
                {
                    return this.RelayIdField;
                }
                set
                {
                    this.RelayIdField = value;
                }
            }

            [System.Runtime.Serialization.DataMemberAttribute()]
            public double TripTime
            {
                get
                {
                    return this.TripTimeField;
                }
                set
                {
                    this.TripTimeField = value;
                }
            }

            [System.Runtime.Serialization.DataMemberAttribute()]
            public string TypeSC
            {
                get
                {
                    return this.TypeSCField;
                }
                set
                {
                    this.TypeSCField = value;
                }
            }

            [System.Runtime.Serialization.DataMemberAttribute()]
            public double U
            {
                get
                {
                    return this.UField;
                }
                set
                {
                    this.UField = value;
                }
            }

            [System.Runtime.Serialization.DataMemberAttribute()]
            public double Un
            {
                get
                {
                    return this.UnField;
                }
                set
                {
                    this.UnField = value;
                }
            }

            [System.Runtime.Serialization.DataMemberAttribute()]
            public double X
            {
                get
                {
                    return this.XField;
                }
                set
                {
                    this.XField = value;
                }
            }

            [System.Runtime.Serialization.DataMemberAttribute()]
            public double Z
            {
                get
                {
                    return this.ZField;
                }
                set
                {
                    this.ZField = value;
                }
            }

            [System.Runtime.Serialization.DataMemberAttribute()]
            public double Zang
            {
                get
                {
                    return this.ZangField;
                }
                set
                {
                    this.ZangField = value;
                }
            }
        }
    }



    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name = "ImportElementItem", Namespace = "")]
    public partial class ImportElementItem : object, System.Runtime.Serialization.IExtensibleDataObject
    {

        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;

        private string AreaNameField;

        private string BayField;

        private string[] BayesInStationField;

        private short CableOrOHLField;

        private double[] CoordinatesLabel1Field;

        private double[] CoordinatesLabel2Field;

        private double[] CoordinatesLabel3Field;

        private double[] CoordinatesLabel4Field;

        private double[] CoordinatesLink1Field;

        private double[] CoordinatesLink2Field;

        private double[] CoordinatesLink3Field;

        private double[] CoordinatesSymbolField;

        private double DiameterField;

        private string ElementInfoField;

        private double ElevationField;

        private int InstallationYearField;

        private bool IsForwardNetworkField;

        private bool IsInMaintenanceField;

        private bool IsProjectedField;

        private short LayoutField;

        private NCC.LoadData LoadField;

        private int LogicalSwitchField;

        private short MaterialField;

        private string NodeName1Field;

        private string NodeName2Field;

        private string NodeName3Field;

        private string NodeName4Field;

        private string OnGraphicLayerField;

        private short OnPortNrField;

        private PipeFittingEntry[] PipeFittingsField;

        private string SubAreaNameField;

        private string SubstationField;

        private double SymbolAngleField;

        private string SymbolNameField;

        private double SymbolSizeField;

        private TechDataValue[] TechDataValuesField;

        private short TypeField;

        private NCC.WaterLoadData WaterLoadDataField;

        private System.Nullable<int> ZOrderNumField;

        private string ZoneNameField;

        private string aliasName1Field;

        private string aliasName2Field;

        private byte[] binaryDataField;

        private string descriptionField;

        private string elementTypeField;

        private double lengthField;

        private string libraryNameField;

        private string librarySubnameField;

        private string libraryTypeField;

        private string librayTypeField;

        private NCC.LineSectionData[] listLineSectionsField;

        private NCC.LoadData[] listSubLoadsField;

        private string nameField;

        private short numConnectionsField;

        private short phaseField;

        private bool removeField;

        private double unField;

        private string xmlDataField;

        private string xmlInvestField;

        private string xmlItemListField;

        private System.Nullable<float> yLocationField;

        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AreaName
        {
            get
            {
                return this.AreaNameField;
            }
            set
            {
                this.AreaNameField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Bay
        {
            get
            {
                return this.BayField;
            }
            set
            {
                this.BayField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] BayesInStation
        {
            get
            {
                return this.BayesInStationField;
            }
            set
            {
                this.BayesInStationField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public short CableOrOHL
        {
            get
            {
                return this.CableOrOHLField;
            }
            set
            {
                this.CableOrOHLField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] CoordinatesLabel1
        {
            get
            {
                return this.CoordinatesLabel1Field;
            }
            set
            {
                this.CoordinatesLabel1Field = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] CoordinatesLabel2
        {
            get
            {
                return this.CoordinatesLabel2Field;
            }
            set
            {
                this.CoordinatesLabel2Field = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] CoordinatesLabel3
        {
            get
            {
                return this.CoordinatesLabel3Field;
            }
            set
            {
                this.CoordinatesLabel3Field = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] CoordinatesLabel4
        {
            get
            {
                return this.CoordinatesLabel4Field;
            }
            set
            {
                this.CoordinatesLabel4Field = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] CoordinatesLink1
        {
            get
            {
                return this.CoordinatesLink1Field;
            }
            set
            {
                this.CoordinatesLink1Field = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] CoordinatesLink2
        {
            get
            {
                return this.CoordinatesLink2Field;
            }
            set
            {
                this.CoordinatesLink2Field = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] CoordinatesLink3
        {
            get
            {
                return this.CoordinatesLink3Field;
            }
            set
            {
                this.CoordinatesLink3Field = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] CoordinatesSymbol
        {
            get
            {
                return this.CoordinatesSymbolField;
            }
            set
            {
                this.CoordinatesSymbolField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Diameter
        {
            get
            {
                return this.DiameterField;
            }
            set
            {
                this.DiameterField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ElementInfo
        {
            get
            {
                return this.ElementInfoField;
            }
            set
            {
                this.ElementInfoField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Elevation
        {
            get
            {
                return this.ElevationField;
            }
            set
            {
                this.ElevationField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public int InstallationYear
        {
            get
            {
                return this.InstallationYearField;
            }
            set
            {
                this.InstallationYearField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsForwardNetwork
        {
            get
            {
                return this.IsForwardNetworkField;
            }
            set
            {
                this.IsForwardNetworkField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsInMaintenance
        {
            get
            {
                return this.IsInMaintenanceField;
            }
            set
            {
                this.IsInMaintenanceField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsProjected
        {
            get
            {
                return this.IsProjectedField;
            }
            set
            {
                this.IsProjectedField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Layout
        {
            get
            {
                return this.LayoutField;
            }
            set
            {
                this.LayoutField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public NCC.LoadData Load
        {
            get
            {
                return this.LoadField;
            }
            set
            {
                this.LoadField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LogicalSwitch
        {
            get
            {
                return this.LogicalSwitchField;
            }
            set
            {
                this.LogicalSwitchField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Material
        {
            get
            {
                return this.MaterialField;
            }
            set
            {
                this.MaterialField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeName1
        {
            get
            {
                return this.NodeName1Field;
            }
            set
            {
                this.NodeName1Field = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeName2
        {
            get
            {
                return this.NodeName2Field;
            }
            set
            {
                this.NodeName2Field = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeName3
        {
            get
            {
                return this.NodeName3Field;
            }
            set
            {
                this.NodeName3Field = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeName4
        {
            get
            {
                return this.NodeName4Field;
            }
            set
            {
                this.NodeName4Field = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OnGraphicLayer
        {
            get
            {
                return this.OnGraphicLayerField;
            }
            set
            {
                this.OnGraphicLayerField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public short OnPortNr
        {
            get
            {
                return this.OnPortNrField;
            }
            set
            {
                this.OnPortNrField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public PipeFittingEntry[] PipeFittings
        {
            get
            {
                return this.PipeFittingsField;
            }
            set
            {
                this.PipeFittingsField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubAreaName
        {
            get
            {
                return this.SubAreaNameField;
            }
            set
            {
                this.SubAreaNameField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Substation
        {
            get
            {
                return this.SubstationField;
            }
            set
            {
                this.SubstationField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SymbolAngle
        {
            get
            {
                return this.SymbolAngleField;
            }
            set
            {
                this.SymbolAngleField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SymbolName
        {
            get
            {
                return this.SymbolNameField;
            }
            set
            {
                this.SymbolNameField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SymbolSize
        {
            get
            {
                return this.SymbolSizeField;
            }
            set
            {
                this.SymbolSizeField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechDataValue[] TechDataValues
        {
            get
            {
                return this.TechDataValuesField;
            }
            set
            {
                this.TechDataValuesField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Type
        {
            get
            {
                return this.TypeField;
            }
            set
            {
                this.TypeField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public NCC.WaterLoadData WaterLoadData
        {
            get
            {
                return this.WaterLoadDataField;
            }
            set
            {
                this.WaterLoadDataField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ZOrderNum
        {
            get
            {
                return this.ZOrderNumField;
            }
            set
            {
                this.ZOrderNumField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ZoneName
        {
            get
            {
                return this.ZoneNameField;
            }
            set
            {
                this.ZoneNameField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string aliasName1
        {
            get
            {
                return this.aliasName1Field;
            }
            set
            {
                this.aliasName1Field = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string aliasName2
        {
            get
            {
                return this.aliasName2Field;
            }
            set
            {
                this.aliasName2Field = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] binaryData
        {
            get
            {
                return this.binaryDataField;
            }
            set
            {
                this.binaryDataField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string elementType
        {
            get
            {
                return this.elementTypeField;
            }
            set
            {
                this.elementTypeField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public double length
        {
            get
            {
                return this.lengthField;
            }
            set
            {
                this.lengthField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string libraryName
        {
            get
            {
                return this.libraryNameField;
            }
            set
            {
                this.libraryNameField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string librarySubname
        {
            get
            {
                return this.librarySubnameField;
            }
            set
            {
                this.librarySubnameField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string libraryType
        {
            get
            {
                return this.libraryTypeField;
            }
            set
            {
                this.libraryTypeField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string librayType
        {
            get
            {
                return this.librayTypeField;
            }
            set
            {
                this.librayTypeField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public NCC.LineSectionData[] listLineSections
        {
            get
            {
                return this.listLineSectionsField;
            }
            set
            {
                this.listLineSectionsField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public NCC.LoadData[] listSubLoads
        {
            get
            {
                return this.listSubLoadsField;
            }
            set
            {
                this.listSubLoadsField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public short numConnections
        {
            get
            {
                return this.numConnectionsField;
            }
            set
            {
                this.numConnectionsField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public short phase
        {
            get
            {
                return this.phaseField;
            }
            set
            {
                this.phaseField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool remove
        {
            get
            {
                return this.removeField;
            }
            set
            {
                this.removeField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public double un
        {
            get
            {
                return this.unField;
            }
            set
            {
                this.unField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string xmlData
        {
            get
            {
                return this.xmlDataField;
            }
            set
            {
                this.xmlDataField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string xmlInvest
        {
            get
            {
                return this.xmlInvestField;
            }
            set
            {
                this.xmlInvestField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string xmlItemList
        {
            get
            {
                return this.xmlItemListField;
            }
            set
            {
                this.xmlItemListField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<float> yLocation
        {
            get
            {
                return this.yLocationField;
            }
            set
            {
                this.yLocationField = value;
            }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name = "PipeFittingEntry", Namespace = "")]
    public partial class PipeFittingEntry : object, System.Runtime.Serialization.IExtensibleDataObject
    {

        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;

        private double AngleField;

        private string Branch1NameField;

        private string Branch2NameField;

        private double CorrectionFactorField;

        private double InletDiameterField;

        private bool IsFittingEnabledField;

        private double OutletDiameterField;

        private int QuantityField;

        private double RadiusField;

        private bool RadiusCheckedField;

        private double RadiusDiameterRatioField;

        private bool RatioCheckedField;

        private short SelectedGroupField;

        private string SelectedGroupNameField;

        private short SelectedMethodField;

        private string SelectedMethodNameField;

        private short SelectedSubTypeField;

        private short SelectedTypeField;

        private string SelectedTypeNameField;

        private bool UseConstantCoefficientsField;

        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Angle
        {
            get
            {
                return this.AngleField;
            }
            set
            {
                this.AngleField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Branch1Name
        {
            get
            {
                return this.Branch1NameField;
            }
            set
            {
                this.Branch1NameField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Branch2Name
        {
            get
            {
                return this.Branch2NameField;
            }
            set
            {
                this.Branch2NameField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public double CorrectionFactor
        {
            get
            {
                return this.CorrectionFactorField;
            }
            set
            {
                this.CorrectionFactorField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public double InletDiameter
        {
            get
            {
                return this.InletDiameterField;
            }
            set
            {
                this.InletDiameterField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsFittingEnabled
        {
            get
            {
                return this.IsFittingEnabledField;
            }
            set
            {
                this.IsFittingEnabledField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public double OutletDiameter
        {
            get
            {
                return this.OutletDiameterField;
            }
            set
            {
                this.OutletDiameterField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Quantity
        {
            get
            {
                return this.QuantityField;
            }
            set
            {
                this.QuantityField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Radius
        {
            get
            {
                return this.RadiusField;
            }
            set
            {
                this.RadiusField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool RadiusChecked
        {
            get
            {
                return this.RadiusCheckedField;
            }
            set
            {
                this.RadiusCheckedField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public double RadiusDiameterRatio
        {
            get
            {
                return this.RadiusDiameterRatioField;
            }
            set
            {
                this.RadiusDiameterRatioField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool RatioChecked
        {
            get
            {
                return this.RatioCheckedField;
            }
            set
            {
                this.RatioCheckedField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public short SelectedGroup
        {
            get
            {
                return this.SelectedGroupField;
            }
            set
            {
                this.SelectedGroupField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SelectedGroupName
        {
            get
            {
                return this.SelectedGroupNameField;
            }
            set
            {
                this.SelectedGroupNameField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public short SelectedMethod
        {
            get
            {
                return this.SelectedMethodField;
            }
            set
            {
                this.SelectedMethodField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SelectedMethodName
        {
            get
            {
                return this.SelectedMethodNameField;
            }
            set
            {
                this.SelectedMethodNameField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public short SelectedSubType
        {
            get
            {
                return this.SelectedSubTypeField;
            }
            set
            {
                this.SelectedSubTypeField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public short SelectedType
        {
            get
            {
                return this.SelectedTypeField;
            }
            set
            {
                this.SelectedTypeField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SelectedTypeName
        {
            get
            {
                return this.SelectedTypeNameField;
            }
            set
            {
                this.SelectedTypeNameField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool UseConstantCoefficients
        {
            get
            {
                return this.UseConstantCoefficientsField;
            }
            set
            {
                this.UseConstantCoefficientsField = value;
            }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name = "TechDataValue", Namespace = "")]
    public partial class TechDataValue : object, System.Runtime.Serialization.IExtensibleDataObject
    {

        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;

        private string ValueField;

        private string VariableNameField;

        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this.ValueField;
            }
            set
            {
                this.ValueField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VariableName
        {
            get
            {
                return this.VariableNameField;
            }
            set
            {
                this.VariableNameField = value;
            }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name = "ImportFeederItem", Namespace = "")]
    public partial class ImportFeederItem : object, System.Runtime.Serialization.IExtensibleDataObject
    {

        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;

        private double PloadFactorField;

        private double QloadFactorField;

        private string atElementNameField;

        private string atNodeNameField;

        private string colorField;

        private string nameField;

        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PloadFactor
        {
            get
            {
                return this.PloadFactorField;
            }
            set
            {
                this.PloadFactorField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public double QloadFactor
        {
            get
            {
                return this.QloadFactorField;
            }
            set
            {
                this.QloadFactorField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string atElementName
        {
            get
            {
                return this.atElementNameField;
            }
            set
            {
                this.atElementNameField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string atNodeName
        {
            get
            {
                return this.atNodeNameField;
            }
            set
            {
                this.atNodeNameField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string color
        {
            get
            {
                return this.colorField;
            }
            set
            {
                this.colorField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace = "http://www.neplan.ch/Web/External", ConfigurationName = "NeplanService")]
    public interface NeplanService
    {

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/CreateProject", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/CreateProjectResponse")]
        NCC.ExternalProject CreateProject(string projectName, string variantName, string diagram, string layerName, string mediumType, int srid, string copySettingsFromProjectName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/CreateProject", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/CreateProjectResponse")]
        System.Threading.Tasks.Task<NCC.ExternalProject> CreateProjectAsync(string projectName, string variantName, string diagram, string layerName, string mediumType, int srid, string copySettingsFromProjectName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetProject", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetProjectResponse")]
        NCC.ExternalProject GetProject(string projectName, string variantName, string diagramName, string layerName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetProject", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetProjectResponse")]
        System.Threading.Tasks.Task<NCC.ExternalProject> GetProjectAsync(string projectName, string variantName, string diagramName, string layerName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetLogOnUrlWithProject", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetLogOnUrlWithProjectResponse")]
        string GetLogOnUrlWithProject(NCC.ExternalProject project);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetLogOnUrlWithProject", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetLogOnUrlWithProjectResponse")]
        System.Threading.Tasks.Task<string> GetLogOnUrlWithProjectAsync(NCC.ExternalProject project);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetLogOnUrl", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetLogOnUrlResponse")]
        string GetLogOnUrl();

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetLogOnUrl", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetLogOnUrlResponse")]
        System.Threading.Tasks.Task<string> GetLogOnUrlAsync();

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetLogOnSessionID", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetLogOnSessionIDResponse")]
        string GetLogOnSessionID(NCC.ExternalProject project);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetLogOnSessionID", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetLogOnSessionIDResponse")]
        System.Threading.Tasks.Task<string> GetLogOnSessionIDAsync(NCC.ExternalProject project);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/InsertNode", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/InsertNodeResponse")]
        InsertNodeResponse InsertNode(InsertNodeRequest request);

        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/InsertNode", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/InsertNodeResponse")]
        System.Threading.Tasks.Task<InsertNodeResponse> InsertNodeAsync(InsertNodeRequest request);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/InsertNodeWithoutGraphic", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/InsertNodeWithoutGraphicResponse")]
        InsertNodeWithoutGraphicResponse InsertNodeWithoutGraphic(InsertNodeWithoutGraphicRequest request);

        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/InsertNodeWithoutGraphic", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/InsertNodeWithoutGraphicResponse")]
        System.Threading.Tasks.Task<InsertNodeWithoutGraphicResponse> InsertNodeWithoutGraphicAsync(InsertNodeWithoutGraphicRequest request);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/InsertBusbar", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/InsertBusbarResponse")]
        InsertBusbarResponse InsertBusbar(InsertBusbarRequest request);

        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/InsertBusbar", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/InsertBusbarResponse")]
        System.Threading.Tasks.Task<InsertBusbarResponse> InsertBusbarAsync(InsertBusbarRequest request);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/InsertLine", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/InsertLineResponse")]
        string InsertLine(NCC.ExternalProject project, string name, string fromNode, string toNode, double length, string libraryType, string xmlData, double[] coordinates);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/InsertLine", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/InsertLineResponse")]
        System.Threading.Tasks.Task<string> InsertLineAsync(NCC.ExternalProject project, string name, string fromNode, string toNode, double length, string libraryType, string xmlData, double[] coordinates);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/InsertLineByNodeID", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/InsertLineByNodeIDResponse")]
        string InsertLineByNodeID(NCC.ExternalProject project, string name, string fromNodeID, string toNodeID, double length, string libraryType, string xmlData, double[] coordinates);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/InsertLineByNodeID", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/InsertLineByNodeIDResponse")]
        System.Threading.Tasks.Task<string> InsertLineByNodeIDAsync(NCC.ExternalProject project, string name, string fromNodeID, string toNodeID, double length, string libraryType, string xmlData, double[] coordinates);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/InsertLineAsym", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/InsertLineAsymResponse")]
        string InsertLineAsym(NCC.ExternalProject project, string name, string fromNode, string toNode, double length, short phase, string libraryType, string xmlData, double[] coordinates);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/InsertLineAsym", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/InsertLineAsymResponse")]
        System.Threading.Tasks.Task<string> InsertLineAsymAsync(NCC.ExternalProject project, string name, string fromNode, string toNode, double length, short phase, string libraryType, string xmlData, double[] coordinates);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/Insert2PortElement", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/Insert2PortElementResponse")]
        string Insert2PortElement(NCC.ExternalProject project, string name, string fromNode, string toNode, string elementTypeName, string libraryType, string xmlData, int phase, double[] coordinatesLink1, double[] coordinatesLink2, string symbolName, double symbolAngle);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/Insert2PortElement", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/Insert2PortElementResponse")]
        System.Threading.Tasks.Task<string> Insert2PortElementAsync(NCC.ExternalProject project, string name, string fromNode, string toNode, string elementTypeName, string libraryType, string xmlData, int phase, double[] coordinatesLink1, double[] coordinatesLink2, string symbolName, double symbolAngle);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/Insert1PortElement", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/Insert1PortElementResponse")]
        Insert1PortElementResponse Insert1PortElement(Insert1PortElementRequest request);

        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/Insert1PortElement", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/Insert1PortElementResponse")]
        System.Threading.Tasks.Task<Insert1PortElementResponse> Insert1PortElementAsync(Insert1PortElementRequest request);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/InsertProtectionElement", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/InsertProtectionElementResponse")]
        string InsertProtectionElement(NCC.ExternalProject project, string name, string onElementID, short atPort, string elementTypeName, string libraryType, string xmlData, int phase, string symbolName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/InsertProtectionElement", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/InsertProtectionElementResponse")]
        System.Threading.Tasks.Task<string> InsertProtectionElementAsync(NCC.ExternalProject project, string name, string onElementID, short atPort, string elementTypeName, string libraryType, string xmlData, int phase, string symbolName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/InsertFeeder", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/InsertFeederResponse")]
        string InsertFeeder(NCC.ExternalProject project, string feederName, string nodeName, string elementName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/InsertFeeder", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/InsertFeederResponse")]
        System.Threading.Tasks.Task<string> InsertFeederAsync(NCC.ExternalProject project, string feederName, string nodeName, string elementName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/InsertArea", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/InsertAreaResponse")]
        string InsertArea(NCC.ExternalProject project, string areaName, string firstSubArea, string colorStringArea, string colorStringSubArea);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/InsertArea", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/InsertAreaResponse")]
        System.Threading.Tasks.Task<string> InsertAreaAsync(NCC.ExternalProject project, string areaName, string firstSubArea, string colorStringArea, string colorStringSubArea);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/InsertZone", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/InsertZoneResponse")]
        string InsertZone(NCC.ExternalProject project, string name, string colorString);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/InsertZone", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/InsertZoneResponse")]
        System.Threading.Tasks.Task<string> InsertZoneAsync(NCC.ExternalProject project, string name, string colorString);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/InsertMeasurement", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/InsertMeasurementResponse")]
        string InsertMeasurement(NCC.ExternalProject project, string measurementDefinitionName, string elementName, short portNr, System.DateTime dateTime, int inputDataDefinition, double[] measuremens, short nameAliasName1AliasName2);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/InsertMeasurement", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/InsertMeasurementResponse")]
        System.Threading.Tasks.Task<string> InsertMeasurementAsync(NCC.ExternalProject project, string measurementDefinitionName, string elementName, short portNr, System.DateTime dateTime, int inputDataDefinition, double[] measuremens, short nameAliasName1AliasName2);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/InsertMeasurementByElementID", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/InsertMeasurementByElementIDRespo" +
            "nse")]
        string InsertMeasurementByElementID(string elementID, string measurementDefinitionName, short portNr, System.DateTime dateTime, int inputDataDefinition, double[] measurements);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/InsertMeasurementByElementID", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/InsertMeasurementByElementIDRespo" +
            "nse")]
        System.Threading.Tasks.Task<string> InsertMeasurementByElementIDAsync(string elementID, string measurementDefinitionName, short portNr, System.DateTime dateTime, int inputDataDefinition, double[] measurements);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/InsertDiagram", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/InsertDiagramResponse")]
        string InsertDiagram(NCC.ExternalProject project, string diagramName, string firstGraphicLayerName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/InsertDiagram", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/InsertDiagramResponse")]
        System.Threading.Tasks.Task<string> InsertDiagramAsync(NCC.ExternalProject project, string diagramName, string firstGraphicLayerName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/InsertGraphicLayer", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/InsertGraphicLayerResponse")]
        InsertGraphicLayerResponse InsertGraphicLayer(InsertGraphicLayerRequest request);

        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/InsertGraphicLayer", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/InsertGraphicLayerResponse")]
        System.Threading.Tasks.Task<InsertGraphicLayerResponse> InsertGraphicLayerAsync(InsertGraphicLayerRequest request);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetAllElementsOfProject", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetAllElementsOfProjectResponse")]
        GetAllElementsOfProjectResponse GetAllElementsOfProject(GetAllElementsOfProjectRequest request);

        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetAllElementsOfProject", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetAllElementsOfProjectResponse")]
        System.Threading.Tasks.Task<GetAllElementsOfProjectResponse> GetAllElementsOfProjectAsync(GetAllElementsOfProjectRequest request);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetAllElementsOfElementType", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetAllElementsOfElementTypeRespon" +
            "se")]
        GetAllElementsOfElementTypeResponse GetAllElementsOfElementType(GetAllElementsOfElementTypeRequest request);

        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetAllElementsOfElementType", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetAllElementsOfElementTypeRespon" +
            "se")]
        System.Threading.Tasks.Task<GetAllElementsOfElementTypeResponse> GetAllElementsOfElementTypeAsync(GetAllElementsOfElementTypeRequest request);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/AddSubLoad", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/AddSubLoadResponse")]
        bool AddSubLoad(NCC.ExternalProject project, string loadID, NCC.LoadData loadData);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/AddSubLoad", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/AddSubLoadResponse")]
        System.Threading.Tasks.Task<bool> AddSubLoadAsync(NCC.ExternalProject project, string loadID, NCC.LoadData loadData);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/AssignPowerTo1Port", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/AssignPowerTo1PortResponse")]
        bool AssignPowerTo1Port(NCC.ExternalProject project, string name, string elementTypeName, short powerType, double value1, double value2);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/AssignPowerTo1Port", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/AssignPowerTo1PortResponse")]
        System.Threading.Tasks.Task<bool> AssignPowerTo1PortAsync(NCC.ExternalProject project, string name, string elementTypeName, short powerType, double value1, double value2);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/AssignPowerTo1PortByID", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/AssignPowerTo1PortByIDResponse")]
        bool AssignPowerTo1PortByID(NCC.ExternalProject project, string elementID, short powerType, double value1, double value2);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/AssignPowerTo1PortByID", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/AssignPowerTo1PortByIDResponse")]
        System.Threading.Tasks.Task<bool> AssignPowerTo1PortByIDAsync(NCC.ExternalProject project, string elementID, short powerType, double value1, double value2);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/SwitchElementAtPortByID", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/SwitchElementAtPortByIDResponse")]
        void SwitchElementAtPortByID(string elementID, short portNr, bool isConnected);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/SwitchElementAtPortByID", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/SwitchElementAtPortByIDResponse")]
        System.Threading.Tasks.Task SwitchElementAtPortByIDAsync(string elementID, short portNr, bool isConnected);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/SwitchElementAtPort", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/SwitchElementAtPortResponse")]
        void SwitchElementAtPort(NCC.ExternalProject project, string elementName, string elementTypeName, short portNr, bool isConnected);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/SwitchElementAtPort", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/SwitchElementAtPortResponse")]
        System.Threading.Tasks.Task SwitchElementAtPortAsync(NCC.ExternalProject project, string elementName, string elementTypeName, short portNr, bool isConnected);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/SetElementData", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/SetElementDataResponse")]
        void SetElementData(NCC.ExternalProject project, string elementName, string elementTypeName, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool IsProjected, string zoneGuid, string subAreaGuid);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/SetElementData", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/SetElementDataResponse")]
        System.Threading.Tasks.Task SetElementDataAsync(NCC.ExternalProject project, string elementName, string elementTypeName, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool IsProjected, string zoneGuid, string subAreaGuid);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/SetElementDataByID", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/SetElementDataByIDResponse")]
        void SetElementDataByID(string elementID, string elementTypeName, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool IsProjected, string zoneGuid, string subAreaGuid);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/SetElementDataByID", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/SetElementDataByIDResponse")]
        System.Threading.Tasks.Task SetElementDataByIDAsync(string elementID, string elementTypeName, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool IsProjected, string zoneGuid, string subAreaGuid);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetElementDataByNameandType", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetElementDataByNameandTypeRespon" +
            "se")]
        GetElementDataByNameandTypeResponse GetElementDataByNameandType(GetElementDataByNameandTypeRequest request);

        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetElementDataByNameandType", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetElementDataByNameandTypeRespon" +
            "se")]
        System.Threading.Tasks.Task<GetElementDataByNameandTypeResponse> GetElementDataByNameandTypeAsync(GetElementDataByNameandTypeRequest request);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetElementDataByName", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetElementDataByNameResponse")]
        GetElementDataByNameResponse GetElementDataByName(GetElementDataByNameRequest request);

        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetElementDataByName", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetElementDataByNameResponse")]
        System.Threading.Tasks.Task<GetElementDataByNameResponse> GetElementDataByNameAsync(GetElementDataByNameRequest request);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetElementDataByIDandType", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetElementDataByIDandTypeResponse" +
            "")]
        GetElementDataByIDandTypeResponse GetElementDataByIDandType(GetElementDataByIDandTypeRequest request);

        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetElementDataByIDandType", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetElementDataByIDandTypeResponse" +
            "")]
        System.Threading.Tasks.Task<GetElementDataByIDandTypeResponse> GetElementDataByIDandTypeAsync(GetElementDataByIDandTypeRequest request);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/SetElementAttribute", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/SetElementAttributeResponse")]
        bool SetElementAttribute(NCC.ExternalProject project, string elementName, string elementType, string attributeName, string attributeValue);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/SetElementAttribute", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/SetElementAttributeResponse")]
        System.Threading.Tasks.Task<bool> SetElementAttributeAsync(NCC.ExternalProject project, string elementName, string elementType, string attributeName, string attributeValue);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/SetElementAttributeByID", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/SetElementAttributeByIDResponse")]
        bool SetElementAttributeByID(NCC.ExternalProject project, string elementID, string attributeName, string attributeValue);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/SetElementAttributeByID", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/SetElementAttributeByIDResponse")]
        System.Threading.Tasks.Task<bool> SetElementAttributeByIDAsync(NCC.ExternalProject project, string elementID, string attributeName, string attributeValue);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetElementAttributeByID", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetElementAttributeByIDResponse")]
        GetElementAttributeByIDResponse GetElementAttributeByID(GetElementAttributeByIDRequest request);

        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetElementAttributeByID", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetElementAttributeByIDResponse")]
        System.Threading.Tasks.Task<GetElementAttributeByIDResponse> GetElementAttributeByIDAsync(GetElementAttributeByIDRequest request);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetElementAttributeByName", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetElementAttributeByNameResponse" +
            "")]
        GetElementAttributeByNameResponse GetElementAttributeByName(GetElementAttributeByNameRequest request);

        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetElementAttributeByName", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetElementAttributeByNameResponse" +
            "")]
        System.Threading.Tasks.Task<GetElementAttributeByNameResponse> GetElementAttributeByNameAsync(GetElementAttributeByNameRequest request);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/AddReadAllRoleToProject", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/AddReadAllRoleToProjectResponse")]
        bool AddReadAllRoleToProject(NCC.ExternalProject project);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/AddReadAllRoleToProject", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/AddReadAllRoleToProjectResponse")]
        System.Threading.Tasks.Task<bool> AddReadAllRoleToProjectAsync(NCC.ExternalProject project);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/AddVoltageLevel", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/AddVoltageLevelResponse")]
        string AddVoltageLevel(NCC.ExternalProject project, double un, int colorR, int colorG, int colorB);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/AddVoltageLevel", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/AddVoltageLevelResponse")]
        System.Threading.Tasks.Task<string> AddVoltageLevelAsync(NCC.ExternalProject project, double un, int colorR, int colorG, int colorB);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/SetDiagramMinValues", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/SetDiagramMinValuesResponse")]
        void SetDiagramMinValues(NCC.ExternalProject project, double xMin, double yMin, short units, double factorXY, double angle);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/SetDiagramMinValues", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/SetDiagramMinValuesResponse")]
        System.Threading.Tasks.Task SetDiagramMinValuesAsync(NCC.ExternalProject project, double xMin, double yMin, short units, double factorXY, double angle);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/SetLineStyle", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/SetLineStyleResponse")]
        bool SetLineStyle(NCC.ExternalProject project, string lineType, short lineStyle);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/SetLineStyle", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/SetLineStyleResponse")]
        System.Threading.Tasks.Task<bool> SetLineStyleAsync(NCC.ExternalProject project, string lineType, short lineStyle);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/SetDefaultValues", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/SetDefaultValuesResponse")]
        SetDefaultValuesResponse SetDefaultValues(SetDefaultValuesRequest request);

        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/SetDefaultValues", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/SetDefaultValuesResponse")]
        System.Threading.Tasks.Task<SetDefaultValuesResponse> SetDefaultValuesAsync(SetDefaultValuesRequest request);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/SetDiagramParameterAttribute", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/SetDiagramParameterAttributeRespo" +
            "nse")]
        bool SetDiagramParameterAttribute(NCC.ExternalProject project, string parameterType, string attributeName, string attributeValue);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/SetDiagramParameterAttribute", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/SetDiagramParameterAttributeRespo" +
            "nse")]
        System.Threading.Tasks.Task<bool> SetDiagramParameterAttributeAsync(NCC.ExternalProject project, string parameterType, string attributeName, string attributeValue);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/SetCalcParameterAttribute", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/SetCalcParameterAttributeResponse" +
            "")]
        bool SetCalcParameterAttribute(NCC.ExternalProject project, string parameterType, string attributeName, string attributeValue);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/SetCalcParameterAttribute", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/SetCalcParameterAttributeResponse" +
            "")]
        System.Threading.Tasks.Task<bool> SetCalcParameterAttributeAsync(NCC.ExternalProject project, string parameterType, string attributeName, string attributeValue);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/SetGraphicLayerWorldCoordinates", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/SetGraphicLayerWorldCoordinatesRe" +
            "sponse")]
        bool SetGraphicLayerWorldCoordinates(NCC.ExternalProject project, bool isDirectionUpY, double factor, double angle, double offsetZeroPoint);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/SetGraphicLayerWorldCoordinates", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/SetGraphicLayerWorldCoordinatesRe" +
            "sponse")]
        System.Threading.Tasks.Task<bool> SetGraphicLayerWorldCoordinatesAsync(NCC.ExternalProject project, bool isDirectionUpY, double factor, double angle, double offsetZeroPoint);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/AddNodesFromList", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/AddNodesFromListResponse")]
        AddNodesFromListResponse AddNodesFromList(AddNodesFromListRequest request);

        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/AddNodesFromList", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/AddNodesFromListResponse")]
        System.Threading.Tasks.Task<AddNodesFromListResponse> AddNodesFromListAsync(AddNodesFromListRequest request);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/AddElementsFromList", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/AddElementsFromListResponse")]
        AddElementsFromListResponse AddElementsFromList(AddElementsFromListRequest request);

        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/AddElementsFromList", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/AddElementsFromListResponse")]
        System.Threading.Tasks.Task<AddElementsFromListResponse> AddElementsFromListAsync(AddElementsFromListRequest request);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/AddSubLoadsFromList", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/AddSubLoadsFromListResponse")]
        AddSubLoadsFromListResponse AddSubLoadsFromList(AddSubLoadsFromListRequest request);

        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/AddSubLoadsFromList", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/AddSubLoadsFromListResponse")]
        System.Threading.Tasks.Task<AddSubLoadsFromListResponse> AddSubLoadsFromListAsync(AddSubLoadsFromListRequest request);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/SetDateTimeLastSave", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/SetDateTimeLastSaveResponse")]
        void SetDateTimeLastSave(NCC.ExternalProject project);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/SetDateTimeLastSave", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/SetDateTimeLastSaveResponse")]
        System.Threading.Tasks.Task SetDateTimeLastSaveAsync(NCC.ExternalProject project);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetResultSummary", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetResultSummaryResponse")]
        string GetResultSummary(NCC.ExternalProject project, string analysisType, System.DateTime simulationDateTime, int networkTypeGroup, string networkTypeGroupID);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetResultSummary", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetResultSummaryResponse")]
        System.Threading.Tasks.Task<string> GetResultSummaryAsync(NCC.ExternalProject project, string analysisType, System.DateTime simulationDateTime, int networkTypeGroup, string networkTypeGroupID);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetListResultSummary", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetListResultSummaryResponse")]
        string[] GetListResultSummary(NCC.ExternalProject project, string analysisType, System.DateTime simulationDateTime, int networkTypeGroup, string networkTypeGroupID);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetListResultSummary", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetListResultSummaryResponse")]
        System.Threading.Tasks.Task<string[]> GetListResultSummaryAsync(NCC.ExternalProject project, string analysisType, System.DateTime simulationDateTime, int networkTypeGroup, string networkTypeGroupID);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetAllElementResults", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetAllElementResultsResponse")]
        BCP.Neplan.Web.Services.External.NeplanServiceElementResult[] GetAllElementResults(NCC.ExternalProject project, string analysisType);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetAllElementResults", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetAllElementResultsResponse")]
        System.Threading.Tasks.Task<BCP.Neplan.Web.Services.External.NeplanServiceElementResult[]> GetAllElementResultsAsync(NCC.ExternalProject project, string analysisType);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetCalculationSettings", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetCalculationSettingsResponse")]
        string GetCalculationSettings(NCC.ExternalProject project, string analysisType);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetCalculationSettings", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetCalculationSettingsResponse")]
        System.Threading.Tasks.Task<string> GetCalculationSettingsAsync(NCC.ExternalProject project, string analysisType);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetResultElementByID", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetResultElementByIDResponse")]
        string GetResultElementByID(NCC.ExternalProject project, string elementID, int portNr, string analysisType, System.DateTime simulationDateTime);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetResultElementByID", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetResultElementByIDResponse")]
        System.Threading.Tasks.Task<string> GetResultElementByIDAsync(NCC.ExternalProject project, string elementID, int portNr, string analysisType, System.DateTime simulationDateTime);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetResultsElementsByID", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetResultsElementsByIDResponse")]
        BCP.Neplan.Web.Services.External.NeplanServiceElementResult[] GetResultsElementsByID(NCC.ExternalProject project, string[] elementID, int portNr, string analysisType, System.DateTime simulationDateTime);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetResultsElementsByID", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetResultsElementsByIDResponse")]
        System.Threading.Tasks.Task<BCP.Neplan.Web.Services.External.NeplanServiceElementResult[]> GetResultsElementsByIDAsync(NCC.ExternalProject project, string[] elementID, int portNr, string analysisType, System.DateTime simulationDateTime);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetResultElementByName", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetResultElementByNameResponse")]
        string GetResultElementByName(NCC.ExternalProject project, string elementName, string elementTypeName, int portNr, string analysisType, System.DateTime simulationDateTime);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetResultElementByName", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetResultElementByNameResponse")]
        System.Threading.Tasks.Task<string> GetResultElementByNameAsync(NCC.ExternalProject project, string elementName, string elementTypeName, int portNr, string analysisType, System.DateTime simulationDateTime);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/AnalyseVariantWithAnalysisSetting" +
            "s", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/AnalyseVariantWithAnalysisSetting" +
            "sResponse")]
        NCC.AnalysisReturnInfo AnalyseVariantWithAnalysisSettings(NCC.ExternalProject project, string analysisRefenceID, string analysisModule, string calcNameID, string analysisMethode, string conditions, string analysisLoadOptionXML, NCC.AnalysisParameterSettings settings);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/AnalyseVariantWithAnalysisSetting" +
            "s", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/AnalyseVariantWithAnalysisSetting" +
            "sResponse")]
        System.Threading.Tasks.Task<NCC.AnalysisReturnInfo> AnalyseVariantWithAnalysisSettingsAsync(NCC.ExternalProject project, string analysisRefenceID, string analysisModule, string calcNameID, string analysisMethode, string conditions, string analysisLoadOptionXML, NCC.AnalysisParameterSettings settings);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/AnalyseVariant", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/AnalyseVariantResponse")]
        NCC.AnalysisReturnInfo AnalyseVariant(NCC.ExternalProject project, string analysisRefenceID, string analysisModule, string calcNameID, string analysisMethode, string conditions, string analysisLoadOptionXML);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/AnalyseVariant", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/AnalyseVariantResponse")]
        System.Threading.Tasks.Task<NCC.AnalysisReturnInfo> AnalyseVariantAsync(NCC.ExternalProject project, string analysisRefenceID, string analysisModule, string calcNameID, string analysisMethode, string conditions, string analysisLoadOptionXML);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/IsAnalysisDone", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/IsAnalysisDoneResponse")]
        bool IsAnalysisDone(string analysisRefenceID);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/IsAnalysisDone", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/IsAnalysisDoneResponse")]
        System.Threading.Tasks.Task<bool> IsAnalysisDoneAsync(string analysisRefenceID);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/AnalyseWithListFileWithoutSaving", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/AnalyseWithListFileWithoutSavingR" +
            "esponse")]
        NCC.AnalysisReturnInfo AnalyseWithListFileWithoutSaving(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/AnalyseWithListFileWithoutSaving", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/AnalyseWithListFileWithoutSavingR" +
            "esponse")]
        System.Threading.Tasks.Task<NCC.AnalysisReturnInfo> AnalyseWithListFileWithoutSavingAsync(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/AnalyseWithProjectFileWithoutSavi" +
            "ng", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/AnalyseWithProjectFileWithoutSavi" +
            "ngResponse")]
        NCC.AnalysisReturnInfo AnalyseWithProjectFileWithoutSaving(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/AnalyseWithProjectFileWithoutSavi" +
            "ng", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/AnalyseWithProjectFileWithoutSavi" +
            "ngResponse")]
        System.Threading.Tasks.Task<NCC.AnalysisReturnInfo> AnalyseWithProjectFileWithoutSavingAsync(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/AnalyseWithCDEFileWithoutSaving", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/AnalyseWithCDEFileWithoutSavingRe" +
            "sponse")]
        NCC.AnalysisReturnInfo AnalyseWithCDEFileWithoutSaving(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/AnalyseWithCDEFileWithoutSaving", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/AnalyseWithCDEFileWithoutSavingRe" +
            "sponse")]
        System.Threading.Tasks.Task<NCC.AnalysisReturnInfo> AnalyseWithCDEFileWithoutSavingAsync(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/DoAnalysisFromFiles", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/DoAnalysisFromFilesResponse")]
        NCC.AnalysisReturnInfo DoAnalysisFromFiles(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/DoAnalysisFromFiles", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/DoAnalysisFromFilesResponse")]
        System.Threading.Tasks.Task<NCC.AnalysisReturnInfo> DoAnalysisFromFilesAsync(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/EnergyCalculationFromFiles", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/EnergyCalculationFromFilesRespons" +
            "e")]
        NCC.AnalysisReturnInfo EnergyCalculationFromFiles(string uploadName, string fromTime, string toTime, int timeIncrement, string copySettingsFromProjectName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/EnergyCalculationFromFiles", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/EnergyCalculationFromFilesRespons" +
            "e")]
        System.Threading.Tasks.Task<NCC.AnalysisReturnInfo> EnergyCalculationFromFilesAsync(string uploadName, string fromTime, string toTime, int timeIncrement, string copySettingsFromProjectName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/LoadAllocationFromDB", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/LoadAllocationFromDBResponse")]
        NCC.AnalysisReturnInfo LoadAllocationFromDB(string projectName, string measurementDefinitionName, string fromTime, string toTime, int timeIncrement, NCC.AnalysisParameterSettings settings);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/LoadAllocationFromDB", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/LoadAllocationFromDBResponse")]
        System.Threading.Tasks.Task<NCC.AnalysisReturnInfo> LoadAllocationFromDBAsync(string projectName, string measurementDefinitionName, string fromTime, string toTime, int timeIncrement, NCC.AnalysisParameterSettings settings);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/LoadAllocationFromMeasurmentFileA" +
            "ndProjectName", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/LoadAllocationFromMeasurmentFileA" +
            "ndProjectNameResponse")]
        NCC.AnalysisReturnInfo LoadAllocationFromMeasurmentFileAndProjectName(string uploadedMeasurementFileName, string projectName, string fromTime, string toTime, int timeIncrement, NCC.AnalysisParameterSettings settings);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/LoadAllocationFromMeasurmentFileA" +
            "ndProjectName", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/LoadAllocationFromMeasurmentFileA" +
            "ndProjectNameResponse")]
        System.Threading.Tasks.Task<NCC.AnalysisReturnInfo> LoadAllocationFromMeasurmentFileAndProjectNameAsync(string uploadedMeasurementFileName, string projectName, string fromTime, string toTime, int timeIncrement, NCC.AnalysisParameterSettings settings);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/LoadAllocationFromMeasurmentFile", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/LoadAllocationFromMeasurmentFileR" +
            "esponse")]
        NCC.AnalysisReturnInfo LoadAllocationFromMeasurmentFile(NCC.ExternalProject project, string uploadedMeasurementFileName, string fromTime, string toTime, int timeIncrement, NCC.AnalysisParameterSettings settings);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/LoadAllocationFromMeasurmentFile", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/LoadAllocationFromMeasurmentFileR" +
            "esponse")]
        System.Threading.Tasks.Task<NCC.AnalysisReturnInfo> LoadAllocationFromMeasurmentFileAsync(NCC.ExternalProject project, string uploadedMeasurementFileName, string fromTime, string toTime, int timeIncrement, NCC.AnalysisParameterSettings settings);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/ImportFromListFileAndDoLoadAlloca" +
            "tion", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/ImportFromListFileAndDoLoadAlloca" +
            "tionResponse")]
        ImportFromListFileAndDoLoadAllocationResponse ImportFromListFileAndDoLoadAllocation(ImportFromListFileAndDoLoadAllocationRequest request);

        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/ImportFromListFileAndDoLoadAlloca" +
            "tion", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/ImportFromListFileAndDoLoadAlloca" +
            "tionResponse")]
        System.Threading.Tasks.Task<ImportFromListFileAndDoLoadAllocationResponse> ImportFromListFileAndDoLoadAllocationAsync(ImportFromListFileAndDoLoadAllocationRequest request);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/DeleteAnaylsisLogFile", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/DeleteAnaylsisLogFileResponse")]
        bool DeleteAnaylsisLogFile(string fileName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/DeleteAnaylsisLogFile", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/DeleteAnaylsisLogFileResponse")]
        System.Threading.Tasks.Task<bool> DeleteAnaylsisLogFileAsync(string fileName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/DeleteAnalysisResultFile", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/DeleteAnalysisResultFileResponse")]
        bool DeleteAnalysisResultFile(string fileName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/DeleteAnalysisResultFile", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/DeleteAnalysisResultFileResponse")]
        System.Threading.Tasks.Task<bool> DeleteAnalysisResultFileAsync(string fileName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/DeleteProject", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/DeleteProjectResponse")]
        bool DeleteProject(NCC.ExternalProject project);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/DeleteProject", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/DeleteProjectResponse")]
        System.Threading.Tasks.Task<bool> DeleteProjectAsync(NCC.ExternalProject project);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/MarkedProjectAsDeleted", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/MarkedProjectAsDeletedResponse")]
        bool MarkedProjectAsDeleted(NCC.ExternalProject project);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/MarkedProjectAsDeleted", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/MarkedProjectAsDeletedResponse")]
        System.Threading.Tasks.Task<bool> MarkedProjectAsDeletedAsync(NCC.ExternalProject project);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/ImportFromFile", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/ImportFromFileResponse")]
        int ImportFromFile(string uploadName, string projectName, bool withGraphic, string copySettingsFromProjectName, bool merge, bool mergeOnNewDiagram);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/ImportFromFile", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/ImportFromFileResponse")]
        System.Threading.Tasks.Task<int> ImportFromFileAsync(string uploadName, string projectName, bool withGraphic, string copySettingsFromProjectName, bool merge, bool mergeOnNewDiagram);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/AddFeederFromList", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/AddFeederFromListResponse")]
        bool AddFeederFromList(NCC.ExternalProject project, ImportFeederItem[] feederList);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/AddFeederFromList", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/AddFeederFromListResponse")]
        System.Threading.Tasks.Task<bool> AddFeederFromListAsync(NCC.ExternalProject project, ImportFeederItem[] feederList);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/ImportFromList", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/ImportFromListResponse")]
        NCC.ExternalProject ImportFromList(ImportElementItem[] listElements, string projectName, string copySettingsFromProjectName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/ImportFromList", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/ImportFromListResponse")]
        System.Threading.Tasks.Task<NCC.ExternalProject> ImportFromListAsync(ImportElementItem[] listElements, string projectName, string copySettingsFromProjectName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/ImportFromListFile", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/ImportFromListFileResponse")]
        NCC.ExternalProject ImportFromListFile(string uploadName, string projectName, string copySettingsFromProjectName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/ImportFromListFile", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/ImportFromListFileResponse")]
        System.Threading.Tasks.Task<NCC.ExternalProject> ImportFromListFileAsync(string uploadName, string projectName, string copySettingsFromProjectName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/MergeProjectFromListFile", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/MergeProjectFromListFileResponse")]
        NCC.ExternalProject MergeProjectFromListFile(string uploadName, string projectToMerge, bool mergeOnNewDiagram);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/MergeProjectFromListFile", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/MergeProjectFromListFileResponse")]
        System.Threading.Tasks.Task<NCC.ExternalProject> MergeProjectFromListFileAsync(string uploadName, string projectToMerge, bool mergeOnNewDiagram);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/ImportFromCDE", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/ImportFromCDEResponse")]
        NCC.ExternalProject ImportFromCDE(string path1, string path2, string path3, string copySettingsFromProjectName, bool withGraphic);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/ImportFromCDE", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/ImportFromCDEResponse")]
        System.Threading.Tasks.Task<NCC.ExternalProject> ImportFromCDEAsync(string path1, string path2, string path3, string copySettingsFromProjectName, bool withGraphic);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/ImportFromCDEFiles", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/ImportFromCDEFilesResponse")]
        NCC.ExternalProject ImportFromCDEFiles(string cdeFilename, string ndbFilename, string xmlFilename, string copySettingsFromProjectName, bool withGraphic);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/ImportFromCDEFiles", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/ImportFromCDEFilesResponse")]
        System.Threading.Tasks.Task<NCC.ExternalProject> ImportFromCDEFilesAsync(string cdeFilename, string ndbFilename, string xmlFilename, string copySettingsFromProjectName, bool withGraphic);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/ImportFromCDEZipFile", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/ImportFromCDEZipFileResponse")]
        NCC.ExternalProject ImportFromCDEZipFile(string zipFile, string copySettingsFromProjectName, bool withGraphic);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/ImportFromCDEZipFile", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/ImportFromCDEZipFileResponse")]
        System.Threading.Tasks.Task<NCC.ExternalProject> ImportFromCDEZipFileAsync(string zipFile, string copySettingsFromProjectName, bool withGraphic);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/ImportFromPSSEFiles", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/ImportFromPSSEFilesResponse")]
        NCC.ExternalProject ImportFromPSSEFiles(string rawFilename, string seqFilename, string dyrFilename, string drwFilename, int psseVersion, bool ukr, bool withStations, bool withBreakers, int charNumStations, int nameRule, int lineQuant, string copySettingsFromProjectName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/ImportFromPSSEFiles", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/ImportFromPSSEFilesResponse")]
        System.Threading.Tasks.Task<NCC.ExternalProject> ImportFromPSSEFilesAsync(string rawFilename, string seqFilename, string dyrFilename, string drwFilename, int psseVersion, bool ukr, bool withStations, bool withBreakers, int charNumStations, int nameRule, int lineQuant, string copySettingsFromProjectName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/ImportFromPSSEZipFile", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/ImportFromPSSEZipFileResponse")]
        NCC.ExternalProject ImportFromPSSEZipFile(string zipFile, int psseVersion, bool ukr, bool withStations, bool withBreakers, int charNumStations, int nameRule, int lineQuant, string copySettingsFromProjectName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/ImportFromPSSEZipFile", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/ImportFromPSSEZipFileResponse")]
        System.Threading.Tasks.Task<NCC.ExternalProject> ImportFromPSSEZipFileAsync(string zipFile, int psseVersion, bool ukr, bool withStations, bool withBreakers, int charNumStations, int nameRule, int lineQuant, string copySettingsFromProjectName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/ImportFromShapeFile", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/ImportFromShapeFileResponse")]
        int ImportFromShapeFile(string path, string fileName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/ImportFromShapeFile", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/ImportFromShapeFileResponse")]
        System.Threading.Tasks.Task<int> ImportFromShapeFileAsync(string path, string fileName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/ImportFromNDB", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/ImportFromNDBResponse")]
        bool ImportFromNDB(NCC.ExternalProject project, string uploadName, string origFileName, string mediumType);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/ImportFromNDB", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/ImportFromNDBResponse")]
        System.Threading.Tasks.Task<bool> ImportFromNDBAsync(NCC.ExternalProject project, string uploadName, string origFileName, string mediumType);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/ImportMeasuredDataFromXMlFile", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/ImportMeasuredDataFromXMlFileResp" +
            "onse")]
        bool ImportMeasuredDataFromXMlFile(NCC.ExternalProject project, string uploadName, string definitionName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/ImportMeasuredDataFromXMlFile", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/ImportMeasuredDataFromXMlFileResp" +
            "onse")]
        System.Threading.Tasks.Task<bool> ImportMeasuredDataFromXMlFileAsync(NCC.ExternalProject project, string uploadName, string definitionName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/ExportProjectToNEP360", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/ExportProjectToNEP360Response")]
        System.IO.Stream ExportProjectToNEP360(string projectName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/ExportProjectToNEP360", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/ExportProjectToNEP360Response")]
        System.Threading.Tasks.Task<System.IO.Stream> ExportProjectToNEP360Async(string projectName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/WriteMessageToLogFile", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/WriteMessageToLogFileResponse")]
        void WriteMessageToLogFile(NCC.ExternalProject project, string text, string logLvl);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/WriteMessageToLogFile", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/WriteMessageToLogFileResponse")]
        System.Threading.Tasks.Task WriteMessageToLogFileAsync(NCC.ExternalProject project, string text, string logLvl);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/DeleteUserLogFile", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/DeleteUserLogFileResponse")]
        bool DeleteUserLogFile();

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/DeleteUserLogFile", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/DeleteUserLogFileResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserLogFileAsync();

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetLogFileAsString", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetLogFileAsStringResponse")]
        string GetLogFileAsString();

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetLogFileAsString", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetLogFileAsStringResponse")]
        System.Threading.Tasks.Task<string> GetLogFileAsStringAsync();

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetLogFileAsList", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetLogFileAsListResponse")]
        string[] GetLogFileAsList();

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetLogFileAsList", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetLogFileAsListResponse")]
        System.Threading.Tasks.Task<string[]> GetLogFileAsListAsync();

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/XMLUpload", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/XMLUploadResponse")]
        string XMLUpload(System.IO.Stream stream);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/XMLUpload", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/XMLUploadResponse")]
        System.Threading.Tasks.Task<string> XMLUploadAsync(System.IO.Stream stream);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/CDEUpload", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/CDEUploadResponse")]
        string CDEUpload(System.IO.Stream stream);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/CDEUpload", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/CDEUploadResponse")]
        System.Threading.Tasks.Task<string> CDEUploadAsync(System.IO.Stream stream);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/NDBUpload", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/NDBUploadResponse")]
        string NDBUpload(System.IO.Stream stream);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/NDBUpload", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/NDBUploadResponse")]
        System.Threading.Tasks.Task<string> NDBUploadAsync(System.IO.Stream stream);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/Nep360Upload", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/Nep360UploadResponse")]
        string Nep360Upload(System.IO.Stream stream);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/Nep360Upload", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/Nep360UploadResponse")]
        System.Threading.Tasks.Task<string> Nep360UploadAsync(System.IO.Stream stream);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/ZipUpload", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/ZipUploadResponse")]
        string ZipUpload(System.IO.Stream stream);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/ZipUpload", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/ZipUploadResponse")]
        System.Threading.Tasks.Task<string> ZipUploadAsync(System.IO.Stream stream);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/NepMeasUpload", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/NepMeasUploadResponse")]
        string NepMeasUpload(System.IO.Stream stream);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/NepMeasUpload", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/NepMeasUploadResponse")]
        System.Threading.Tasks.Task<string> NepMeasUploadAsync(System.IO.Stream stream);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetUserLogFile", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetUserLogFileResponse")]
        System.IO.Stream GetUserLogFile();

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetUserLogFile", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetUserLogFileResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetUserLogFileAsync();

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetAnaylsisLogFile", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetAnaylsisLogFileResponse")]
        System.IO.Stream GetAnaylsisLogFile(string fileName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetAnaylsisLogFile", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetAnaylsisLogFileResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetAnaylsisLogFileAsync(string fileName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetAnalysisResultFile", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetAnalysisResultFileResponse")]
        System.IO.Stream GetAnalysisResultFile(string fileName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetAnalysisResultFile", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetAnalysisResultFileResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetAnalysisResultFileAsync(string fileName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/createDailyBackup", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/createDailyBackupResponse")]
        string createDailyBackup(bool isAzure, string code);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/createDailyBackup", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/createDailyBackupResponse")]
        System.Threading.Tasks.Task<string> createDailyBackupAsync(bool isAzure, string code);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/removeAllExpiredProjects", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/removeAllExpiredProjectsResponse")]
        string removeAllExpiredProjects(string code);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/removeAllExpiredProjects", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/removeAllExpiredProjectsResponse")]
        System.Threading.Tasks.Task<string> removeAllExpiredProjectsAsync(string code);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetNamesOfElementsByType", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetNamesOfElementsByTypeResponse")]
        System.Collections.Generic.KeyValuePair<string, string>[] GetNamesOfElementsByType(string projectName, string elementType);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetNamesOfElementsByType", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetNamesOfElementsByTypeResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.KeyValuePair<string, string>[]> GetNamesOfElementsByTypeAsync(string projectName, string elementType);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/FindSwitchStatusOfElements", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/FindSwitchStatusOfElementsRespons" +
            "e")]
        System.Collections.Generic.KeyValuePair<string, BCP.Neplan.Web.Services.External.NeplanServiceConnection_info>[] FindSwitchStatusOfElements(string projectName, string[] GenLoadNames);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/FindSwitchStatusOfElements", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/FindSwitchStatusOfElementsRespons" +
            "e")]
        System.Threading.Tasks.Task<System.Collections.Generic.KeyValuePair<string, BCP.Neplan.Web.Services.External.NeplanServiceConnection_info>[]> FindSwitchStatusOfElementsAsync(string projectName, string[] GenLoadNames);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/Find_Voltage_Level_of_One_Port_El" +
            "ement", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/Find_Voltage_Level_of_One_Port_El" +
            "ementResponse")]
        Find_Voltage_Level_of_One_Port_ElementResponse Find_Voltage_Level_of_One_Port_Element(Find_Voltage_Level_of_One_Port_ElementRequest request);

        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/Find_Voltage_Level_of_One_Port_El" +
            "ement", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/Find_Voltage_Level_of_One_Port_El" +
            "ementResponse")]
        System.Threading.Tasks.Task<Find_Voltage_Level_of_One_Port_ElementResponse> Find_Voltage_Level_of_One_Port_ElementAsync(Find_Voltage_Level_of_One_Port_ElementRequest request);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetBusBarOf1PortElementByID", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetBusBarOf1PortElementByIDRespon" +
            "se")]
        GetBusBarOf1PortElementByIDResponse GetBusBarOf1PortElementByID(GetBusBarOf1PortElementByIDRequest request);

        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetBusBarOf1PortElementByID", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetBusBarOf1PortElementByIDRespon" +
            "se")]
        System.Threading.Tasks.Task<GetBusBarOf1PortElementByIDResponse> GetBusBarOf1PortElementByIDAsync(GetBusBarOf1PortElementByIDRequest request);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetBusBarOf1PortElementByName", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetBusBarOf1PortElementByNameResp" +
            "onse")]
        GetBusBarOf1PortElementByNameResponse GetBusBarOf1PortElementByName(GetBusBarOf1PortElementByNameRequest request);

        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetBusBarOf1PortElementByName", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetBusBarOf1PortElementByNameResp" +
            "onse")]
        System.Threading.Tasks.Task<GetBusBarOf1PortElementByNameResponse> GetBusBarOf1PortElementByNameAsync(GetBusBarOf1PortElementByNameRequest request);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/ChangeSwitchStatusOfElements", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/ChangeSwitchStatusOfElementsRespo" +
            "nse")]
        bool ChangeSwitchStatusOfElements(string projectName, string GenLoadName, bool connectionstatus);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/ChangeSwitchStatusOfElements", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/ChangeSwitchStatusOfElementsRespo" +
            "nse")]
        System.Threading.Tasks.Task<bool> ChangeSwitchStatusOfElementsAsync(string projectName, string GenLoadName, bool connectionstatus);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetPQValuesLdSmAsm", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetPQValuesLdSmAsmResponse")]
        BCP.Neplan.Web.Services.External.NeplanServiceLoadGeneration_info[] GetPQValuesLdSmAsm(string projectName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetPQValuesLdSmAsm", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetPQValuesLdSmAsmResponse")]
        System.Threading.Tasks.Task<BCP.Neplan.Web.Services.External.NeplanServiceLoadGeneration_info[]> GetPQValuesLdSmAsmAsync(string projectName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/SetPowerofLoadsGenerators", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/SetPowerofLoadsGeneratorsResponse" +
            "")]
        bool SetPowerofLoadsGenerators(string projectname, BCP.Neplan.Web.Services.External.NeplanServiceLoadGeneration_info[] loadgens);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/SetPowerofLoadsGenerators", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/SetPowerofLoadsGeneratorsResponse" +
            "")]
        System.Threading.Tasks.Task<bool> SetPowerofLoadsGeneratorsAsync(string projectname, BCP.Neplan.Web.Services.External.NeplanServiceLoadGeneration_info[] loadgens);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/ChangeSwitchStatusOfElementList", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/ChangeSwitchStatusOfElementListRe" +
            "sponse")]
        bool ChangeSwitchStatusOfElementList(string projectName, System.Guid[] elemids, bool connectionstatus);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/ChangeSwitchStatusOfElementList", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/ChangeSwitchStatusOfElementListRe" +
            "sponse")]
        System.Threading.Tasks.Task<bool> ChangeSwitchStatusOfElementListAsync(string projectName, System.Guid[] elemids, bool connectionstatus);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/ImportIEC_62325_451_2FilesAndDoCI" +
            "MExport", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/ImportIEC_62325_451_2FilesAndDoCI" +
            "MExportResponse")]
        BCP.Neplan.Web.Services.NeplanDomainServiceImportReturnInfo ImportIEC_62325_451_2FilesAndDoCIMExport(string folderpath, System.Guid variantID, string username, bool onlyOneEQ, string mAS);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/ImportIEC_62325_451_2FilesAndDoCI" +
            "MExport", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/ImportIEC_62325_451_2FilesAndDoCI" +
            "MExportResponse")]
        System.Threading.Tasks.Task<BCP.Neplan.Web.Services.NeplanDomainServiceImportReturnInfo> ImportIEC_62325_451_2FilesAndDoCIMExportAsync(string folderpath, System.Guid variantID, string username, bool onlyOneEQ, string mAS);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetFeederIDByName", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetFeederIDByNameResponse")]
        System.Guid[] GetFeederIDByName(string ProjectName, string VariantName, string[] FeederNames);

        [System.ServiceModel.OperationContractAttribute(Action = "http://www.neplan.ch/Web/External/NeplanService/GetFeederIDByName", ReplyAction = "http://www.neplan.ch/Web/External/NeplanService/GetFeederIDByNameResponse")]
        System.Threading.Tasks.Task<System.Guid[]> GetFeederIDByNameAsync(string ProjectName, string VariantName, string[] FeederNames);
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "InsertNode", WrapperNamespace = "http://www.neplan.ch/Web/External", IsWrapped = true)]
    public partial class InsertNodeRequest
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 0)]
        public NCC.ExternalProject project;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 1)]
        public string name;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 2)]
        public double un;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 3)]
        public double fn;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 4)]
        public string libraryType;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 5)]
        public string xmlData;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 6)]
        public double x;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 7)]
        public double y;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 8)]
        public string symbolName;

        public InsertNodeRequest()
        {
        }

        public InsertNodeRequest(NCC.ExternalProject project, string name, double un, double fn, string libraryType, string xmlData, double x, double y, string symbolName)
        {
            this.project = project;
            this.name = name;
            this.un = un;
            this.fn = fn;
            this.libraryType = libraryType;
            this.xmlData = xmlData;
            this.x = x;
            this.y = y;
            this.symbolName = symbolName;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "InsertNodeResponse", WrapperNamespace = "http://www.neplan.ch/Web/External", IsWrapped = true)]
    public partial class InsertNodeResponse
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 0)]
        public string InsertNodeResult;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 1)]
        public NCC.ExternalProject project;

        public InsertNodeResponse()
        {
        }

        public InsertNodeResponse(string InsertNodeResult, NCC.ExternalProject project)
        {
            this.InsertNodeResult = InsertNodeResult;
            this.project = project;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "InsertNodeWithoutGraphic", WrapperNamespace = "http://www.neplan.ch/Web/External", IsWrapped = true)]
    public partial class InsertNodeWithoutGraphicRequest
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 0)]
        public NCC.ExternalProject project;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 1)]
        public string name;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 2)]
        public double un;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 3)]
        public double fn;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 4)]
        public string libraryType;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 5)]
        public string xmlData;

        public InsertNodeWithoutGraphicRequest()
        {
        }

        public InsertNodeWithoutGraphicRequest(NCC.ExternalProject project, string name, double un, double fn, string libraryType, string xmlData)
        {
            this.project = project;
            this.name = name;
            this.un = un;
            this.fn = fn;
            this.libraryType = libraryType;
            this.xmlData = xmlData;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "InsertNodeWithoutGraphicResponse", WrapperNamespace = "http://www.neplan.ch/Web/External", IsWrapped = true)]
    public partial class InsertNodeWithoutGraphicResponse
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 0)]
        public string InsertNodeWithoutGraphicResult;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 1)]
        public NCC.ExternalProject project;

        public InsertNodeWithoutGraphicResponse()
        {
        }

        public InsertNodeWithoutGraphicResponse(string InsertNodeWithoutGraphicResult, NCC.ExternalProject project)
        {
            this.InsertNodeWithoutGraphicResult = InsertNodeWithoutGraphicResult;
            this.project = project;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "InsertBusbar", WrapperNamespace = "http://www.neplan.ch/Web/External", IsWrapped = true)]
    public partial class InsertBusbarRequest
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 0)]
        public NCC.ExternalProject project;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 1)]
        public string name;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 2)]
        public double un;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 3)]
        public double fn;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 4)]
        public string libraryType;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 5)]
        public string xmlData;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 6)]
        public double[] coordinates;

        public InsertBusbarRequest()
        {
        }

        public InsertBusbarRequest(NCC.ExternalProject project, string name, double un, double fn, string libraryType, string xmlData, double[] coordinates)
        {
            this.project = project;
            this.name = name;
            this.un = un;
            this.fn = fn;
            this.libraryType = libraryType;
            this.xmlData = xmlData;
            this.coordinates = coordinates;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "InsertBusbarResponse", WrapperNamespace = "http://www.neplan.ch/Web/External", IsWrapped = true)]
    public partial class InsertBusbarResponse
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 0)]
        public string InsertBusbarResult;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 1)]
        public NCC.ExternalProject project;

        public InsertBusbarResponse()
        {
        }

        public InsertBusbarResponse(string InsertBusbarResult, NCC.ExternalProject project)
        {
            this.InsertBusbarResult = InsertBusbarResult;
            this.project = project;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "Insert1PortElement", WrapperNamespace = "http://www.neplan.ch/Web/External", IsWrapped = true)]
    public partial class Insert1PortElementRequest
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 0)]
        public NCC.ExternalProject project;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 1)]
        public string name;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 2)]
        public string fromNode;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 3)]
        public string elementTypeName;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 4)]
        public string libraryType;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 5)]
        public string xmlData;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 6)]
        public int phase;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 7)]
        public double[] coordinatesLink;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 8)]
        public string symbolName;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 9)]
        public double symbolAngle;

        public Insert1PortElementRequest()
        {
        }

        public Insert1PortElementRequest(NCC.ExternalProject project, string name, string fromNode, string elementTypeName, string libraryType, string xmlData, int phase, double[] coordinatesLink, string symbolName, double symbolAngle)
        {
            this.project = project;
            this.name = name;
            this.fromNode = fromNode;
            this.elementTypeName = elementTypeName;
            this.libraryType = libraryType;
            this.xmlData = xmlData;
            this.phase = phase;
            this.coordinatesLink = coordinatesLink;
            this.symbolName = symbolName;
            this.symbolAngle = symbolAngle;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "Insert1PortElementResponse", WrapperNamespace = "http://www.neplan.ch/Web/External", IsWrapped = true)]
    public partial class Insert1PortElementResponse
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 0)]
        public string Insert1PortElementResult;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 1)]
        public NCC.ExternalProject project;

        public Insert1PortElementResponse()
        {
        }

        public Insert1PortElementResponse(string Insert1PortElementResult, NCC.ExternalProject project)
        {
            this.Insert1PortElementResult = Insert1PortElementResult;
            this.project = project;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "InsertGraphicLayer", WrapperNamespace = "http://www.neplan.ch/Web/External", IsWrapped = true)]
    public partial class InsertGraphicLayerRequest
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 0)]
        public NCC.ExternalProject project;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 1)]
        public string diagramID;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 2)]
        public string graphicLayerName;

        public InsertGraphicLayerRequest()
        {
        }

        public InsertGraphicLayerRequest(NCC.ExternalProject project, string diagramID, string graphicLayerName)
        {
            this.project = project;
            this.diagramID = diagramID;
            this.graphicLayerName = graphicLayerName;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "InsertGraphicLayerResponse", WrapperNamespace = "http://www.neplan.ch/Web/External", IsWrapped = true)]
    public partial class InsertGraphicLayerResponse
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 0)]
        public string InsertGraphicLayerResult;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 1)]
        public NCC.ExternalProject project;

        public InsertGraphicLayerResponse()
        {
        }

        public InsertGraphicLayerResponse(string InsertGraphicLayerResult, NCC.ExternalProject project)
        {
            this.InsertGraphicLayerResult = InsertGraphicLayerResult;
            this.project = project;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "GetAllElementsOfProject", WrapperNamespace = "http://www.neplan.ch/Web/External", IsWrapped = true)]
    public partial class GetAllElementsOfProjectRequest
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 0)]
        public NCC.ExternalProject project;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 1)]
        public System.Collections.Generic.Dictionary<string, string> elementNames;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 2)]
        public System.Collections.Generic.Dictionary<string, string> elementTypes;

        public GetAllElementsOfProjectRequest()
        {
        }

        public GetAllElementsOfProjectRequest(NCC.ExternalProject project, System.Collections.Generic.Dictionary<string, string> elementNames, System.Collections.Generic.Dictionary<string, string> elementTypes)
        {
            this.project = project;
            this.elementNames = elementNames;
            this.elementTypes = elementTypes;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "GetAllElementsOfProjectResponse", WrapperNamespace = "http://www.neplan.ch/Web/External", IsWrapped = true)]
    public partial class GetAllElementsOfProjectResponse
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 0)]
        public bool GetAllElementsOfProjectResult;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 1)]
        public System.Collections.Generic.Dictionary<string, string> elementNames;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 2)]
        public System.Collections.Generic.Dictionary<string, string> elementTypes;

        public GetAllElementsOfProjectResponse()
        {
        }

        public GetAllElementsOfProjectResponse(bool GetAllElementsOfProjectResult, System.Collections.Generic.Dictionary<string, string> elementNames, System.Collections.Generic.Dictionary<string, string> elementTypes)
        {
            this.GetAllElementsOfProjectResult = GetAllElementsOfProjectResult;
            this.elementNames = elementNames;
            this.elementTypes = elementTypes;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "GetAllElementsOfElementType", WrapperNamespace = "http://www.neplan.ch/Web/External", IsWrapped = true)]
    public partial class GetAllElementsOfElementTypeRequest
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 0)]
        public NCC.ExternalProject project;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 1)]
        public string elementType;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 2)]
        public System.Collections.Generic.Dictionary<string, string> elementNames;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 3)]
        public System.Collections.Generic.Dictionary<string, string> elementTypes;

        public GetAllElementsOfElementTypeRequest()
        {
        }

        public GetAllElementsOfElementTypeRequest(NCC.ExternalProject project, string elementType, System.Collections.Generic.Dictionary<string, string> elementNames, System.Collections.Generic.Dictionary<string, string> elementTypes)
        {
            this.project = project;
            this.elementType = elementType;
            this.elementNames = elementNames;
            this.elementTypes = elementTypes;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "GetAllElementsOfElementTypeResponse", WrapperNamespace = "http://www.neplan.ch/Web/External", IsWrapped = true)]
    public partial class GetAllElementsOfElementTypeResponse
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 0)]
        public bool GetAllElementsOfElementTypeResult;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 1)]
        public System.Collections.Generic.Dictionary<string, string> elementNames;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 2)]
        public System.Collections.Generic.Dictionary<string, string> elementTypes;

        public GetAllElementsOfElementTypeResponse()
        {
        }

        public GetAllElementsOfElementTypeResponse(bool GetAllElementsOfElementTypeResult, System.Collections.Generic.Dictionary<string, string> elementNames, System.Collections.Generic.Dictionary<string, string> elementTypes)
        {
            this.GetAllElementsOfElementTypeResult = GetAllElementsOfElementTypeResult;
            this.elementNames = elementNames;
            this.elementTypes = elementTypes;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "GetElementDataByNameandType", WrapperNamespace = "http://www.neplan.ch/Web/External", IsWrapped = true)]
    public partial class GetElementDataByNameandTypeRequest
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 0)]
        public NCC.ExternalProject project;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 1)]
        public string elementName;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 2)]
        public string elementTypeName;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 3)]
        public System.Guid elementID;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 4)]
        public string aliasName1;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 5)]
        public string aliasName2;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 6)]
        public string description;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 7)]
        public bool isInMaintenance;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 8)]
        public bool IsProjected;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 9)]
        public string zoneGuid;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 10)]
        public string subAreaGuid;

        public GetElementDataByNameandTypeRequest()
        {
        }

        public GetElementDataByNameandTypeRequest(NCC.ExternalProject project, string elementName, string elementTypeName, System.Guid elementID, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool IsProjected, string zoneGuid, string subAreaGuid)
        {
            this.project = project;
            this.elementName = elementName;
            this.elementTypeName = elementTypeName;
            this.elementID = elementID;
            this.aliasName1 = aliasName1;
            this.aliasName2 = aliasName2;
            this.description = description;
            this.isInMaintenance = isInMaintenance;
            this.IsProjected = IsProjected;
            this.zoneGuid = zoneGuid;
            this.subAreaGuid = subAreaGuid;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "GetElementDataByNameandTypeResponse", WrapperNamespace = "http://www.neplan.ch/Web/External", IsWrapped = true)]
    public partial class GetElementDataByNameandTypeResponse
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 0)]
        public System.Guid elementID;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 1)]
        public string aliasName1;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 2)]
        public string aliasName2;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 3)]
        public string description;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 4)]
        public bool isInMaintenance;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 5)]
        public bool IsProjected;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 6)]
        public string zoneGuid;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 7)]
        public string subAreaGuid;

        public GetElementDataByNameandTypeResponse()
        {
        }

        public GetElementDataByNameandTypeResponse(System.Guid elementID, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool IsProjected, string zoneGuid, string subAreaGuid)
        {
            this.elementID = elementID;
            this.aliasName1 = aliasName1;
            this.aliasName2 = aliasName2;
            this.description = description;
            this.isInMaintenance = isInMaintenance;
            this.IsProjected = IsProjected;
            this.zoneGuid = zoneGuid;
            this.subAreaGuid = subAreaGuid;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "GetElementDataByName", WrapperNamespace = "http://www.neplan.ch/Web/External", IsWrapped = true)]
    public partial class GetElementDataByNameRequest
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 0)]
        public NCC.ExternalProject project;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 1)]
        public string elementName;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 2)]
        public string elementTypeName;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 3)]
        public System.Guid elementID;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 4)]
        public string aliasName1;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 5)]
        public string aliasName2;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 6)]
        public string description;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 7)]
        public bool isInMaintenance;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 8)]
        public bool IsProjected;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 9)]
        public string zoneGuid;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 10)]
        public string subAreaGuid;

        public GetElementDataByNameRequest()
        {
        }

        public GetElementDataByNameRequest(NCC.ExternalProject project, string elementName, string elementTypeName, System.Guid elementID, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool IsProjected, string zoneGuid, string subAreaGuid)
        {
            this.project = project;
            this.elementName = elementName;
            this.elementTypeName = elementTypeName;
            this.elementID = elementID;
            this.aliasName1 = aliasName1;
            this.aliasName2 = aliasName2;
            this.description = description;
            this.isInMaintenance = isInMaintenance;
            this.IsProjected = IsProjected;
            this.zoneGuid = zoneGuid;
            this.subAreaGuid = subAreaGuid;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "GetElementDataByNameResponse", WrapperNamespace = "http://www.neplan.ch/Web/External", IsWrapped = true)]
    public partial class GetElementDataByNameResponse
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 0)]
        public string elementName;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 1)]
        public string elementTypeName;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 2)]
        public System.Guid elementID;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 3)]
        public string aliasName1;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 4)]
        public string aliasName2;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 5)]
        public string description;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 6)]
        public bool isInMaintenance;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 7)]
        public bool IsProjected;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 8)]
        public string zoneGuid;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 9)]
        public string subAreaGuid;

        public GetElementDataByNameResponse()
        {
        }

        public GetElementDataByNameResponse(string elementName, string elementTypeName, System.Guid elementID, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool IsProjected, string zoneGuid, string subAreaGuid)
        {
            this.elementName = elementName;
            this.elementTypeName = elementTypeName;
            this.elementID = elementID;
            this.aliasName1 = aliasName1;
            this.aliasName2 = aliasName2;
            this.description = description;
            this.isInMaintenance = isInMaintenance;
            this.IsProjected = IsProjected;
            this.zoneGuid = zoneGuid;
            this.subAreaGuid = subAreaGuid;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "GetElementDataByIDandType", WrapperNamespace = "http://www.neplan.ch/Web/External", IsWrapped = true)]
    public partial class GetElementDataByIDandTypeRequest
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 0)]
        public NCC.ExternalProject project;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 1)]
        public System.Guid elementID;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 2)]
        public string elementTypeName;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 3)]
        public string elementName;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 4)]
        public string aliasName1;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 5)]
        public string aliasName2;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 6)]
        public string description;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 7)]
        public bool isInMaintenance;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 8)]
        public bool IsProjected;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 9)]
        public string zoneGuid;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 10)]
        public string subAreaGuid;

        public GetElementDataByIDandTypeRequest()
        {
        }

        public GetElementDataByIDandTypeRequest(NCC.ExternalProject project, System.Guid elementID, string elementTypeName, string elementName, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool IsProjected, string zoneGuid, string subAreaGuid)
        {
            this.project = project;
            this.elementID = elementID;
            this.elementTypeName = elementTypeName;
            this.elementName = elementName;
            this.aliasName1 = aliasName1;
            this.aliasName2 = aliasName2;
            this.description = description;
            this.isInMaintenance = isInMaintenance;
            this.IsProjected = IsProjected;
            this.zoneGuid = zoneGuid;
            this.subAreaGuid = subAreaGuid;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "GetElementDataByIDandTypeResponse", WrapperNamespace = "http://www.neplan.ch/Web/External", IsWrapped = true)]
    public partial class GetElementDataByIDandTypeResponse
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 0)]
        public string elementName;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 1)]
        public string aliasName1;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 2)]
        public string aliasName2;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 3)]
        public string description;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 4)]
        public bool isInMaintenance;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 5)]
        public bool IsProjected;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 6)]
        public string zoneGuid;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 7)]
        public string subAreaGuid;

        public GetElementDataByIDandTypeResponse()
        {
        }

        public GetElementDataByIDandTypeResponse(string elementName, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool IsProjected, string zoneGuid, string subAreaGuid)
        {
            this.elementName = elementName;
            this.aliasName1 = aliasName1;
            this.aliasName2 = aliasName2;
            this.description = description;
            this.isInMaintenance = isInMaintenance;
            this.IsProjected = IsProjected;
            this.zoneGuid = zoneGuid;
            this.subAreaGuid = subAreaGuid;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "GetElementAttributeByID", WrapperNamespace = "http://www.neplan.ch/Web/External", IsWrapped = true)]
    public partial class GetElementAttributeByIDRequest
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 0)]
        public string projectName;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 1)]
        public string elementID;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 2)]
        public string attributeName;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 3)]
        public string attributeValue;

        public GetElementAttributeByIDRequest()
        {
        }

        public GetElementAttributeByIDRequest(string projectName, string elementID, string attributeName, string attributeValue)
        {
            this.projectName = projectName;
            this.elementID = elementID;
            this.attributeName = attributeName;
            this.attributeValue = attributeValue;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "GetElementAttributeByIDResponse", WrapperNamespace = "http://www.neplan.ch/Web/External", IsWrapped = true)]
    public partial class GetElementAttributeByIDResponse
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 0)]
        public bool GetElementAttributeByIDResult;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 1)]
        public string attributeValue;

        public GetElementAttributeByIDResponse()
        {
        }

        public GetElementAttributeByIDResponse(bool GetElementAttributeByIDResult, string attributeValue)
        {
            this.GetElementAttributeByIDResult = GetElementAttributeByIDResult;
            this.attributeValue = attributeValue;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "GetElementAttributeByName", WrapperNamespace = "http://www.neplan.ch/Web/External", IsWrapped = true)]
    public partial class GetElementAttributeByNameRequest
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 0)]
        public string projectName;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 1)]
        public string elementName;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 2)]
        public string elementType;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 3)]
        public string attributeName;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 4)]
        public string attributeValue;

        public GetElementAttributeByNameRequest()
        {
        }

        public GetElementAttributeByNameRequest(string projectName, string elementName, string elementType, string attributeName, string attributeValue)
        {
            this.projectName = projectName;
            this.elementName = elementName;
            this.elementType = elementType;
            this.attributeName = attributeName;
            this.attributeValue = attributeValue;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "GetElementAttributeByNameResponse", WrapperNamespace = "http://www.neplan.ch/Web/External", IsWrapped = true)]
    public partial class GetElementAttributeByNameResponse
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 0)]
        public bool GetElementAttributeByNameResult;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 1)]
        public string attributeValue;

        public GetElementAttributeByNameResponse()
        {
        }

        public GetElementAttributeByNameResponse(bool GetElementAttributeByNameResult, string attributeValue)
        {
            this.GetElementAttributeByNameResult = GetElementAttributeByNameResult;
            this.attributeValue = attributeValue;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "SetDefaultValues", WrapperNamespace = "http://www.neplan.ch/Web/External", IsWrapped = true)]
    public partial class SetDefaultValuesRequest
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 0)]
        public NCC.ExternalProject project;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 1)]
        public short defaultType;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 2)]
        public short phaseDomination;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 3)]
        public bool isAnsi;

        public SetDefaultValuesRequest()
        {
        }

        public SetDefaultValuesRequest(NCC.ExternalProject project, short defaultType, short phaseDomination, bool isAnsi)
        {
            this.project = project;
            this.defaultType = defaultType;
            this.phaseDomination = phaseDomination;
            this.isAnsi = isAnsi;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "SetDefaultValuesResponse", WrapperNamespace = "http://www.neplan.ch/Web/External", IsWrapped = true)]
    public partial class SetDefaultValuesResponse
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 0)]
        public bool SetDefaultValuesResult;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 1)]
        public NCC.ExternalProject project;

        public SetDefaultValuesResponse()
        {
        }

        public SetDefaultValuesResponse(bool SetDefaultValuesResult, NCC.ExternalProject project)
        {
            this.SetDefaultValuesResult = SetDefaultValuesResult;
            this.project = project;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "AddNodesFromList", WrapperNamespace = "http://www.neplan.ch/Web/External", IsWrapped = true)]
    public partial class AddNodesFromListRequest
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 0)]
        public NCC.ExternalProject project;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 1)]
        public ImportElementItem[] listElements;

        public AddNodesFromListRequest()
        {
        }

        public AddNodesFromListRequest(NCC.ExternalProject project, ImportElementItem[] listElements)
        {
            this.project = project;
            this.listElements = listElements;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "AddNodesFromListResponse", WrapperNamespace = "http://www.neplan.ch/Web/External", IsWrapped = true)]
    public partial class AddNodesFromListResponse
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 0)]
        public bool AddNodesFromListResult;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 1)]
        public NCC.ExternalProject project;

        public AddNodesFromListResponse()
        {
        }

        public AddNodesFromListResponse(bool AddNodesFromListResult, NCC.ExternalProject project)
        {
            this.AddNodesFromListResult = AddNodesFromListResult;
            this.project = project;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "AddElementsFromList", WrapperNamespace = "http://www.neplan.ch/Web/External", IsWrapped = true)]
    public partial class AddElementsFromListRequest
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 0)]
        public NCC.ExternalProject project;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 1)]
        public ImportElementItem[] listElements;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 2)]
        public string elementTypeName;

        public AddElementsFromListRequest()
        {
        }

        public AddElementsFromListRequest(NCC.ExternalProject project, ImportElementItem[] listElements, string elementTypeName)
        {
            this.project = project;
            this.listElements = listElements;
            this.elementTypeName = elementTypeName;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "AddElementsFromListResponse", WrapperNamespace = "http://www.neplan.ch/Web/External", IsWrapped = true)]
    public partial class AddElementsFromListResponse
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 0)]
        public bool AddElementsFromListResult;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 1)]
        public NCC.ExternalProject project;

        public AddElementsFromListResponse()
        {
        }

        public AddElementsFromListResponse(bool AddElementsFromListResult, NCC.ExternalProject project)
        {
            this.AddElementsFromListResult = AddElementsFromListResult;
            this.project = project;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "AddSubLoadsFromList", WrapperNamespace = "http://www.neplan.ch/Web/External", IsWrapped = true)]
    public partial class AddSubLoadsFromListRequest
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 0)]
        public NCC.ExternalProject project;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 1)]
        public NCC.LoadData[] listLoadData;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 2)]
        public string loadID;

        public AddSubLoadsFromListRequest()
        {
        }

        public AddSubLoadsFromListRequest(NCC.ExternalProject project, NCC.LoadData[] listLoadData, string loadID)
        {
            this.project = project;
            this.listLoadData = listLoadData;
            this.loadID = loadID;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "AddSubLoadsFromListResponse", WrapperNamespace = "http://www.neplan.ch/Web/External", IsWrapped = true)]
    public partial class AddSubLoadsFromListResponse
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 0)]
        public bool AddSubLoadsFromListResult;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 1)]
        public NCC.ExternalProject project;

        public AddSubLoadsFromListResponse()
        {
        }

        public AddSubLoadsFromListResponse(bool AddSubLoadsFromListResult, NCC.ExternalProject project)
        {
            this.AddSubLoadsFromListResult = AddSubLoadsFromListResult;
            this.project = project;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "ImportFromListFileAndDoLoadAllocation", WrapperNamespace = "http://www.neplan.ch/Web/External", IsWrapped = true)]
    public partial class ImportFromListFileAndDoLoadAllocationRequest
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 0)]
        public string uploadName;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 1)]
        public string projectName;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 2)]
        public NCC.AnalysisParameterSettings settings;

        public ImportFromListFileAndDoLoadAllocationRequest()
        {
        }

        public ImportFromListFileAndDoLoadAllocationRequest(string uploadName, string projectName, NCC.AnalysisParameterSettings settings)
        {
            this.uploadName = uploadName;
            this.projectName = projectName;
            this.settings = settings;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "ImportFromListFileAndDoLoadAllocationResponse", WrapperNamespace = "http://www.neplan.ch/Web/External", IsWrapped = true)]
    public partial class ImportFromListFileAndDoLoadAllocationResponse
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 0)]
        public NCC.ExternalProject ImportFromListFileAndDoLoadAllocationResult;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 1)]
        public NCC.AnalysisReturnInfo analysisReturnInfo;

        public ImportFromListFileAndDoLoadAllocationResponse()
        {
        }

        public ImportFromListFileAndDoLoadAllocationResponse(NCC.ExternalProject ImportFromListFileAndDoLoadAllocationResult, NCC.AnalysisReturnInfo analysisReturnInfo)
        {
            this.ImportFromListFileAndDoLoadAllocationResult = ImportFromListFileAndDoLoadAllocationResult;
            this.analysisReturnInfo = analysisReturnInfo;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "Find_Voltage_Level_of_One_Port_Element", WrapperNamespace = "http://www.neplan.ch/Web/External", IsWrapped = true)]
    public partial class Find_Voltage_Level_of_One_Port_ElementRequest
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 0)]
        public string projectName;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 1)]
        public string elementName;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 2)]
        public double Voltage;

        public Find_Voltage_Level_of_One_Port_ElementRequest()
        {
        }

        public Find_Voltage_Level_of_One_Port_ElementRequest(string projectName, string elementName, double Voltage)
        {
            this.projectName = projectName;
            this.elementName = elementName;
            this.Voltage = Voltage;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "Find_Voltage_Level_of_One_Port_ElementResponse", WrapperNamespace = "http://www.neplan.ch/Web/External", IsWrapped = true)]
    public partial class Find_Voltage_Level_of_One_Port_ElementResponse
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 0)]
        public bool Find_Voltage_Level_of_One_Port_ElementResult;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 1)]
        public double Voltage;

        public Find_Voltage_Level_of_One_Port_ElementResponse()
        {
        }

        public Find_Voltage_Level_of_One_Port_ElementResponse(bool Find_Voltage_Level_of_One_Port_ElementResult, double Voltage)
        {
            this.Find_Voltage_Level_of_One_Port_ElementResult = Find_Voltage_Level_of_One_Port_ElementResult;
            this.Voltage = Voltage;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "GetBusBarOf1PortElementByID", WrapperNamespace = "http://www.neplan.ch/Web/External", IsWrapped = true)]
    public partial class GetBusBarOf1PortElementByIDRequest
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 0)]
        public string projectName;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 1)]
        public System.Nullable<System.Guid> elemGuid;

        public GetBusBarOf1PortElementByIDRequest()
        {
        }

        public GetBusBarOf1PortElementByIDRequest(string projectName, System.Nullable<System.Guid> elemGuid)
        {
            this.projectName = projectName;
            this.elemGuid = elemGuid;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "GetBusBarOf1PortElementByIDResponse", WrapperNamespace = "http://www.neplan.ch/Web/External", IsWrapped = true)]
    public partial class GetBusBarOf1PortElementByIDResponse
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 0)]
        public bool GetBusBarOf1PortElementByIDResult;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 1)]
        public string busbarName;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 2)]
        public System.Nullable<System.Guid> busbarGuid;

        public GetBusBarOf1PortElementByIDResponse()
        {
        }

        public GetBusBarOf1PortElementByIDResponse(bool GetBusBarOf1PortElementByIDResult, string busbarName, System.Nullable<System.Guid> busbarGuid)
        {
            this.GetBusBarOf1PortElementByIDResult = GetBusBarOf1PortElementByIDResult;
            this.busbarName = busbarName;
            this.busbarGuid = busbarGuid;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "GetBusBarOf1PortElementByName", WrapperNamespace = "http://www.neplan.ch/Web/External", IsWrapped = true)]
    public partial class GetBusBarOf1PortElementByNameRequest
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 0)]
        public string projectName;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 1)]
        public string elemName;

        public GetBusBarOf1PortElementByNameRequest()
        {
        }

        public GetBusBarOf1PortElementByNameRequest(string projectName, string elemName)
        {
            this.projectName = projectName;
            this.elemName = elemName;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "GetBusBarOf1PortElementByNameResponse", WrapperNamespace = "http://www.neplan.ch/Web/External", IsWrapped = true)]
    public partial class GetBusBarOf1PortElementByNameResponse
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 0)]
        public bool GetBusBarOf1PortElementByNameResult;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 1)]
        public string busbarName;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.neplan.ch/Web/External", Order = 2)]
        public System.Nullable<System.Guid> busbarGuid;

        public GetBusBarOf1PortElementByNameResponse()
        {
        }

        public GetBusBarOf1PortElementByNameResponse(bool GetBusBarOf1PortElementByNameResult, string busbarName, System.Nullable<System.Guid> busbarGuid)
        {
            this.GetBusBarOf1PortElementByNameResult = GetBusBarOf1PortElementByNameResult;
            this.busbarName = busbarName;
            this.busbarGuid = busbarGuid;
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface NeplanServiceChannel : NeplanService, System.ServiceModel.IClientChannel
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NeplanServiceClient : System.ServiceModel.ClientBase<NeplanService>, NeplanService
    {

        public NeplanServiceClient()
        {
        }

        public NeplanServiceClient(string endpointConfigurationName) :
                base(endpointConfigurationName)
        {
        }

        public NeplanServiceClient(string endpointConfigurationName, string remoteAddress) :
                base(endpointConfigurationName, remoteAddress)
        {
        }

        public NeplanServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
                base(endpointConfigurationName, remoteAddress)
        {
        }

        public NeplanServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
                base(binding, remoteAddress)
        {
        }

        public NCC.ExternalProject CreateProject(string projectName, string variantName, string diagram, string layerName, string mediumType, int srid, string copySettingsFromProjectName)
        {
            return base.Channel.CreateProject(projectName, variantName, diagram, layerName, mediumType, srid, copySettingsFromProjectName);
        }

        public System.Threading.Tasks.Task<NCC.ExternalProject> CreateProjectAsync(string projectName, string variantName, string diagram, string layerName, string mediumType, int srid, string copySettingsFromProjectName)
        {
            return base.Channel.CreateProjectAsync(projectName, variantName, diagram, layerName, mediumType, srid, copySettingsFromProjectName);
        }

        public NCC.ExternalProject GetProject(string projectName, string variantName, string diagramName, string layerName)
        {
            return base.Channel.GetProject(projectName, variantName, diagramName, layerName);
        }

        public System.Threading.Tasks.Task<NCC.ExternalProject> GetProjectAsync(string projectName, string variantName, string diagramName, string layerName)
        {
            return base.Channel.GetProjectAsync(projectName, variantName, diagramName, layerName);
        }

        public string GetLogOnUrlWithProject(NCC.ExternalProject project)
        {
            return base.Channel.GetLogOnUrlWithProject(project);
        }

        public System.Threading.Tasks.Task<string> GetLogOnUrlWithProjectAsync(NCC.ExternalProject project)
        {
            return base.Channel.GetLogOnUrlWithProjectAsync(project);
        }

        public string GetLogOnUrl()
        {
            return base.Channel.GetLogOnUrl();
        }

        public System.Threading.Tasks.Task<string> GetLogOnUrlAsync()
        {
            return base.Channel.GetLogOnUrlAsync();
        }

        public string GetLogOnSessionID(NCC.ExternalProject project)
        {
            return base.Channel.GetLogOnSessionID(project);
        }

        public System.Threading.Tasks.Task<string> GetLogOnSessionIDAsync(NCC.ExternalProject project)
        {
            return base.Channel.GetLogOnSessionIDAsync(project);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        InsertNodeResponse NeplanService.InsertNode(InsertNodeRequest request)
        {
            return base.Channel.InsertNode(request);
        }

        public string InsertNode(ref NCC.ExternalProject project, string name, double un, double fn, string libraryType, string xmlData, double x, double y, string symbolName)
        {
            InsertNodeRequest inValue = new InsertNodeRequest();
            inValue.project = project;
            inValue.name = name;
            inValue.un = un;
            inValue.fn = fn;
            inValue.libraryType = libraryType;
            inValue.xmlData = xmlData;
            inValue.x = x;
            inValue.y = y;
            inValue.symbolName = symbolName;
            InsertNodeResponse retVal = ((NeplanService)(this)).InsertNode(inValue);
            project = retVal.project;
            return retVal.InsertNodeResult;
        }

        public System.Threading.Tasks.Task<InsertNodeResponse> InsertNodeAsync(InsertNodeRequest request)
        {
            return base.Channel.InsertNodeAsync(request);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        InsertNodeWithoutGraphicResponse NeplanService.InsertNodeWithoutGraphic(InsertNodeWithoutGraphicRequest request)
        {
            return base.Channel.InsertNodeWithoutGraphic(request);
        }

        public string InsertNodeWithoutGraphic(ref NCC.ExternalProject project, string name, double un, double fn, string libraryType, string xmlData)
        {
            InsertNodeWithoutGraphicRequest inValue = new InsertNodeWithoutGraphicRequest();
            inValue.project = project;
            inValue.name = name;
            inValue.un = un;
            inValue.fn = fn;
            inValue.libraryType = libraryType;
            inValue.xmlData = xmlData;
            InsertNodeWithoutGraphicResponse retVal = ((NeplanService)(this)).InsertNodeWithoutGraphic(inValue);
            project = retVal.project;
            return retVal.InsertNodeWithoutGraphicResult;
        }

        public System.Threading.Tasks.Task<InsertNodeWithoutGraphicResponse> InsertNodeWithoutGraphicAsync(InsertNodeWithoutGraphicRequest request)
        {
            return base.Channel.InsertNodeWithoutGraphicAsync(request);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        InsertBusbarResponse NeplanService.InsertBusbar(InsertBusbarRequest request)
        {
            return base.Channel.InsertBusbar(request);
        }

        public string InsertBusbar(ref NCC.ExternalProject project, string name, double un, double fn, string libraryType, string xmlData, double[] coordinates)
        {
            InsertBusbarRequest inValue = new InsertBusbarRequest();
            inValue.project = project;
            inValue.name = name;
            inValue.un = un;
            inValue.fn = fn;
            inValue.libraryType = libraryType;
            inValue.xmlData = xmlData;
            inValue.coordinates = coordinates;
            InsertBusbarResponse retVal = ((NeplanService)(this)).InsertBusbar(inValue);
            project = retVal.project;
            return retVal.InsertBusbarResult;
        }

        public System.Threading.Tasks.Task<InsertBusbarResponse> InsertBusbarAsync(InsertBusbarRequest request)
        {
            return base.Channel.InsertBusbarAsync(request);
        }

        public string InsertLine(NCC.ExternalProject project, string name, string fromNode, string toNode, double length, string libraryType, string xmlData, double[] coordinates)
        {
            return base.Channel.InsertLine(project, name, fromNode, toNode, length, libraryType, xmlData, coordinates);
        }

        public System.Threading.Tasks.Task<string> InsertLineAsync(NCC.ExternalProject project, string name, string fromNode, string toNode, double length, string libraryType, string xmlData, double[] coordinates)
        {
            return base.Channel.InsertLineAsync(project, name, fromNode, toNode, length, libraryType, xmlData, coordinates);
        }

        public string InsertLineByNodeID(NCC.ExternalProject project, string name, string fromNodeID, string toNodeID, double length, string libraryType, string xmlData, double[] coordinates)
        {
            return base.Channel.InsertLineByNodeID(project, name, fromNodeID, toNodeID, length, libraryType, xmlData, coordinates);
        }

        public System.Threading.Tasks.Task<string> InsertLineByNodeIDAsync(NCC.ExternalProject project, string name, string fromNodeID, string toNodeID, double length, string libraryType, string xmlData, double[] coordinates)
        {
            return base.Channel.InsertLineByNodeIDAsync(project, name, fromNodeID, toNodeID, length, libraryType, xmlData, coordinates);
        }

        public string InsertLineAsym(NCC.ExternalProject project, string name, string fromNode, string toNode, double length, short phase, string libraryType, string xmlData, double[] coordinates)
        {
            return base.Channel.InsertLineAsym(project, name, fromNode, toNode, length, phase, libraryType, xmlData, coordinates);
        }

        public System.Threading.Tasks.Task<string> InsertLineAsymAsync(NCC.ExternalProject project, string name, string fromNode, string toNode, double length, short phase, string libraryType, string xmlData, double[] coordinates)
        {
            return base.Channel.InsertLineAsymAsync(project, name, fromNode, toNode, length, phase, libraryType, xmlData, coordinates);
        }

        public string Insert2PortElement(NCC.ExternalProject project, string name, string fromNode, string toNode, string elementTypeName, string libraryType, string xmlData, int phase, double[] coordinatesLink1, double[] coordinatesLink2, string symbolName, double symbolAngle)
        {
            return base.Channel.Insert2PortElement(project, name, fromNode, toNode, elementTypeName, libraryType, xmlData, phase, coordinatesLink1, coordinatesLink2, symbolName, symbolAngle);
        }

        public System.Threading.Tasks.Task<string> Insert2PortElementAsync(NCC.ExternalProject project, string name, string fromNode, string toNode, string elementTypeName, string libraryType, string xmlData, int phase, double[] coordinatesLink1, double[] coordinatesLink2, string symbolName, double symbolAngle)
        {
            return base.Channel.Insert2PortElementAsync(project, name, fromNode, toNode, elementTypeName, libraryType, xmlData, phase, coordinatesLink1, coordinatesLink2, symbolName, symbolAngle);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Insert1PortElementResponse NeplanService.Insert1PortElement(Insert1PortElementRequest request)
        {
            return base.Channel.Insert1PortElement(request);
        }

        public string Insert1PortElement(ref NCC.ExternalProject project, string name, string fromNode, string elementTypeName, string libraryType, string xmlData, int phase, double[] coordinatesLink, string symbolName, double symbolAngle)
        {
            Insert1PortElementRequest inValue = new Insert1PortElementRequest();
            inValue.project = project;
            inValue.name = name;
            inValue.fromNode = fromNode;
            inValue.elementTypeName = elementTypeName;
            inValue.libraryType = libraryType;
            inValue.xmlData = xmlData;
            inValue.phase = phase;
            inValue.coordinatesLink = coordinatesLink;
            inValue.symbolName = symbolName;
            inValue.symbolAngle = symbolAngle;
            Insert1PortElementResponse retVal = ((NeplanService)(this)).Insert1PortElement(inValue);
            project = retVal.project;
            return retVal.Insert1PortElementResult;
        }

        public System.Threading.Tasks.Task<Insert1PortElementResponse> Insert1PortElementAsync(Insert1PortElementRequest request)
        {
            return base.Channel.Insert1PortElementAsync(request);
        }

        public string InsertProtectionElement(NCC.ExternalProject project, string name, string onElementID, short atPort, string elementTypeName, string libraryType, string xmlData, int phase, string symbolName)
        {
            return base.Channel.InsertProtectionElement(project, name, onElementID, atPort, elementTypeName, libraryType, xmlData, phase, symbolName);
        }

        public System.Threading.Tasks.Task<string> InsertProtectionElementAsync(NCC.ExternalProject project, string name, string onElementID, short atPort, string elementTypeName, string libraryType, string xmlData, int phase, string symbolName)
        {
            return base.Channel.InsertProtectionElementAsync(project, name, onElementID, atPort, elementTypeName, libraryType, xmlData, phase, symbolName);
        }

        public string InsertFeeder(NCC.ExternalProject project, string feederName, string nodeName, string elementName)
        {
            return base.Channel.InsertFeeder(project, feederName, nodeName, elementName);
        }

        public System.Threading.Tasks.Task<string> InsertFeederAsync(NCC.ExternalProject project, string feederName, string nodeName, string elementName)
        {
            return base.Channel.InsertFeederAsync(project, feederName, nodeName, elementName);
        }

        public string InsertArea(NCC.ExternalProject project, string areaName, string firstSubArea, string colorStringArea, string colorStringSubArea)
        {
            return base.Channel.InsertArea(project, areaName, firstSubArea, colorStringArea, colorStringSubArea);
        }

        public System.Threading.Tasks.Task<string> InsertAreaAsync(NCC.ExternalProject project, string areaName, string firstSubArea, string colorStringArea, string colorStringSubArea)
        {
            return base.Channel.InsertAreaAsync(project, areaName, firstSubArea, colorStringArea, colorStringSubArea);
        }

        public string InsertZone(NCC.ExternalProject project, string name, string colorString)
        {
            return base.Channel.InsertZone(project, name, colorString);
        }

        public System.Threading.Tasks.Task<string> InsertZoneAsync(NCC.ExternalProject project, string name, string colorString)
        {
            return base.Channel.InsertZoneAsync(project, name, colorString);
        }

        public string InsertMeasurement(NCC.ExternalProject project, string measurementDefinitionName, string elementName, short portNr, System.DateTime dateTime, int inputDataDefinition, double[] measuremens, short nameAliasName1AliasName2)
        {
            return base.Channel.InsertMeasurement(project, measurementDefinitionName, elementName, portNr, dateTime, inputDataDefinition, measuremens, nameAliasName1AliasName2);
        }

        public System.Threading.Tasks.Task<string> InsertMeasurementAsync(NCC.ExternalProject project, string measurementDefinitionName, string elementName, short portNr, System.DateTime dateTime, int inputDataDefinition, double[] measuremens, short nameAliasName1AliasName2)
        {
            return base.Channel.InsertMeasurementAsync(project, measurementDefinitionName, elementName, portNr, dateTime, inputDataDefinition, measuremens, nameAliasName1AliasName2);
        }

        public string InsertMeasurementByElementID(string elementID, string measurementDefinitionName, short portNr, System.DateTime dateTime, int inputDataDefinition, double[] measurements)
        {
            return base.Channel.InsertMeasurementByElementID(elementID, measurementDefinitionName, portNr, dateTime, inputDataDefinition, measurements);
        }

        public System.Threading.Tasks.Task<string> InsertMeasurementByElementIDAsync(string elementID, string measurementDefinitionName, short portNr, System.DateTime dateTime, int inputDataDefinition, double[] measurements)
        {
            return base.Channel.InsertMeasurementByElementIDAsync(elementID, measurementDefinitionName, portNr, dateTime, inputDataDefinition, measurements);
        }

        public string InsertDiagram(NCC.ExternalProject project, string diagramName, string firstGraphicLayerName)
        {
            return base.Channel.InsertDiagram(project, diagramName, firstGraphicLayerName);
        }

        public System.Threading.Tasks.Task<string> InsertDiagramAsync(NCC.ExternalProject project, string diagramName, string firstGraphicLayerName)
        {
            return base.Channel.InsertDiagramAsync(project, diagramName, firstGraphicLayerName);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        InsertGraphicLayerResponse NeplanService.InsertGraphicLayer(InsertGraphicLayerRequest request)
        {
            return base.Channel.InsertGraphicLayer(request);
        }

        public string InsertGraphicLayer(ref NCC.ExternalProject project, string diagramID, string graphicLayerName)
        {
            InsertGraphicLayerRequest inValue = new InsertGraphicLayerRequest();
            inValue.project = project;
            inValue.diagramID = diagramID;
            inValue.graphicLayerName = graphicLayerName;
            InsertGraphicLayerResponse retVal = ((NeplanService)(this)).InsertGraphicLayer(inValue);
            project = retVal.project;
            return retVal.InsertGraphicLayerResult;
        }

        public System.Threading.Tasks.Task<InsertGraphicLayerResponse> InsertGraphicLayerAsync(InsertGraphicLayerRequest request)
        {
            return base.Channel.InsertGraphicLayerAsync(request);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        GetAllElementsOfProjectResponse NeplanService.GetAllElementsOfProject(GetAllElementsOfProjectRequest request)
        {
            return base.Channel.GetAllElementsOfProject(request);
        }

        public bool GetAllElementsOfProject(NCC.ExternalProject project, ref System.Collections.Generic.Dictionary<string, string> elementNames, ref System.Collections.Generic.Dictionary<string, string> elementTypes)
        {
            GetAllElementsOfProjectRequest inValue = new GetAllElementsOfProjectRequest();
            inValue.project = project;
            inValue.elementNames = elementNames;
            inValue.elementTypes = elementTypes;
            GetAllElementsOfProjectResponse retVal = ((NeplanService)(this)).GetAllElementsOfProject(inValue);
            elementNames = retVal.elementNames;
            elementTypes = retVal.elementTypes;
            return retVal.GetAllElementsOfProjectResult;
        }

        public System.Threading.Tasks.Task<GetAllElementsOfProjectResponse> GetAllElementsOfProjectAsync(GetAllElementsOfProjectRequest request)
        {
            return base.Channel.GetAllElementsOfProjectAsync(request);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        GetAllElementsOfElementTypeResponse NeplanService.GetAllElementsOfElementType(GetAllElementsOfElementTypeRequest request)
        {
            return base.Channel.GetAllElementsOfElementType(request);
        }

        public bool GetAllElementsOfElementType(NCC.ExternalProject project, string elementType, ref System.Collections.Generic.Dictionary<string, string> elementNames, ref System.Collections.Generic.Dictionary<string, string> elementTypes)
        {
            GetAllElementsOfElementTypeRequest inValue = new GetAllElementsOfElementTypeRequest();
            inValue.project = project;
            inValue.elementType = elementType;
            inValue.elementNames = elementNames;
            inValue.elementTypes = elementTypes;
            GetAllElementsOfElementTypeResponse retVal = ((NeplanService)(this)).GetAllElementsOfElementType(inValue);
            elementNames = retVal.elementNames;
            elementTypes = retVal.elementTypes;
            return retVal.GetAllElementsOfElementTypeResult;
        }

        public System.Threading.Tasks.Task<GetAllElementsOfElementTypeResponse> GetAllElementsOfElementTypeAsync(GetAllElementsOfElementTypeRequest request)
        {
            return base.Channel.GetAllElementsOfElementTypeAsync(request);
        }

        public bool AddSubLoad(NCC.ExternalProject project, string loadID, NCC.LoadData loadData)
        {
            return base.Channel.AddSubLoad(project, loadID, loadData);
        }

        public System.Threading.Tasks.Task<bool> AddSubLoadAsync(NCC.ExternalProject project, string loadID, NCC.LoadData loadData)
        {
            return base.Channel.AddSubLoadAsync(project, loadID, loadData);
        }

        public bool AssignPowerTo1Port(NCC.ExternalProject project, string name, string elementTypeName, short powerType, double value1, double value2)
        {
            return base.Channel.AssignPowerTo1Port(project, name, elementTypeName, powerType, value1, value2);
        }

        public System.Threading.Tasks.Task<bool> AssignPowerTo1PortAsync(NCC.ExternalProject project, string name, string elementTypeName, short powerType, double value1, double value2)
        {
            return base.Channel.AssignPowerTo1PortAsync(project, name, elementTypeName, powerType, value1, value2);
        }

        public bool AssignPowerTo1PortByID(NCC.ExternalProject project, string elementID, short powerType, double value1, double value2)
        {
            return base.Channel.AssignPowerTo1PortByID(project, elementID, powerType, value1, value2);
        }

        public System.Threading.Tasks.Task<bool> AssignPowerTo1PortByIDAsync(NCC.ExternalProject project, string elementID, short powerType, double value1, double value2)
        {
            return base.Channel.AssignPowerTo1PortByIDAsync(project, elementID, powerType, value1, value2);
        }

        public void SwitchElementAtPortByID(string elementID, short portNr, bool isConnected)
        {
            base.Channel.SwitchElementAtPortByID(elementID, portNr, isConnected);
        }

        public System.Threading.Tasks.Task SwitchElementAtPortByIDAsync(string elementID, short portNr, bool isConnected)
        {
            return base.Channel.SwitchElementAtPortByIDAsync(elementID, portNr, isConnected);
        }

        public void SwitchElementAtPort(NCC.ExternalProject project, string elementName, string elementTypeName, short portNr, bool isConnected)
        {
            base.Channel.SwitchElementAtPort(project, elementName, elementTypeName, portNr, isConnected);
        }

        public System.Threading.Tasks.Task SwitchElementAtPortAsync(NCC.ExternalProject project, string elementName, string elementTypeName, short portNr, bool isConnected)
        {
            return base.Channel.SwitchElementAtPortAsync(project, elementName, elementTypeName, portNr, isConnected);
        }

        public void SetElementData(NCC.ExternalProject project, string elementName, string elementTypeName, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool IsProjected, string zoneGuid, string subAreaGuid)
        {
            base.Channel.SetElementData(project, elementName, elementTypeName, aliasName1, aliasName2, description, isInMaintenance, IsProjected, zoneGuid, subAreaGuid);
        }

        public System.Threading.Tasks.Task SetElementDataAsync(NCC.ExternalProject project, string elementName, string elementTypeName, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool IsProjected, string zoneGuid, string subAreaGuid)
        {
            return base.Channel.SetElementDataAsync(project, elementName, elementTypeName, aliasName1, aliasName2, description, isInMaintenance, IsProjected, zoneGuid, subAreaGuid);
        }

        public void SetElementDataByID(string elementID, string elementTypeName, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool IsProjected, string zoneGuid, string subAreaGuid)
        {
            base.Channel.SetElementDataByID(elementID, elementTypeName, aliasName1, aliasName2, description, isInMaintenance, IsProjected, zoneGuid, subAreaGuid);
        }

        public System.Threading.Tasks.Task SetElementDataByIDAsync(string elementID, string elementTypeName, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool IsProjected, string zoneGuid, string subAreaGuid)
        {
            return base.Channel.SetElementDataByIDAsync(elementID, elementTypeName, aliasName1, aliasName2, description, isInMaintenance, IsProjected, zoneGuid, subAreaGuid);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        GetElementDataByNameandTypeResponse NeplanService.GetElementDataByNameandType(GetElementDataByNameandTypeRequest request)
        {
            return base.Channel.GetElementDataByNameandType(request);
        }

        public void GetElementDataByNameandType(NCC.ExternalProject project, string elementName, string elementTypeName, ref System.Guid elementID, ref string aliasName1, ref string aliasName2, ref string description, ref bool isInMaintenance, ref bool IsProjected, ref string zoneGuid, ref string subAreaGuid)
        {
            GetElementDataByNameandTypeRequest inValue = new GetElementDataByNameandTypeRequest();
            inValue.project = project;
            inValue.elementName = elementName;
            inValue.elementTypeName = elementTypeName;
            inValue.elementID = elementID;
            inValue.aliasName1 = aliasName1;
            inValue.aliasName2 = aliasName2;
            inValue.description = description;
            inValue.isInMaintenance = isInMaintenance;
            inValue.IsProjected = IsProjected;
            inValue.zoneGuid = zoneGuid;
            inValue.subAreaGuid = subAreaGuid;
            GetElementDataByNameandTypeResponse retVal = ((NeplanService)(this)).GetElementDataByNameandType(inValue);
            elementID = retVal.elementID;
            aliasName1 = retVal.aliasName1;
            aliasName2 = retVal.aliasName2;
            description = retVal.description;
            isInMaintenance = retVal.isInMaintenance;
            IsProjected = retVal.IsProjected;
            zoneGuid = retVal.zoneGuid;
            subAreaGuid = retVal.subAreaGuid;
        }

        public System.Threading.Tasks.Task<GetElementDataByNameandTypeResponse> GetElementDataByNameandTypeAsync(GetElementDataByNameandTypeRequest request)
        {
            return base.Channel.GetElementDataByNameandTypeAsync(request);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        GetElementDataByNameResponse NeplanService.GetElementDataByName(GetElementDataByNameRequest request)
        {
            return base.Channel.GetElementDataByName(request);
        }

        public void GetElementDataByName(NCC.ExternalProject project, ref string elementName, ref string elementTypeName, ref System.Guid elementID, ref string aliasName1, ref string aliasName2, ref string description, ref bool isInMaintenance, ref bool IsProjected, ref string zoneGuid, ref string subAreaGuid)
        {
            GetElementDataByNameRequest inValue = new GetElementDataByNameRequest();
            inValue.project = project;
            inValue.elementName = elementName;
            inValue.elementTypeName = elementTypeName;
            inValue.elementID = elementID;
            inValue.aliasName1 = aliasName1;
            inValue.aliasName2 = aliasName2;
            inValue.description = description;
            inValue.isInMaintenance = isInMaintenance;
            inValue.IsProjected = IsProjected;
            inValue.zoneGuid = zoneGuid;
            inValue.subAreaGuid = subAreaGuid;
            GetElementDataByNameResponse retVal = ((NeplanService)(this)).GetElementDataByName(inValue);
            elementName = retVal.elementName;
            elementTypeName = retVal.elementTypeName;
            elementID = retVal.elementID;
            aliasName1 = retVal.aliasName1;
            aliasName2 = retVal.aliasName2;
            description = retVal.description;
            isInMaintenance = retVal.isInMaintenance;
            IsProjected = retVal.IsProjected;
            zoneGuid = retVal.zoneGuid;
            subAreaGuid = retVal.subAreaGuid;
        }

        public System.Threading.Tasks.Task<GetElementDataByNameResponse> GetElementDataByNameAsync(GetElementDataByNameRequest request)
        {
            return base.Channel.GetElementDataByNameAsync(request);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        GetElementDataByIDandTypeResponse NeplanService.GetElementDataByIDandType(GetElementDataByIDandTypeRequest request)
        {
            return base.Channel.GetElementDataByIDandType(request);
        }

        public void GetElementDataByIDandType(NCC.ExternalProject project, System.Guid elementID, string elementTypeName, ref string elementName, ref string aliasName1, ref string aliasName2, ref string description, ref bool isInMaintenance, ref bool IsProjected, ref string zoneGuid, ref string subAreaGuid)
        {
            GetElementDataByIDandTypeRequest inValue = new GetElementDataByIDandTypeRequest();
            inValue.project = project;
            inValue.elementID = elementID;
            inValue.elementTypeName = elementTypeName;
            inValue.elementName = elementName;
            inValue.aliasName1 = aliasName1;
            inValue.aliasName2 = aliasName2;
            inValue.description = description;
            inValue.isInMaintenance = isInMaintenance;
            inValue.IsProjected = IsProjected;
            inValue.zoneGuid = zoneGuid;
            inValue.subAreaGuid = subAreaGuid;
            GetElementDataByIDandTypeResponse retVal = ((NeplanService)(this)).GetElementDataByIDandType(inValue);
            elementName = retVal.elementName;
            aliasName1 = retVal.aliasName1;
            aliasName2 = retVal.aliasName2;
            description = retVal.description;
            isInMaintenance = retVal.isInMaintenance;
            IsProjected = retVal.IsProjected;
            zoneGuid = retVal.zoneGuid;
            subAreaGuid = retVal.subAreaGuid;
        }

        public System.Threading.Tasks.Task<GetElementDataByIDandTypeResponse> GetElementDataByIDandTypeAsync(GetElementDataByIDandTypeRequest request)
        {
            return base.Channel.GetElementDataByIDandTypeAsync(request);
        }

        public bool SetElementAttribute(NCC.ExternalProject project, string elementName, string elementType, string attributeName, string attributeValue)
        {
            return base.Channel.SetElementAttribute(project, elementName, elementType, attributeName, attributeValue);
        }

        public System.Threading.Tasks.Task<bool> SetElementAttributeAsync(NCC.ExternalProject project, string elementName, string elementType, string attributeName, string attributeValue)
        {
            return base.Channel.SetElementAttributeAsync(project, elementName, elementType, attributeName, attributeValue);
        }

        public bool SetElementAttributeByID(NCC.ExternalProject project, string elementID, string attributeName, string attributeValue)
        {
            return base.Channel.SetElementAttributeByID(project, elementID, attributeName, attributeValue);
        }

        public System.Threading.Tasks.Task<bool> SetElementAttributeByIDAsync(NCC.ExternalProject project, string elementID, string attributeName, string attributeValue)
        {
            return base.Channel.SetElementAttributeByIDAsync(project, elementID, attributeName, attributeValue);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        GetElementAttributeByIDResponse NeplanService.GetElementAttributeByID(GetElementAttributeByIDRequest request)
        {
            return base.Channel.GetElementAttributeByID(request);
        }

        public bool GetElementAttributeByID(string projectName, string elementID, string attributeName, ref string attributeValue)
        {
            GetElementAttributeByIDRequest inValue = new GetElementAttributeByIDRequest();
            inValue.projectName = projectName;
            inValue.elementID = elementID;
            inValue.attributeName = attributeName;
            inValue.attributeValue = attributeValue;
            GetElementAttributeByIDResponse retVal = ((NeplanService)(this)).GetElementAttributeByID(inValue);
            attributeValue = retVal.attributeValue;
            return retVal.GetElementAttributeByIDResult;
        }

        public System.Threading.Tasks.Task<GetElementAttributeByIDResponse> GetElementAttributeByIDAsync(GetElementAttributeByIDRequest request)
        {
            return base.Channel.GetElementAttributeByIDAsync(request);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        GetElementAttributeByNameResponse NeplanService.GetElementAttributeByName(GetElementAttributeByNameRequest request)
        {
            return base.Channel.GetElementAttributeByName(request);
        }

        public bool GetElementAttributeByName(string projectName, string elementName, string elementType, string attributeName, ref string attributeValue)
        {
            GetElementAttributeByNameRequest inValue = new GetElementAttributeByNameRequest();
            inValue.projectName = projectName;
            inValue.elementName = elementName;
            inValue.elementType = elementType;
            inValue.attributeName = attributeName;
            inValue.attributeValue = attributeValue;
            GetElementAttributeByNameResponse retVal = ((NeplanService)(this)).GetElementAttributeByName(inValue);
            attributeValue = retVal.attributeValue;
            return retVal.GetElementAttributeByNameResult;
        }

        public System.Threading.Tasks.Task<GetElementAttributeByNameResponse> GetElementAttributeByNameAsync(GetElementAttributeByNameRequest request)
        {
            return base.Channel.GetElementAttributeByNameAsync(request);
        }

        public bool AddReadAllRoleToProject(NCC.ExternalProject project)
        {
            return base.Channel.AddReadAllRoleToProject(project);
        }

        public System.Threading.Tasks.Task<bool> AddReadAllRoleToProjectAsync(NCC.ExternalProject project)
        {
            return base.Channel.AddReadAllRoleToProjectAsync(project);
        }

        public string AddVoltageLevel(NCC.ExternalProject project, double un, int colorR, int colorG, int colorB)
        {
            return base.Channel.AddVoltageLevel(project, un, colorR, colorG, colorB);
        }

        public System.Threading.Tasks.Task<string> AddVoltageLevelAsync(NCC.ExternalProject project, double un, int colorR, int colorG, int colorB)
        {
            return base.Channel.AddVoltageLevelAsync(project, un, colorR, colorG, colorB);
        }

        public void SetDiagramMinValues(NCC.ExternalProject project, double xMin, double yMin, short units, double factorXY, double angle)
        {
            base.Channel.SetDiagramMinValues(project, xMin, yMin, units, factorXY, angle);
        }

        public System.Threading.Tasks.Task SetDiagramMinValuesAsync(NCC.ExternalProject project, double xMin, double yMin, short units, double factorXY, double angle)
        {
            return base.Channel.SetDiagramMinValuesAsync(project, xMin, yMin, units, factorXY, angle);
        }

        public bool SetLineStyle(NCC.ExternalProject project, string lineType, short lineStyle)
        {
            return base.Channel.SetLineStyle(project, lineType, lineStyle);
        }

        public System.Threading.Tasks.Task<bool> SetLineStyleAsync(NCC.ExternalProject project, string lineType, short lineStyle)
        {
            return base.Channel.SetLineStyleAsync(project, lineType, lineStyle);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SetDefaultValuesResponse NeplanService.SetDefaultValues(SetDefaultValuesRequest request)
        {
            return base.Channel.SetDefaultValues(request);
        }

        public bool SetDefaultValues(ref NCC.ExternalProject project, short defaultType, short phaseDomination, bool isAnsi)
        {
            SetDefaultValuesRequest inValue = new SetDefaultValuesRequest();
            inValue.project = project;
            inValue.defaultType = defaultType;
            inValue.phaseDomination = phaseDomination;
            inValue.isAnsi = isAnsi;
            SetDefaultValuesResponse retVal = ((NeplanService)(this)).SetDefaultValues(inValue);
            project = retVal.project;
            return retVal.SetDefaultValuesResult;
        }

        public System.Threading.Tasks.Task<SetDefaultValuesResponse> SetDefaultValuesAsync(SetDefaultValuesRequest request)
        {
            return base.Channel.SetDefaultValuesAsync(request);
        }

        public bool SetDiagramParameterAttribute(NCC.ExternalProject project, string parameterType, string attributeName, string attributeValue)
        {
            return base.Channel.SetDiagramParameterAttribute(project, parameterType, attributeName, attributeValue);
        }

        public System.Threading.Tasks.Task<bool> SetDiagramParameterAttributeAsync(NCC.ExternalProject project, string parameterType, string attributeName, string attributeValue)
        {
            return base.Channel.SetDiagramParameterAttributeAsync(project, parameterType, attributeName, attributeValue);
        }

        public bool SetCalcParameterAttribute(NCC.ExternalProject project, string parameterType, string attributeName, string attributeValue)
        {
            return base.Channel.SetCalcParameterAttribute(project, parameterType, attributeName, attributeValue);
        }

        public System.Threading.Tasks.Task<bool> SetCalcParameterAttributeAsync(NCC.ExternalProject project, string parameterType, string attributeName, string attributeValue)
        {
            return base.Channel.SetCalcParameterAttributeAsync(project, parameterType, attributeName, attributeValue);
        }

        public bool SetGraphicLayerWorldCoordinates(NCC.ExternalProject project, bool isDirectionUpY, double factor, double angle, double offsetZeroPoint)
        {
            return base.Channel.SetGraphicLayerWorldCoordinates(project, isDirectionUpY, factor, angle, offsetZeroPoint);
        }

        public System.Threading.Tasks.Task<bool> SetGraphicLayerWorldCoordinatesAsync(NCC.ExternalProject project, bool isDirectionUpY, double factor, double angle, double offsetZeroPoint)
        {
            return base.Channel.SetGraphicLayerWorldCoordinatesAsync(project, isDirectionUpY, factor, angle, offsetZeroPoint);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        AddNodesFromListResponse NeplanService.AddNodesFromList(AddNodesFromListRequest request)
        {
            return base.Channel.AddNodesFromList(request);
        }

        public bool AddNodesFromList(ref NCC.ExternalProject project, ImportElementItem[] listElements)
        {
            AddNodesFromListRequest inValue = new AddNodesFromListRequest();
            inValue.project = project;
            inValue.listElements = listElements;
            AddNodesFromListResponse retVal = ((NeplanService)(this)).AddNodesFromList(inValue);
            project = retVal.project;
            return retVal.AddNodesFromListResult;
        }

        public System.Threading.Tasks.Task<AddNodesFromListResponse> AddNodesFromListAsync(AddNodesFromListRequest request)
        {
            return base.Channel.AddNodesFromListAsync(request);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        AddElementsFromListResponse NeplanService.AddElementsFromList(AddElementsFromListRequest request)
        {
            return base.Channel.AddElementsFromList(request);
        }

        public bool AddElementsFromList(ref NCC.ExternalProject project, ImportElementItem[] listElements, string elementTypeName)
        {
            AddElementsFromListRequest inValue = new AddElementsFromListRequest();
            inValue.project = project;
            inValue.listElements = listElements;
            inValue.elementTypeName = elementTypeName;
            AddElementsFromListResponse retVal = ((NeplanService)(this)).AddElementsFromList(inValue);
            project = retVal.project;
            return retVal.AddElementsFromListResult;
        }

        public System.Threading.Tasks.Task<AddElementsFromListResponse> AddElementsFromListAsync(AddElementsFromListRequest request)
        {
            return base.Channel.AddElementsFromListAsync(request);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        AddSubLoadsFromListResponse NeplanService.AddSubLoadsFromList(AddSubLoadsFromListRequest request)
        {
            return base.Channel.AddSubLoadsFromList(request);
        }

        public bool AddSubLoadsFromList(ref NCC.ExternalProject project, NCC.LoadData[] listLoadData, string loadID)
        {
            AddSubLoadsFromListRequest inValue = new AddSubLoadsFromListRequest();
            inValue.project = project;
            inValue.listLoadData = listLoadData;
            inValue.loadID = loadID;
            AddSubLoadsFromListResponse retVal = ((NeplanService)(this)).AddSubLoadsFromList(inValue);
            project = retVal.project;
            return retVal.AddSubLoadsFromListResult;
        }

        public System.Threading.Tasks.Task<AddSubLoadsFromListResponse> AddSubLoadsFromListAsync(AddSubLoadsFromListRequest request)
        {
            return base.Channel.AddSubLoadsFromListAsync(request);
        }

        public void SetDateTimeLastSave(NCC.ExternalProject project)
        {
            base.Channel.SetDateTimeLastSave(project);
        }

        public System.Threading.Tasks.Task SetDateTimeLastSaveAsync(NCC.ExternalProject project)
        {
            return base.Channel.SetDateTimeLastSaveAsync(project);
        }

        public string GetResultSummary(NCC.ExternalProject project, string analysisType, System.DateTime simulationDateTime, int networkTypeGroup, string networkTypeGroupID)
        {
            return base.Channel.GetResultSummary(project, analysisType, simulationDateTime, networkTypeGroup, networkTypeGroupID);
        }

        public System.Threading.Tasks.Task<string> GetResultSummaryAsync(NCC.ExternalProject project, string analysisType, System.DateTime simulationDateTime, int networkTypeGroup, string networkTypeGroupID)
        {
            return base.Channel.GetResultSummaryAsync(project, analysisType, simulationDateTime, networkTypeGroup, networkTypeGroupID);
        }

        public string[] GetListResultSummary(NCC.ExternalProject project, string analysisType, System.DateTime simulationDateTime, int networkTypeGroup, string networkTypeGroupID)
        {
            return base.Channel.GetListResultSummary(project, analysisType, simulationDateTime, networkTypeGroup, networkTypeGroupID);
        }

        public System.Threading.Tasks.Task<string[]> GetListResultSummaryAsync(NCC.ExternalProject project, string analysisType, System.DateTime simulationDateTime, int networkTypeGroup, string networkTypeGroupID)
        {
            return base.Channel.GetListResultSummaryAsync(project, analysisType, simulationDateTime, networkTypeGroup, networkTypeGroupID);
        }

        public BCP.Neplan.Web.Services.External.NeplanServiceElementResult[] GetAllElementResults(NCC.ExternalProject project, string analysisType)
        {
            return base.Channel.GetAllElementResults(project, analysisType);
        }

        public System.Threading.Tasks.Task<BCP.Neplan.Web.Services.External.NeplanServiceElementResult[]> GetAllElementResultsAsync(NCC.ExternalProject project, string analysisType)
        {
            return base.Channel.GetAllElementResultsAsync(project, analysisType);
        }

        public string GetCalculationSettings(NCC.ExternalProject project, string analysisType)
        {
            return base.Channel.GetCalculationSettings(project, analysisType);
        }

        public System.Threading.Tasks.Task<string> GetCalculationSettingsAsync(NCC.ExternalProject project, string analysisType)
        {
            return base.Channel.GetCalculationSettingsAsync(project, analysisType);
        }

        public string GetResultElementByID(NCC.ExternalProject project, string elementID, int portNr, string analysisType, System.DateTime simulationDateTime)
        {
            return base.Channel.GetResultElementByID(project, elementID, portNr, analysisType, simulationDateTime);
        }

        public System.Threading.Tasks.Task<string> GetResultElementByIDAsync(NCC.ExternalProject project, string elementID, int portNr, string analysisType, System.DateTime simulationDateTime)
        {
            return base.Channel.GetResultElementByIDAsync(project, elementID, portNr, analysisType, simulationDateTime);
        }

        public BCP.Neplan.Web.Services.External.NeplanServiceElementResult[] GetResultsElementsByID(NCC.ExternalProject project, string[] elementID, int portNr, string analysisType, System.DateTime simulationDateTime)
        {
            return base.Channel.GetResultsElementsByID(project, elementID, portNr, analysisType, simulationDateTime);
        }

        public System.Threading.Tasks.Task<BCP.Neplan.Web.Services.External.NeplanServiceElementResult[]> GetResultsElementsByIDAsync(NCC.ExternalProject project, string[] elementID, int portNr, string analysisType, System.DateTime simulationDateTime)
        {
            return base.Channel.GetResultsElementsByIDAsync(project, elementID, portNr, analysisType, simulationDateTime);
        }

        public string GetResultElementByName(NCC.ExternalProject project, string elementName, string elementTypeName, int portNr, string analysisType, System.DateTime simulationDateTime)
        {
            return base.Channel.GetResultElementByName(project, elementName, elementTypeName, portNr, analysisType, simulationDateTime);
        }

        public System.Threading.Tasks.Task<string> GetResultElementByNameAsync(NCC.ExternalProject project, string elementName, string elementTypeName, int portNr, string analysisType, System.DateTime simulationDateTime)
        {
            return base.Channel.GetResultElementByNameAsync(project, elementName, elementTypeName, portNr, analysisType, simulationDateTime);
        }

        public NCC.AnalysisReturnInfo AnalyseVariantWithAnalysisSettings(NCC.ExternalProject project, string analysisRefenceID, string analysisModule, string calcNameID, string analysisMethode, string conditions, string analysisLoadOptionXML, NCC.AnalysisParameterSettings settings)
        {
            return base.Channel.AnalyseVariantWithAnalysisSettings(project, analysisRefenceID, analysisModule, calcNameID, analysisMethode, conditions, analysisLoadOptionXML, settings);
        }

        public System.Threading.Tasks.Task<NCC.AnalysisReturnInfo> AnalyseVariantWithAnalysisSettingsAsync(NCC.ExternalProject project, string analysisRefenceID, string analysisModule, string calcNameID, string analysisMethode, string conditions, string analysisLoadOptionXML, NCC.AnalysisParameterSettings settings)
        {
            return base.Channel.AnalyseVariantWithAnalysisSettingsAsync(project, analysisRefenceID, analysisModule, calcNameID, analysisMethode, conditions, analysisLoadOptionXML, settings);
        }

        public NCC.AnalysisReturnInfo AnalyseVariant(NCC.ExternalProject project, string analysisRefenceID, string analysisModule, string calcNameID, string analysisMethode, string conditions, string analysisLoadOptionXML)
        {
            return base.Channel.AnalyseVariant(project, analysisRefenceID, analysisModule, calcNameID, analysisMethode, conditions, analysisLoadOptionXML);
        }

        public System.Threading.Tasks.Task<NCC.AnalysisReturnInfo> AnalyseVariantAsync(NCC.ExternalProject project, string analysisRefenceID, string analysisModule, string calcNameID, string analysisMethode, string conditions, string analysisLoadOptionXML)
        {
            return base.Channel.AnalyseVariantAsync(project, analysisRefenceID, analysisModule, calcNameID, analysisMethode, conditions, analysisLoadOptionXML);
        }

        public bool IsAnalysisDone(string analysisRefenceID)
        {
            return base.Channel.IsAnalysisDone(analysisRefenceID);
        }

        public System.Threading.Tasks.Task<bool> IsAnalysisDoneAsync(string analysisRefenceID)
        {
            return base.Channel.IsAnalysisDoneAsync(analysisRefenceID);
        }

        public NCC.AnalysisReturnInfo AnalyseWithListFileWithoutSaving(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement)
        {
            return base.Channel.AnalyseWithListFileWithoutSaving(uploadName, analysisModule, copySettingsFromProjectName, fromTime, toTime, timeIncrement);
        }

        public System.Threading.Tasks.Task<NCC.AnalysisReturnInfo> AnalyseWithListFileWithoutSavingAsync(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement)
        {
            return base.Channel.AnalyseWithListFileWithoutSavingAsync(uploadName, analysisModule, copySettingsFromProjectName, fromTime, toTime, timeIncrement);
        }

        public NCC.AnalysisReturnInfo AnalyseWithProjectFileWithoutSaving(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement)
        {
            return base.Channel.AnalyseWithProjectFileWithoutSaving(uploadName, analysisModule, copySettingsFromProjectName, fromTime, toTime, timeIncrement);
        }

        public System.Threading.Tasks.Task<NCC.AnalysisReturnInfo> AnalyseWithProjectFileWithoutSavingAsync(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement)
        {
            return base.Channel.AnalyseWithProjectFileWithoutSavingAsync(uploadName, analysisModule, copySettingsFromProjectName, fromTime, toTime, timeIncrement);
        }

        public NCC.AnalysisReturnInfo AnalyseWithCDEFileWithoutSaving(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement)
        {
            return base.Channel.AnalyseWithCDEFileWithoutSaving(uploadName, analysisModule, copySettingsFromProjectName, fromTime, toTime, timeIncrement);
        }

        public System.Threading.Tasks.Task<NCC.AnalysisReturnInfo> AnalyseWithCDEFileWithoutSavingAsync(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement)
        {
            return base.Channel.AnalyseWithCDEFileWithoutSavingAsync(uploadName, analysisModule, copySettingsFromProjectName, fromTime, toTime, timeIncrement);
        }

        public NCC.AnalysisReturnInfo DoAnalysisFromFiles(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement)
        {
            return base.Channel.DoAnalysisFromFiles(uploadName, analysisModule, copySettingsFromProjectName, fromTime, toTime, timeIncrement);
        }

        public System.Threading.Tasks.Task<NCC.AnalysisReturnInfo> DoAnalysisFromFilesAsync(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement)
        {
            return base.Channel.DoAnalysisFromFilesAsync(uploadName, analysisModule, copySettingsFromProjectName, fromTime, toTime, timeIncrement);
        }

        public NCC.AnalysisReturnInfo EnergyCalculationFromFiles(string uploadName, string fromTime, string toTime, int timeIncrement, string copySettingsFromProjectName)
        {
            return base.Channel.EnergyCalculationFromFiles(uploadName, fromTime, toTime, timeIncrement, copySettingsFromProjectName);
        }

        public System.Threading.Tasks.Task<NCC.AnalysisReturnInfo> EnergyCalculationFromFilesAsync(string uploadName, string fromTime, string toTime, int timeIncrement, string copySettingsFromProjectName)
        {
            return base.Channel.EnergyCalculationFromFilesAsync(uploadName, fromTime, toTime, timeIncrement, copySettingsFromProjectName);
        }

        public NCC.AnalysisReturnInfo LoadAllocationFromDB(string projectName, string measurementDefinitionName, string fromTime, string toTime, int timeIncrement, NCC.AnalysisParameterSettings settings)
        {
            return base.Channel.LoadAllocationFromDB(projectName, measurementDefinitionName, fromTime, toTime, timeIncrement, settings);
        }

        public System.Threading.Tasks.Task<NCC.AnalysisReturnInfo> LoadAllocationFromDBAsync(string projectName, string measurementDefinitionName, string fromTime, string toTime, int timeIncrement, NCC.AnalysisParameterSettings settings)
        {
            return base.Channel.LoadAllocationFromDBAsync(projectName, measurementDefinitionName, fromTime, toTime, timeIncrement, settings);
        }

        public NCC.AnalysisReturnInfo LoadAllocationFromMeasurmentFileAndProjectName(string uploadedMeasurementFileName, string projectName, string fromTime, string toTime, int timeIncrement, NCC.AnalysisParameterSettings settings)
        {
            return base.Channel.LoadAllocationFromMeasurmentFileAndProjectName(uploadedMeasurementFileName, projectName, fromTime, toTime, timeIncrement, settings);
        }

        public System.Threading.Tasks.Task<NCC.AnalysisReturnInfo> LoadAllocationFromMeasurmentFileAndProjectNameAsync(string uploadedMeasurementFileName, string projectName, string fromTime, string toTime, int timeIncrement, NCC.AnalysisParameterSettings settings)
        {
            return base.Channel.LoadAllocationFromMeasurmentFileAndProjectNameAsync(uploadedMeasurementFileName, projectName, fromTime, toTime, timeIncrement, settings);
        }

        public NCC.AnalysisReturnInfo LoadAllocationFromMeasurmentFile(NCC.ExternalProject project, string uploadedMeasurementFileName, string fromTime, string toTime, int timeIncrement, NCC.AnalysisParameterSettings settings)
        {
            return base.Channel.LoadAllocationFromMeasurmentFile(project, uploadedMeasurementFileName, fromTime, toTime, timeIncrement, settings);
        }

        public System.Threading.Tasks.Task<NCC.AnalysisReturnInfo> LoadAllocationFromMeasurmentFileAsync(NCC.ExternalProject project, string uploadedMeasurementFileName, string fromTime, string toTime, int timeIncrement, NCC.AnalysisParameterSettings settings)
        {
            return base.Channel.LoadAllocationFromMeasurmentFileAsync(project, uploadedMeasurementFileName, fromTime, toTime, timeIncrement, settings);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ImportFromListFileAndDoLoadAllocationResponse NeplanService.ImportFromListFileAndDoLoadAllocation(ImportFromListFileAndDoLoadAllocationRequest request)
        {
            return base.Channel.ImportFromListFileAndDoLoadAllocation(request);
        }

        public NCC.ExternalProject ImportFromListFileAndDoLoadAllocation(string uploadName, string projectName, NCC.AnalysisParameterSettings settings, out NCC.AnalysisReturnInfo analysisReturnInfo)
        {
            ImportFromListFileAndDoLoadAllocationRequest inValue = new ImportFromListFileAndDoLoadAllocationRequest();
            inValue.uploadName = uploadName;
            inValue.projectName = projectName;
            inValue.settings = settings;
            ImportFromListFileAndDoLoadAllocationResponse retVal = ((NeplanService)(this)).ImportFromListFileAndDoLoadAllocation(inValue);
            analysisReturnInfo = retVal.analysisReturnInfo;
            return retVal.ImportFromListFileAndDoLoadAllocationResult;
        }

        public System.Threading.Tasks.Task<ImportFromListFileAndDoLoadAllocationResponse> ImportFromListFileAndDoLoadAllocationAsync(ImportFromListFileAndDoLoadAllocationRequest request)
        {
            return base.Channel.ImportFromListFileAndDoLoadAllocationAsync(request);
        }

        public bool DeleteAnaylsisLogFile(string fileName)
        {
            return base.Channel.DeleteAnaylsisLogFile(fileName);
        }

        public System.Threading.Tasks.Task<bool> DeleteAnaylsisLogFileAsync(string fileName)
        {
            return base.Channel.DeleteAnaylsisLogFileAsync(fileName);
        }

        public bool DeleteAnalysisResultFile(string fileName)
        {
            return base.Channel.DeleteAnalysisResultFile(fileName);
        }

        public System.Threading.Tasks.Task<bool> DeleteAnalysisResultFileAsync(string fileName)
        {
            return base.Channel.DeleteAnalysisResultFileAsync(fileName);
        }

        public bool DeleteProject(NCC.ExternalProject project)
        {
            return base.Channel.DeleteProject(project);
        }

        public System.Threading.Tasks.Task<bool> DeleteProjectAsync(NCC.ExternalProject project)
        {
            return base.Channel.DeleteProjectAsync(project);
        }

        public bool MarkedProjectAsDeleted(NCC.ExternalProject project)
        {
            return base.Channel.MarkedProjectAsDeleted(project);
        }

        public System.Threading.Tasks.Task<bool> MarkedProjectAsDeletedAsync(NCC.ExternalProject project)
        {
            return base.Channel.MarkedProjectAsDeletedAsync(project);
        }

        public int ImportFromFile(string uploadName, string projectName, bool withGraphic, string copySettingsFromProjectName, bool merge, bool mergeOnNewDiagram)
        {
            return base.Channel.ImportFromFile(uploadName, projectName, withGraphic, copySettingsFromProjectName, merge, mergeOnNewDiagram);
        }

        public System.Threading.Tasks.Task<int> ImportFromFileAsync(string uploadName, string projectName, bool withGraphic, string copySettingsFromProjectName, bool merge, bool mergeOnNewDiagram)
        {
            return base.Channel.ImportFromFileAsync(uploadName, projectName, withGraphic, copySettingsFromProjectName, merge, mergeOnNewDiagram);
        }

        public bool AddFeederFromList(NCC.ExternalProject project, ImportFeederItem[] feederList)
        {
            return base.Channel.AddFeederFromList(project, feederList);
        }

        public System.Threading.Tasks.Task<bool> AddFeederFromListAsync(NCC.ExternalProject project, ImportFeederItem[] feederList)
        {
            return base.Channel.AddFeederFromListAsync(project, feederList);
        }

        public NCC.ExternalProject ImportFromList(ImportElementItem[] listElements, string projectName, string copySettingsFromProjectName)
        {
            return base.Channel.ImportFromList(listElements, projectName, copySettingsFromProjectName);
        }

        public System.Threading.Tasks.Task<NCC.ExternalProject> ImportFromListAsync(ImportElementItem[] listElements, string projectName, string copySettingsFromProjectName)
        {
            return base.Channel.ImportFromListAsync(listElements, projectName, copySettingsFromProjectName);
        }

        public NCC.ExternalProject ImportFromListFile(string uploadName, string projectName, string copySettingsFromProjectName)
        {
            return base.Channel.ImportFromListFile(uploadName, projectName, copySettingsFromProjectName);
        }

        public System.Threading.Tasks.Task<NCC.ExternalProject> ImportFromListFileAsync(string uploadName, string projectName, string copySettingsFromProjectName)
        {
            return base.Channel.ImportFromListFileAsync(uploadName, projectName, copySettingsFromProjectName);
        }

        public NCC.ExternalProject MergeProjectFromListFile(string uploadName, string projectToMerge, bool mergeOnNewDiagram)
        {
            return base.Channel.MergeProjectFromListFile(uploadName, projectToMerge, mergeOnNewDiagram);
        }

        public System.Threading.Tasks.Task<NCC.ExternalProject> MergeProjectFromListFileAsync(string uploadName, string projectToMerge, bool mergeOnNewDiagram)
        {
            return base.Channel.MergeProjectFromListFileAsync(uploadName, projectToMerge, mergeOnNewDiagram);
        }

        public NCC.ExternalProject ImportFromCDE(string path1, string path2, string path3, string copySettingsFromProjectName, bool withGraphic)
        {
            return base.Channel.ImportFromCDE(path1, path2, path3, copySettingsFromProjectName, withGraphic);
        }

        public System.Threading.Tasks.Task<NCC.ExternalProject> ImportFromCDEAsync(string path1, string path2, string path3, string copySettingsFromProjectName, bool withGraphic)
        {
            return base.Channel.ImportFromCDEAsync(path1, path2, path3, copySettingsFromProjectName, withGraphic);
        }

        public NCC.ExternalProject ImportFromCDEFiles(string cdeFilename, string ndbFilename, string xmlFilename, string copySettingsFromProjectName, bool withGraphic)
        {
            return base.Channel.ImportFromCDEFiles(cdeFilename, ndbFilename, xmlFilename, copySettingsFromProjectName, withGraphic);
        }

        public System.Threading.Tasks.Task<NCC.ExternalProject> ImportFromCDEFilesAsync(string cdeFilename, string ndbFilename, string xmlFilename, string copySettingsFromProjectName, bool withGraphic)
        {
            return base.Channel.ImportFromCDEFilesAsync(cdeFilename, ndbFilename, xmlFilename, copySettingsFromProjectName, withGraphic);
        }

        public NCC.ExternalProject ImportFromCDEZipFile(string zipFile, string copySettingsFromProjectName, bool withGraphic)
        {
            return base.Channel.ImportFromCDEZipFile(zipFile, copySettingsFromProjectName, withGraphic);
        }

        public System.Threading.Tasks.Task<NCC.ExternalProject> ImportFromCDEZipFileAsync(string zipFile, string copySettingsFromProjectName, bool withGraphic)
        {
            return base.Channel.ImportFromCDEZipFileAsync(zipFile, copySettingsFromProjectName, withGraphic);
        }

        public NCC.ExternalProject ImportFromPSSEFiles(string rawFilename, string seqFilename, string dyrFilename, string drwFilename, int psseVersion, bool ukr, bool withStations, bool withBreakers, int charNumStations, int nameRule, int lineQuant, string copySettingsFromProjectName)
        {
            return base.Channel.ImportFromPSSEFiles(rawFilename, seqFilename, dyrFilename, drwFilename, psseVersion, ukr, withStations, withBreakers, charNumStations, nameRule, lineQuant, copySettingsFromProjectName);
        }

        public System.Threading.Tasks.Task<NCC.ExternalProject> ImportFromPSSEFilesAsync(string rawFilename, string seqFilename, string dyrFilename, string drwFilename, int psseVersion, bool ukr, bool withStations, bool withBreakers, int charNumStations, int nameRule, int lineQuant, string copySettingsFromProjectName)
        {
            return base.Channel.ImportFromPSSEFilesAsync(rawFilename, seqFilename, dyrFilename, drwFilename, psseVersion, ukr, withStations, withBreakers, charNumStations, nameRule, lineQuant, copySettingsFromProjectName);
        }

        public NCC.ExternalProject ImportFromPSSEZipFile(string zipFile, int psseVersion, bool ukr, bool withStations, bool withBreakers, int charNumStations, int nameRule, int lineQuant, string copySettingsFromProjectName)
        {
            return base.Channel.ImportFromPSSEZipFile(zipFile, psseVersion, ukr, withStations, withBreakers, charNumStations, nameRule, lineQuant, copySettingsFromProjectName);
        }

        public System.Threading.Tasks.Task<NCC.ExternalProject> ImportFromPSSEZipFileAsync(string zipFile, int psseVersion, bool ukr, bool withStations, bool withBreakers, int charNumStations, int nameRule, int lineQuant, string copySettingsFromProjectName)
        {
            return base.Channel.ImportFromPSSEZipFileAsync(zipFile, psseVersion, ukr, withStations, withBreakers, charNumStations, nameRule, lineQuant, copySettingsFromProjectName);
        }

        public int ImportFromShapeFile(string path, string fileName)
        {
            return base.Channel.ImportFromShapeFile(path, fileName);
        }

        public System.Threading.Tasks.Task<int> ImportFromShapeFileAsync(string path, string fileName)
        {
            return base.Channel.ImportFromShapeFileAsync(path, fileName);
        }

        public bool ImportFromNDB(NCC.ExternalProject project, string uploadName, string origFileName, string mediumType)
        {
            return base.Channel.ImportFromNDB(project, uploadName, origFileName, mediumType);
        }

        public System.Threading.Tasks.Task<bool> ImportFromNDBAsync(NCC.ExternalProject project, string uploadName, string origFileName, string mediumType)
        {
            return base.Channel.ImportFromNDBAsync(project, uploadName, origFileName, mediumType);
        }

        public bool ImportMeasuredDataFromXMlFile(NCC.ExternalProject project, string uploadName, string definitionName)
        {
            return base.Channel.ImportMeasuredDataFromXMlFile(project, uploadName, definitionName);
        }

        public System.Threading.Tasks.Task<bool> ImportMeasuredDataFromXMlFileAsync(NCC.ExternalProject project, string uploadName, string definitionName)
        {
            return base.Channel.ImportMeasuredDataFromXMlFileAsync(project, uploadName, definitionName);
        }

        public System.IO.Stream ExportProjectToNEP360(string projectName)
        {
            return base.Channel.ExportProjectToNEP360(projectName);
        }

        public System.Threading.Tasks.Task<System.IO.Stream> ExportProjectToNEP360Async(string projectName)
        {
            return base.Channel.ExportProjectToNEP360Async(projectName);
        }

        public void WriteMessageToLogFile(NCC.ExternalProject project, string text, string logLvl)
        {
            base.Channel.WriteMessageToLogFile(project, text, logLvl);
        }

        public System.Threading.Tasks.Task WriteMessageToLogFileAsync(NCC.ExternalProject project, string text, string logLvl)
        {
            return base.Channel.WriteMessageToLogFileAsync(project, text, logLvl);
        }

        public bool DeleteUserLogFile()
        {
            return base.Channel.DeleteUserLogFile();
        }

        public System.Threading.Tasks.Task<bool> DeleteUserLogFileAsync()
        {
            return base.Channel.DeleteUserLogFileAsync();
        }

        public string GetLogFileAsString()
        {
            return base.Channel.GetLogFileAsString();
        }

        public System.Threading.Tasks.Task<string> GetLogFileAsStringAsync()
        {
            return base.Channel.GetLogFileAsStringAsync();
        }

        public string[] GetLogFileAsList()
        {
            return base.Channel.GetLogFileAsList();
        }

        public System.Threading.Tasks.Task<string[]> GetLogFileAsListAsync()
        {
            return base.Channel.GetLogFileAsListAsync();
        }

        public string XMLUpload(System.IO.Stream stream)
        {
            return base.Channel.XMLUpload(stream);
        }

        public System.Threading.Tasks.Task<string> XMLUploadAsync(System.IO.Stream stream)
        {
            return base.Channel.XMLUploadAsync(stream);
        }

        public string CDEUpload(System.IO.Stream stream)
        {
            return base.Channel.CDEUpload(stream);
        }

        public System.Threading.Tasks.Task<string> CDEUploadAsync(System.IO.Stream stream)
        {
            return base.Channel.CDEUploadAsync(stream);
        }

        public string NDBUpload(System.IO.Stream stream)
        {
            return base.Channel.NDBUpload(stream);
        }

        public System.Threading.Tasks.Task<string> NDBUploadAsync(System.IO.Stream stream)
        {
            return base.Channel.NDBUploadAsync(stream);
        }

        public string Nep360Upload(System.IO.Stream stream)
        {
            return base.Channel.Nep360Upload(stream);
        }

        public System.Threading.Tasks.Task<string> Nep360UploadAsync(System.IO.Stream stream)
        {
            return base.Channel.Nep360UploadAsync(stream);
        }

        public string ZipUpload(System.IO.Stream stream)
        {
            return base.Channel.ZipUpload(stream);
        }

        public System.Threading.Tasks.Task<string> ZipUploadAsync(System.IO.Stream stream)
        {
            return base.Channel.ZipUploadAsync(stream);
        }

        public string NepMeasUpload(System.IO.Stream stream)
        {
            return base.Channel.NepMeasUpload(stream);
        }

        public System.Threading.Tasks.Task<string> NepMeasUploadAsync(System.IO.Stream stream)
        {
            return base.Channel.NepMeasUploadAsync(stream);
        }

        public System.IO.Stream GetUserLogFile()
        {
            return base.Channel.GetUserLogFile();
        }

        public System.Threading.Tasks.Task<System.IO.Stream> GetUserLogFileAsync()
        {
            return base.Channel.GetUserLogFileAsync();
        }

        public System.IO.Stream GetAnaylsisLogFile(string fileName)
        {
            return base.Channel.GetAnaylsisLogFile(fileName);
        }

        public System.Threading.Tasks.Task<System.IO.Stream> GetAnaylsisLogFileAsync(string fileName)
        {
            return base.Channel.GetAnaylsisLogFileAsync(fileName);
        }

        public System.IO.Stream GetAnalysisResultFile(string fileName)
        {
            return base.Channel.GetAnalysisResultFile(fileName);
        }

        public System.Threading.Tasks.Task<System.IO.Stream> GetAnalysisResultFileAsync(string fileName)
        {
            return base.Channel.GetAnalysisResultFileAsync(fileName);
        }

        public string createDailyBackup(bool isAzure, string code)
        {
            return base.Channel.createDailyBackup(isAzure, code);
        }

        public System.Threading.Tasks.Task<string> createDailyBackupAsync(bool isAzure, string code)
        {
            return base.Channel.createDailyBackupAsync(isAzure, code);
        }

        public string removeAllExpiredProjects(string code)
        {
            return base.Channel.removeAllExpiredProjects(code);
        }

        public System.Threading.Tasks.Task<string> removeAllExpiredProjectsAsync(string code)
        {
            return base.Channel.removeAllExpiredProjectsAsync(code);
        }

        public System.Collections.Generic.KeyValuePair<string, string>[] GetNamesOfElementsByType(string projectName, string elementType)
        {
            return base.Channel.GetNamesOfElementsByType(projectName, elementType);
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.KeyValuePair<string, string>[]> GetNamesOfElementsByTypeAsync(string projectName, string elementType)
        {
            return base.Channel.GetNamesOfElementsByTypeAsync(projectName, elementType);
        }

        public System.Collections.Generic.KeyValuePair<string, BCP.Neplan.Web.Services.External.NeplanServiceConnection_info>[] FindSwitchStatusOfElements(string projectName, string[] GenLoadNames)
        {
            return base.Channel.FindSwitchStatusOfElements(projectName, GenLoadNames);
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.KeyValuePair<string, BCP.Neplan.Web.Services.External.NeplanServiceConnection_info>[]> FindSwitchStatusOfElementsAsync(string projectName, string[] GenLoadNames)
        {
            return base.Channel.FindSwitchStatusOfElementsAsync(projectName, GenLoadNames);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Find_Voltage_Level_of_One_Port_ElementResponse NeplanService.Find_Voltage_Level_of_One_Port_Element(Find_Voltage_Level_of_One_Port_ElementRequest request)
        {
            return base.Channel.Find_Voltage_Level_of_One_Port_Element(request);
        }

        public bool Find_Voltage_Level_of_One_Port_Element(string projectName, string elementName, ref double Voltage)
        {
            Find_Voltage_Level_of_One_Port_ElementRequest inValue = new Find_Voltage_Level_of_One_Port_ElementRequest();
            inValue.projectName = projectName;
            inValue.elementName = elementName;
            inValue.Voltage = Voltage;
            Find_Voltage_Level_of_One_Port_ElementResponse retVal = ((NeplanService)(this)).Find_Voltage_Level_of_One_Port_Element(inValue);
            Voltage = retVal.Voltage;
            return retVal.Find_Voltage_Level_of_One_Port_ElementResult;
        }

        public System.Threading.Tasks.Task<Find_Voltage_Level_of_One_Port_ElementResponse> Find_Voltage_Level_of_One_Port_ElementAsync(Find_Voltage_Level_of_One_Port_ElementRequest request)
        {
            return base.Channel.Find_Voltage_Level_of_One_Port_ElementAsync(request);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        GetBusBarOf1PortElementByIDResponse NeplanService.GetBusBarOf1PortElementByID(GetBusBarOf1PortElementByIDRequest request)
        {
            return base.Channel.GetBusBarOf1PortElementByID(request);
        }

        public bool GetBusBarOf1PortElementByID(string projectName, System.Nullable<System.Guid> elemGuid, out string busbarName, out System.Nullable<System.Guid> busbarGuid)
        {
            GetBusBarOf1PortElementByIDRequest inValue = new GetBusBarOf1PortElementByIDRequest();
            inValue.projectName = projectName;
            inValue.elemGuid = elemGuid;
            GetBusBarOf1PortElementByIDResponse retVal = ((NeplanService)(this)).GetBusBarOf1PortElementByID(inValue);
            busbarName = retVal.busbarName;
            busbarGuid = retVal.busbarGuid;
            return retVal.GetBusBarOf1PortElementByIDResult;
        }

        public System.Threading.Tasks.Task<GetBusBarOf1PortElementByIDResponse> GetBusBarOf1PortElementByIDAsync(GetBusBarOf1PortElementByIDRequest request)
        {
            return base.Channel.GetBusBarOf1PortElementByIDAsync(request);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        GetBusBarOf1PortElementByNameResponse NeplanService.GetBusBarOf1PortElementByName(GetBusBarOf1PortElementByNameRequest request)
        {
            return base.Channel.GetBusBarOf1PortElementByName(request);
        }

        public bool GetBusBarOf1PortElementByName(string projectName, string elemName, out string busbarName, out System.Nullable<System.Guid> busbarGuid)
        {
            GetBusBarOf1PortElementByNameRequest inValue = new GetBusBarOf1PortElementByNameRequest();
            inValue.projectName = projectName;
            inValue.elemName = elemName;
            GetBusBarOf1PortElementByNameResponse retVal = ((NeplanService)(this)).GetBusBarOf1PortElementByName(inValue);
            busbarName = retVal.busbarName;
            busbarGuid = retVal.busbarGuid;
            return retVal.GetBusBarOf1PortElementByNameResult;
        }

        public System.Threading.Tasks.Task<GetBusBarOf1PortElementByNameResponse> GetBusBarOf1PortElementByNameAsync(GetBusBarOf1PortElementByNameRequest request)
        {
            return base.Channel.GetBusBarOf1PortElementByNameAsync(request);
        }

        public bool ChangeSwitchStatusOfElements(string projectName, string GenLoadName, bool connectionstatus)
        {
            return base.Channel.ChangeSwitchStatusOfElements(projectName, GenLoadName, connectionstatus);
        }

        public System.Threading.Tasks.Task<bool> ChangeSwitchStatusOfElementsAsync(string projectName, string GenLoadName, bool connectionstatus)
        {
            return base.Channel.ChangeSwitchStatusOfElementsAsync(projectName, GenLoadName, connectionstatus);
        }

        public BCP.Neplan.Web.Services.External.NeplanServiceLoadGeneration_info[] GetPQValuesLdSmAsm(string projectName)
        {
            return base.Channel.GetPQValuesLdSmAsm(projectName);
        }

        public System.Threading.Tasks.Task<BCP.Neplan.Web.Services.External.NeplanServiceLoadGeneration_info[]> GetPQValuesLdSmAsmAsync(string projectName)
        {
            return base.Channel.GetPQValuesLdSmAsmAsync(projectName);
        }

        public bool SetPowerofLoadsGenerators(string projectname, BCP.Neplan.Web.Services.External.NeplanServiceLoadGeneration_info[] loadgens)
        {
            return base.Channel.SetPowerofLoadsGenerators(projectname, loadgens);
        }

        public System.Threading.Tasks.Task<bool> SetPowerofLoadsGeneratorsAsync(string projectname, BCP.Neplan.Web.Services.External.NeplanServiceLoadGeneration_info[] loadgens)
        {
            return base.Channel.SetPowerofLoadsGeneratorsAsync(projectname, loadgens);
        }

        public bool ChangeSwitchStatusOfElementList(string projectName, System.Guid[] elemids, bool connectionstatus)
        {
            return base.Channel.ChangeSwitchStatusOfElementList(projectName, elemids, connectionstatus);
        }

        public System.Threading.Tasks.Task<bool> ChangeSwitchStatusOfElementListAsync(string projectName, System.Guid[] elemids, bool connectionstatus)
        {
            return base.Channel.ChangeSwitchStatusOfElementListAsync(projectName, elemids, connectionstatus);
        }

        public BCP.Neplan.Web.Services.NeplanDomainServiceImportReturnInfo ImportIEC_62325_451_2FilesAndDoCIMExport(string folderpath, System.Guid variantID, string username, bool onlyOneEQ, string mAS)
        {
            return base.Channel.ImportIEC_62325_451_2FilesAndDoCIMExport(folderpath, variantID, username, onlyOneEQ, mAS);
        }

        public System.Threading.Tasks.Task<BCP.Neplan.Web.Services.NeplanDomainServiceImportReturnInfo> ImportIEC_62325_451_2FilesAndDoCIMExportAsync(string folderpath, System.Guid variantID, string username, bool onlyOneEQ, string mAS)
        {
            return base.Channel.ImportIEC_62325_451_2FilesAndDoCIMExportAsync(folderpath, variantID, username, onlyOneEQ, mAS);
        }

        public System.Guid[] GetFeederIDByName(string ProjectName, string VariantName, string[] FeederNames)
        {
            return base.Channel.GetFeederIDByName(ProjectName, VariantName, FeederNames);
        }

        public System.Threading.Tasks.Task<System.Guid[]> GetFeederIDByNameAsync(string ProjectName, string VariantName, string[] FeederNames)
        {
            return base.Channel.GetFeederIDByNameAsync(ProjectName, VariantName, FeederNames);
        }
    }
    namespace BCP.Neplan.Web.Services.External
    {
        using System.Runtime.Serialization;


        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name = "NeplanService.ElementResult", Namespace = "http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.External")]
        public partial class NeplanServiceElementResult : object, System.Runtime.Serialization.IExtensibleDataObject
        {

            private System.Runtime.Serialization.ExtensionDataObject extensionDataField;

            private System.Guid ElementIDField;

            private string NameField;

            private string XMLdataField;

            private short portNrField;

            public System.Runtime.Serialization.ExtensionDataObject ExtensionData
            {
                get
                {
                    return this.extensionDataField;
                }
                set
                {
                    this.extensionDataField = value;
                }
            }

            [System.Runtime.Serialization.DataMemberAttribute()]
            public System.Guid ElementID
            {
                get
                {
                    return this.ElementIDField;
                }
                set
                {
                    this.ElementIDField = value;
                }
            }

            [System.Runtime.Serialization.DataMemberAttribute()]
            public string Name
            {
                get
                {
                    return this.NameField;
                }
                set
                {
                    this.NameField = value;
                }
            }

            [System.Runtime.Serialization.DataMemberAttribute()]
            public string XMLdata
            {
                get
                {
                    return this.XMLdataField;
                }
                set
                {
                    this.XMLdataField = value;
                }
            }

            [System.Runtime.Serialization.DataMemberAttribute()]
            public short portNr
            {
                get
                {
                    return this.portNrField;
                }
                set
                {
                    this.portNrField = value;
                }
            }
        }

        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name = "NeplanService.Connection_info", Namespace = "http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.External")]
        public partial class NeplanServiceConnection_info : object, System.Runtime.Serialization.IExtensibleDataObject
        {

            private System.Runtime.Serialization.ExtensionDataObject extensionDataField;

            private string ConnectionStatusField;

            private string CoordinateXField;

            private string CoordinateYField;

            private string Elem_Connection_IDField;

            private string Elem_IDField;

            private string Elem_NameField;

            private string ElementTypeField;

            private string MPRNField;

            private string PhasesField;

            public System.Runtime.Serialization.ExtensionDataObject ExtensionData
            {
                get
                {
                    return this.extensionDataField;
                }
                set
                {
                    this.extensionDataField = value;
                }
            }

            [System.Runtime.Serialization.DataMemberAttribute()]
            public string ConnectionStatus
            {
                get
                {
                    return this.ConnectionStatusField;
                }
                set
                {
                    this.ConnectionStatusField = value;
                }
            }

            [System.Runtime.Serialization.DataMemberAttribute()]
            public string CoordinateX
            {
                get
                {
                    return this.CoordinateXField;
                }
                set
                {
                    this.CoordinateXField = value;
                }
            }

            [System.Runtime.Serialization.DataMemberAttribute()]
            public string CoordinateY
            {
                get
                {
                    return this.CoordinateYField;
                }
                set
                {
                    this.CoordinateYField = value;
                }
            }

            [System.Runtime.Serialization.DataMemberAttribute()]
            public string Elem_Connection_ID
            {
                get
                {
                    return this.Elem_Connection_IDField;
                }
                set
                {
                    this.Elem_Connection_IDField = value;
                }
            }

            [System.Runtime.Serialization.DataMemberAttribute()]
            public string Elem_ID
            {
                get
                {
                    return this.Elem_IDField;
                }
                set
                {
                    this.Elem_IDField = value;
                }
            }

            [System.Runtime.Serialization.DataMemberAttribute()]
            public string Elem_Name
            {
                get
                {
                    return this.Elem_NameField;
                }
                set
                {
                    this.Elem_NameField = value;
                }
            }

            [System.Runtime.Serialization.DataMemberAttribute()]
            public string ElementType
            {
                get
                {
                    return this.ElementTypeField;
                }
                set
                {
                    this.ElementTypeField = value;
                }
            }

            [System.Runtime.Serialization.DataMemberAttribute()]
            public string MPRN
            {
                get
                {
                    return this.MPRNField;
                }
                set
                {
                    this.MPRNField = value;
                }
            }

            [System.Runtime.Serialization.DataMemberAttribute()]
            public string Phases
            {
                get
                {
                    return this.PhasesField;
                }
                set
                {
                    this.PhasesField = value;
                }
            }
        }

        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name = "NeplanService.LoadGeneration_info", Namespace = "http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.External")]
        public partial class NeplanServiceLoadGeneration_info : object, System.Runtime.Serialization.IExtensibleDataObject
        {

            private System.Runtime.Serialization.ExtensionDataObject extensionDataField;

            private double PField;

            private double QField;

            private short UnitField;

            private string elementnameField;

            private string elementtypeField;

            private System.Guid elemidField;

            public System.Runtime.Serialization.ExtensionDataObject ExtensionData
            {
                get
                {
                    return this.extensionDataField;
                }
                set
                {
                    this.extensionDataField = value;
                }
            }

            [System.Runtime.Serialization.DataMemberAttribute()]
            public double P
            {
                get
                {
                    return this.PField;
                }
                set
                {
                    this.PField = value;
                }
            }

            [System.Runtime.Serialization.DataMemberAttribute()]
            public double Q
            {
                get
                {
                    return this.QField;
                }
                set
                {
                    this.QField = value;
                }
            }

            [System.Runtime.Serialization.DataMemberAttribute()]
            public short Unit
            {
                get
                {
                    return this.UnitField;
                }
                set
                {
                    this.UnitField = value;
                }
            }

            [System.Runtime.Serialization.DataMemberAttribute()]
            public string elementname
            {
                get
                {
                    return this.elementnameField;
                }
                set
                {
                    this.elementnameField = value;
                }
            }

            [System.Runtime.Serialization.DataMemberAttribute()]
            public string elementtype
            {
                get
                {
                    return this.elementtypeField;
                }
                set
                {
                    this.elementtypeField = value;
                }
            }

            [System.Runtime.Serialization.DataMemberAttribute()]
            public System.Guid elemid
            {
                get
                {
                    return this.elemidField;
                }
                set
                {
                    this.elemidField = value;
                }
            }
        }
    }
    namespace BCP.Neplan.Web.Services
    {
        using System.Runtime.Serialization;


        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name = "NeplanDomainService.ImportReturnInfo", Namespace = "http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services")]
        public partial class NeplanDomainServiceImportReturnInfo : object, System.Runtime.Serialization.IExtensibleDataObject
        {

            private System.Runtime.Serialization.ExtensionDataObject extensionDataField;

            private string[] LogInfoField;

            private int ReturnValueField;

            private string actualCreatedProjectIDField;

            private string variantIDField;

            public System.Runtime.Serialization.ExtensionDataObject ExtensionData
            {
                get
                {
                    return this.extensionDataField;
                }
                set
                {
                    this.extensionDataField = value;
                }
            }

            [System.Runtime.Serialization.DataMemberAttribute()]
            public string[] LogInfo
            {
                get
                {
                    return this.LogInfoField;
                }
                set
                {
                    this.LogInfoField = value;
                }
            }

            [System.Runtime.Serialization.DataMemberAttribute()]
            public int ReturnValue
            {
                get
                {
                    return this.ReturnValueField;
                }
                set
                {
                    this.ReturnValueField = value;
                }
            }

            [System.Runtime.Serialization.DataMemberAttribute()]
            public string actualCreatedProjectID
            {
                get
                {
                    return this.actualCreatedProjectIDField;
                }
                set
                {
                    this.actualCreatedProjectIDField = value;
                }
            }

            [System.Runtime.Serialization.DataMemberAttribute()]
            public string variantID
            {
                get
                {
                    return this.variantIDField;
                }
                set
                {
                    this.variantIDField = value;
                }
            }
        }
    }
}
